// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: warden/vemanager/vemanager.proto

package vemanager

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ABCI treats a VoteExtensions as a byte array, but we need to distinguish
// between multiple extensions coming from different sources, i.e. we want an
// array of byte arrays, which is what this type represents.
type VoteExtensions struct {
	Extensions [][]byte `protobuf:"bytes,1,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *VoteExtensions) Reset()         { *m = VoteExtensions{} }
func (m *VoteExtensions) String() string { return proto.CompactTextString(m) }
func (*VoteExtensions) ProtoMessage()    {}
func (*VoteExtensions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d55545178de18eb8, []int{0}
}
func (m *VoteExtensions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteExtensions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteExtensions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteExtensions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteExtensions.Merge(m, src)
}
func (m *VoteExtensions) XXX_Size() int {
	return m.Size()
}
func (m *VoteExtensions) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteExtensions.DiscardUnknown(m)
}

var xxx_messageInfo_VoteExtensions proto.InternalMessageInfo

func (m *VoteExtensions) GetExtensions() [][]byte {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func init() {
	proto.RegisterType((*VoteExtensions)(nil), "warden.vemanager.VoteExtensions")
}

func init() { proto.RegisterFile("warden/vemanager/vemanager.proto", fileDescriptor_d55545178de18eb8) }

var fileDescriptor_d55545178de18eb8 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x4f, 0x2c, 0x4a,
	0x49, 0xcd, 0xd3, 0x2f, 0x4b, 0xcd, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0x2d, 0x42, 0xb0, 0xf4, 0x0a,
	0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x04, 0x20, 0x2a, 0xf4, 0xe0, 0xe2, 0x4a, 0x06, 0x5c, 0x7c, 0x61,
	0xf9, 0x25, 0xa9, 0xae, 0x15, 0x25, 0xa9, 0x79, 0xc5, 0x99, 0xf9, 0x79, 0xc5, 0x42, 0x72, 0x5c,
	0x5c, 0xa9, 0x70, 0x9e, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0x4f, 0x10, 0x92, 0x88, 0x53, 0xc4, 0x89,
	0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3,
	0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xd9, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26,
	0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x43, 0x2c, 0xd2, 0x05, 0x5b, 0x9b, 0x9c, 0x9f, 0x03, 0xe5, 0xa3,
	0x71, 0xf5, 0x13, 0x0b, 0x0a, 0x10, 0x6e, 0x4c, 0x62, 0x03, 0x4b, 0x1b, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x72, 0x05, 0xf0, 0x0b, 0xc8, 0x00, 0x00, 0x00,
}

func (m *VoteExtensions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteExtensions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteExtensions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Extensions[iNdEx])
			copy(dAtA[i:], m.Extensions[iNdEx])
			i = encodeVarintVemanager(dAtA, i, uint64(len(m.Extensions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVemanager(dAtA []byte, offset int, v uint64) int {
	offset -= sovVemanager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoteExtensions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		for _, b := range m.Extensions {
			l = len(b)
			n += 1 + l + sovVemanager(uint64(l))
		}
	}
	return n
}

func sovVemanager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVemanager(x uint64) (n int) {
	return sovVemanager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoteExtensions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVemanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVemanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVemanager
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVemanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, make([]byte, postIndex-iNdEx))
			copy(m.Extensions[len(m.Extensions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVemanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVemanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVemanager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVemanager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVemanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVemanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVemanager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVemanager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVemanager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVemanager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVemanager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVemanager = fmt.Errorf("proto: unexpected end of group")
)
