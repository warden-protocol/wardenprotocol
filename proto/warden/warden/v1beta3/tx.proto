syntax = "proto3";
package warden.warden.v1beta3;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "warden/warden/v1beta3/key.proto";
import "warden/warden/v1beta3/keychain.proto";
import "warden/warden/v1beta3/params.proto";
import "warden/warden/v1beta3/signature.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/warden/types/v1beta3";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // Create a new Space. The creator will be the first owner of the Space.
  rpc NewSpace(MsgNewSpace) returns (MsgNewSpaceResponse);

  // Add a new owner to a Space.
  rpc AddSpaceOwner(MsgAddSpaceOwner) returns (MsgAddSpaceOwnerResponse);

  // Remove an owner from the Space.
  rpc RemoveSpaceOwner(MsgRemoveSpaceOwner) returns (MsgRemoveSpaceOwnerResponse);

  // Create a new Keychain. The user will be the first admin of the Keychain.
  rpc NewKeychain(MsgNewKeychain) returns (MsgNewKeychainResponse);

  // Add a new writer to a Keychain.
  rpc AddKeychainWriter(MsgAddKeychainWriter) returns (MsgAddKeychainWriterResponse);

  // Update a Space.
  rpc UpdateSpace(MsgUpdateSpace) returns (MsgUpdateSpaceResponse);

  // Update a Keychain.
  rpc UpdateKeychain(MsgUpdateKeychain) returns (MsgUpdateKeychainResponse);

  // Create a new KeyRequest.
  rpc NewKeyRequest(MsgNewKeyRequest) returns (MsgNewKeyRequestResponse);

  // Fulfil or reject a KeyRequest.
  rpc FulfilKeyRequest(MsgFulfilKeyRequest) returns (MsgFulfilKeyRequestResponse);

  // Update a Key.
  rpc UpdateKey(MsgUpdateKey) returns (MsgUpdateKeyResponse);

  // Create a new SignRequest.
  rpc NewSignRequest(MsgNewSignRequest) returns (MsgNewSignRequestResponse);

  // Fulfil or reject a SignRequest.
  rpc FulfilSignRequest(MsgFulfilSignRequest) returns (MsgFulfilSignRequestResponse);

  // Add a new admin to a Keychain
  rpc AddKeychainAdmin(MsgAddKeychainAdminRequest) returns (MsgAddKeychainAdminResponse);

  /// Remove admin from a Keychain
  rpc RemoveKeychainAdmin(MsgRemoveKeychainAdminRequest) returns (MsgRemoveKeychainAdminResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "warden/x/warden/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgNewSpace {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 approve_admin_template_id = 2;
  uint64 reject_admin_template_id = 3;
  uint64 approve_sign_template_id = 4;
  uint64 reject_sign_template_id = 5;
  repeated string additional_owners = 6;
}

message MsgNewSpaceResponse {
  uint64 id = 1;
}

message MsgAddSpaceOwner {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 space_id = 2;
  string new_owner = 3;
  uint64 nonce = 4;
}

message MsgAddSpaceOwnerResponse {}

message MsgRemoveSpaceOwner {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 space_id = 2;
  string owner = 3;
  uint64 nonce = 4;
}

message MsgRemoveSpaceOwnerResponse {}

message MsgNewKeychain {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string name = 2;
  reserved 3;
  KeychainFees keychain_fees = 4 [(gogoproto.nullable) = false];
  string description = 5;
  string url = 6;
  string keybase_id = 7;
}

message MsgNewKeychainResponse {
  uint64 id = 1;
}

message MsgAddKeychainWriter {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 keychain_id = 2;
  string writer = 3;
}

message MsgAddKeychainWriterResponse {}

message MsgUpdateSpace {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 space_id = 2;
  uint64 nonce = 3;
  uint64 approve_admin_template_id = 4;
  uint64 reject_admin_template_id = 5;
  uint64 approve_sign_template_id = 6;
  uint64 reject_sign_template_id = 7;
}

message MsgUpdateSpaceResponse {}

message MsgUpdateKeychain {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 keychain_id = 2;
  string name = 3;
  reserved 4;
  KeychainFees keychain_fees = 5 [(gogoproto.nullable) = false];
  string description = 6;
  string url = 7;
  string keybase_id = 8;
}

message MsgUpdateKeychainResponse {}

message MsgAddKeychainAdminRequest {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 keychain_id = 2;
  string new_admin = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgAddKeychainAdminResponse {}

message MsgRemoveKeychainAdminRequest {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 keychain_id = 2;
  string admin = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgRemoveKeychainAdminResponse {}

message MsgNewKeyRequest {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 space_id = 2;
  uint64 keychain_id = 3;
  KeyType key_type = 4;
  uint64 approve_template_id = 5;
  uint64 reject_template_id = 6;
  repeated cosmos.base.v1beta1.Coin max_keychain_fees = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins"
  ];
  uint64 nonce = 8;
}

message MsgNewKeyRequestResponse {
  uint64 id = 1;
}

message MsgNewKey {
  bytes public_key = 1;
}

message MsgFulfilKeyRequest {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 request_id = 2;
  KeyRequestStatus status = 3;

  oneof result {
    MsgNewKey key = 4;
    string reject_reason = 5;
  }
}

message MsgFulfilKeyRequestResponse {}

message MsgUpdateKey {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 key_id = 2;
  uint64 approve_template_id = 4;
  uint64 reject_template_id = 5;
}

message MsgUpdateKeyResponse {}

message MsgNewSignRequest {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1;
  uint64 key_id = 2;
  bytes input = 3;
  repeated string analyzers = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes encryption_key = 5;
  repeated cosmos.base.v1beta1.Coin max_keychain_fees = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins"
  ];
  uint64 nonce = 7;
  BroadcastType broadcast_type = 8;
}

message MsgNewSignRequestResponse {
  uint64 id = 1;
}

message MsgSignedData {
  bytes signed_data = 1;
}

message MsgFulfilSignRequest {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 request_id = 2;
  SignRequestStatus status = 3;

  // Holds the result of the request. If status is approved, the result will
  // contain the signed data that was requested
  // If status is rejected, the result will contain the reason.
  oneof result {
    MsgSignedData payload = 4;
    string reject_reason = 5;
  }
}

message MsgFulfilSignRequestResponse {}
