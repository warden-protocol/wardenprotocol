// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package asyncv1beta1

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_PluginMetrics_7_list)(nil)

type _PluginMetrics_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_PluginMetrics_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PluginMetrics_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PluginMetrics_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_PluginMetrics_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PluginMetrics_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PluginMetrics_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PluginMetrics_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PluginMetrics_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PluginMetrics                         protoreflect.MessageDescriptor
	fd_PluginMetrics_plugin_id               protoreflect.FieldDescriptor
	fd_PluginMetrics_tasks_count             protoreflect.FieldDescriptor
	fd_PluginMetrics_results_count           protoreflect.FieldDescriptor
	fd_PluginMetrics_total_result_time_msec  protoreflect.FieldDescriptor
	fd_PluginMetrics_total_input_size_bytes  protoreflect.FieldDescriptor
	fd_PluginMetrics_total_output_size_bytes protoreflect.FieldDescriptor
	fd_PluginMetrics_total_fees              protoreflect.FieldDescriptor
)

func init() {
	file_warden_async_v1beta1_metrics_proto_init()
	md_PluginMetrics = File_warden_async_v1beta1_metrics_proto.Messages().ByName("PluginMetrics")
	fd_PluginMetrics_plugin_id = md_PluginMetrics.Fields().ByName("plugin_id")
	fd_PluginMetrics_tasks_count = md_PluginMetrics.Fields().ByName("tasks_count")
	fd_PluginMetrics_results_count = md_PluginMetrics.Fields().ByName("results_count")
	fd_PluginMetrics_total_result_time_msec = md_PluginMetrics.Fields().ByName("total_result_time_msec")
	fd_PluginMetrics_total_input_size_bytes = md_PluginMetrics.Fields().ByName("total_input_size_bytes")
	fd_PluginMetrics_total_output_size_bytes = md_PluginMetrics.Fields().ByName("total_output_size_bytes")
	fd_PluginMetrics_total_fees = md_PluginMetrics.Fields().ByName("total_fees")
}

var _ protoreflect.Message = (*fastReflection_PluginMetrics)(nil)

type fastReflection_PluginMetrics PluginMetrics

func (x *PluginMetrics) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PluginMetrics)(x)
}

func (x *PluginMetrics) slowProtoReflect() protoreflect.Message {
	mi := &file_warden_async_v1beta1_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PluginMetrics_messageType fastReflection_PluginMetrics_messageType
var _ protoreflect.MessageType = fastReflection_PluginMetrics_messageType{}

type fastReflection_PluginMetrics_messageType struct{}

func (x fastReflection_PluginMetrics_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PluginMetrics)(nil)
}
func (x fastReflection_PluginMetrics_messageType) New() protoreflect.Message {
	return new(fastReflection_PluginMetrics)
}
func (x fastReflection_PluginMetrics_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PluginMetrics
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PluginMetrics) Descriptor() protoreflect.MessageDescriptor {
	return md_PluginMetrics
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PluginMetrics) Type() protoreflect.MessageType {
	return _fastReflection_PluginMetrics_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PluginMetrics) New() protoreflect.Message {
	return new(fastReflection_PluginMetrics)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PluginMetrics) Interface() protoreflect.ProtoMessage {
	return (*PluginMetrics)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PluginMetrics) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PluginId != "" {
		value := protoreflect.ValueOfString(x.PluginId)
		if !f(fd_PluginMetrics_plugin_id, value) {
			return
		}
	}
	if x.TasksCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TasksCount)
		if !f(fd_PluginMetrics_tasks_count, value) {
			return
		}
	}
	if x.ResultsCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ResultsCount)
		if !f(fd_PluginMetrics_results_count, value) {
			return
		}
	}
	if x.TotalResultTimeMsec != "" {
		value := protoreflect.ValueOfString(x.TotalResultTimeMsec)
		if !f(fd_PluginMetrics_total_result_time_msec, value) {
			return
		}
	}
	if x.TotalInputSizeBytes != "" {
		value := protoreflect.ValueOfString(x.TotalInputSizeBytes)
		if !f(fd_PluginMetrics_total_input_size_bytes, value) {
			return
		}
	}
	if x.TotalOutputSizeBytes != "" {
		value := protoreflect.ValueOfString(x.TotalOutputSizeBytes)
		if !f(fd_PluginMetrics_total_output_size_bytes, value) {
			return
		}
	}
	if len(x.TotalFees) != 0 {
		value := protoreflect.ValueOfList(&_PluginMetrics_7_list{list: &x.TotalFees})
		if !f(fd_PluginMetrics_total_fees, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PluginMetrics) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "warden.async.v1beta1.PluginMetrics.plugin_id":
		return x.PluginId != ""
	case "warden.async.v1beta1.PluginMetrics.tasks_count":
		return x.TasksCount != uint64(0)
	case "warden.async.v1beta1.PluginMetrics.results_count":
		return x.ResultsCount != uint64(0)
	case "warden.async.v1beta1.PluginMetrics.total_result_time_msec":
		return x.TotalResultTimeMsec != ""
	case "warden.async.v1beta1.PluginMetrics.total_input_size_bytes":
		return x.TotalInputSizeBytes != ""
	case "warden.async.v1beta1.PluginMetrics.total_output_size_bytes":
		return x.TotalOutputSizeBytes != ""
	case "warden.async.v1beta1.PluginMetrics.total_fees":
		return len(x.TotalFees) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.async.v1beta1.PluginMetrics"))
		}
		panic(fmt.Errorf("message warden.async.v1beta1.PluginMetrics does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PluginMetrics) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "warden.async.v1beta1.PluginMetrics.plugin_id":
		x.PluginId = ""
	case "warden.async.v1beta1.PluginMetrics.tasks_count":
		x.TasksCount = uint64(0)
	case "warden.async.v1beta1.PluginMetrics.results_count":
		x.ResultsCount = uint64(0)
	case "warden.async.v1beta1.PluginMetrics.total_result_time_msec":
		x.TotalResultTimeMsec = ""
	case "warden.async.v1beta1.PluginMetrics.total_input_size_bytes":
		x.TotalInputSizeBytes = ""
	case "warden.async.v1beta1.PluginMetrics.total_output_size_bytes":
		x.TotalOutputSizeBytes = ""
	case "warden.async.v1beta1.PluginMetrics.total_fees":
		x.TotalFees = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.async.v1beta1.PluginMetrics"))
		}
		panic(fmt.Errorf("message warden.async.v1beta1.PluginMetrics does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PluginMetrics) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "warden.async.v1beta1.PluginMetrics.plugin_id":
		value := x.PluginId
		return protoreflect.ValueOfString(value)
	case "warden.async.v1beta1.PluginMetrics.tasks_count":
		value := x.TasksCount
		return protoreflect.ValueOfUint64(value)
	case "warden.async.v1beta1.PluginMetrics.results_count":
		value := x.ResultsCount
		return protoreflect.ValueOfUint64(value)
	case "warden.async.v1beta1.PluginMetrics.total_result_time_msec":
		value := x.TotalResultTimeMsec
		return protoreflect.ValueOfString(value)
	case "warden.async.v1beta1.PluginMetrics.total_input_size_bytes":
		value := x.TotalInputSizeBytes
		return protoreflect.ValueOfString(value)
	case "warden.async.v1beta1.PluginMetrics.total_output_size_bytes":
		value := x.TotalOutputSizeBytes
		return protoreflect.ValueOfString(value)
	case "warden.async.v1beta1.PluginMetrics.total_fees":
		if len(x.TotalFees) == 0 {
			return protoreflect.ValueOfList(&_PluginMetrics_7_list{})
		}
		listValue := &_PluginMetrics_7_list{list: &x.TotalFees}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.async.v1beta1.PluginMetrics"))
		}
		panic(fmt.Errorf("message warden.async.v1beta1.PluginMetrics does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PluginMetrics) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "warden.async.v1beta1.PluginMetrics.plugin_id":
		x.PluginId = value.Interface().(string)
	case "warden.async.v1beta1.PluginMetrics.tasks_count":
		x.TasksCount = value.Uint()
	case "warden.async.v1beta1.PluginMetrics.results_count":
		x.ResultsCount = value.Uint()
	case "warden.async.v1beta1.PluginMetrics.total_result_time_msec":
		x.TotalResultTimeMsec = value.Interface().(string)
	case "warden.async.v1beta1.PluginMetrics.total_input_size_bytes":
		x.TotalInputSizeBytes = value.Interface().(string)
	case "warden.async.v1beta1.PluginMetrics.total_output_size_bytes":
		x.TotalOutputSizeBytes = value.Interface().(string)
	case "warden.async.v1beta1.PluginMetrics.total_fees":
		lv := value.List()
		clv := lv.(*_PluginMetrics_7_list)
		x.TotalFees = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.async.v1beta1.PluginMetrics"))
		}
		panic(fmt.Errorf("message warden.async.v1beta1.PluginMetrics does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PluginMetrics) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "warden.async.v1beta1.PluginMetrics.total_fees":
		if x.TotalFees == nil {
			x.TotalFees = []*v1beta1.Coin{}
		}
		value := &_PluginMetrics_7_list{list: &x.TotalFees}
		return protoreflect.ValueOfList(value)
	case "warden.async.v1beta1.PluginMetrics.plugin_id":
		panic(fmt.Errorf("field plugin_id of message warden.async.v1beta1.PluginMetrics is not mutable"))
	case "warden.async.v1beta1.PluginMetrics.tasks_count":
		panic(fmt.Errorf("field tasks_count of message warden.async.v1beta1.PluginMetrics is not mutable"))
	case "warden.async.v1beta1.PluginMetrics.results_count":
		panic(fmt.Errorf("field results_count of message warden.async.v1beta1.PluginMetrics is not mutable"))
	case "warden.async.v1beta1.PluginMetrics.total_result_time_msec":
		panic(fmt.Errorf("field total_result_time_msec of message warden.async.v1beta1.PluginMetrics is not mutable"))
	case "warden.async.v1beta1.PluginMetrics.total_input_size_bytes":
		panic(fmt.Errorf("field total_input_size_bytes of message warden.async.v1beta1.PluginMetrics is not mutable"))
	case "warden.async.v1beta1.PluginMetrics.total_output_size_bytes":
		panic(fmt.Errorf("field total_output_size_bytes of message warden.async.v1beta1.PluginMetrics is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.async.v1beta1.PluginMetrics"))
		}
		panic(fmt.Errorf("message warden.async.v1beta1.PluginMetrics does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PluginMetrics) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "warden.async.v1beta1.PluginMetrics.plugin_id":
		return protoreflect.ValueOfString("")
	case "warden.async.v1beta1.PluginMetrics.tasks_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.async.v1beta1.PluginMetrics.results_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.async.v1beta1.PluginMetrics.total_result_time_msec":
		return protoreflect.ValueOfString("")
	case "warden.async.v1beta1.PluginMetrics.total_input_size_bytes":
		return protoreflect.ValueOfString("")
	case "warden.async.v1beta1.PluginMetrics.total_output_size_bytes":
		return protoreflect.ValueOfString("")
	case "warden.async.v1beta1.PluginMetrics.total_fees":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_PluginMetrics_7_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.async.v1beta1.PluginMetrics"))
		}
		panic(fmt.Errorf("message warden.async.v1beta1.PluginMetrics does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PluginMetrics) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in warden.async.v1beta1.PluginMetrics", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PluginMetrics) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PluginMetrics) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PluginMetrics) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PluginMetrics) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PluginMetrics)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PluginId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TasksCount != 0 {
			n += 1 + runtime.Sov(uint64(x.TasksCount))
		}
		if x.ResultsCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ResultsCount))
		}
		l = len(x.TotalResultTimeMsec)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalInputSizeBytes)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalOutputSizeBytes)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.TotalFees) > 0 {
			for _, e := range x.TotalFees {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PluginMetrics)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TotalFees) > 0 {
			for iNdEx := len(x.TotalFees) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TotalFees[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.TotalOutputSizeBytes) > 0 {
			i -= len(x.TotalOutputSizeBytes)
			copy(dAtA[i:], x.TotalOutputSizeBytes)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalOutputSizeBytes)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.TotalInputSizeBytes) > 0 {
			i -= len(x.TotalInputSizeBytes)
			copy(dAtA[i:], x.TotalInputSizeBytes)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalInputSizeBytes)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.TotalResultTimeMsec) > 0 {
			i -= len(x.TotalResultTimeMsec)
			copy(dAtA[i:], x.TotalResultTimeMsec)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalResultTimeMsec)))
			i--
			dAtA[i] = 0x22
		}
		if x.ResultsCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ResultsCount))
			i--
			dAtA[i] = 0x18
		}
		if x.TasksCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TasksCount))
			i--
			dAtA[i] = 0x10
		}
		if len(x.PluginId) > 0 {
			i -= len(x.PluginId)
			copy(dAtA[i:], x.PluginId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PluginId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PluginMetrics)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PluginMetrics: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PluginMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PluginId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PluginId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TasksCount", wireType)
				}
				x.TasksCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TasksCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ResultsCount", wireType)
				}
				x.ResultsCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ResultsCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalResultTimeMsec", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalResultTimeMsec = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalInputSizeBytes", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalInputSizeBytes = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalOutputSizeBytes", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalOutputSizeBytes = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalFees", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalFees = append(x.TotalFees, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalFees[len(x.TotalFees)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Copyright (c) 2025 Warden Labs. All Rights Reserved.
//
// ** RESTRICTED LICENSE **
//
// This file is part of the 'async' module. It is NOT licensed
// under the Apache 2.0 license governing the rest of the project.
// Refer to the LICENSE file in this module's directory for full terms.
// Use, modification, and distribution are strictly limited.
// Do NOT use this file unless you agree to the terms stated in that license.
//
// SPDX-FileCopyrightText: 2025 Warden Labs
// SPDX-License-Identifier: LicenseRef-Proprietary-RestrictedModule

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: warden/async/v1beta1/metrics.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PluginMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the plugin.
	PluginId             string `protobuf:"bytes,1,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	TasksCount           uint64 `protobuf:"varint,2,opt,name=tasks_count,json=tasksCount,proto3" json:"tasks_count,omitempty"`
	ResultsCount         uint64 `protobuf:"varint,3,opt,name=results_count,json=resultsCount,proto3" json:"results_count,omitempty"`
	TotalResultTimeMsec  string `protobuf:"bytes,4,opt,name=total_result_time_msec,json=totalResultTimeMsec,proto3" json:"total_result_time_msec,omitempty"`
	TotalInputSizeBytes  string `protobuf:"bytes,5,opt,name=total_input_size_bytes,json=totalInputSizeBytes,proto3" json:"total_input_size_bytes,omitempty"`
	TotalOutputSizeBytes string `protobuf:"bytes,6,opt,name=total_output_size_bytes,json=totalOutputSizeBytes,proto3" json:"total_output_size_bytes,omitempty"`
	// Total fees paid by users for using the plugin.
	TotalFees []*v1beta1.Coin `protobuf:"bytes,7,rep,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
}

func (x *PluginMetrics) Reset() {
	*x = PluginMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warden_async_v1beta1_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginMetrics) ProtoMessage() {}

// Deprecated: Use PluginMetrics.ProtoReflect.Descriptor instead.
func (*PluginMetrics) Descriptor() ([]byte, []int) {
	return file_warden_async_v1beta1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *PluginMetrics) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

func (x *PluginMetrics) GetTasksCount() uint64 {
	if x != nil {
		return x.TasksCount
	}
	return 0
}

func (x *PluginMetrics) GetResultsCount() uint64 {
	if x != nil {
		return x.ResultsCount
	}
	return 0
}

func (x *PluginMetrics) GetTotalResultTimeMsec() string {
	if x != nil {
		return x.TotalResultTimeMsec
	}
	return ""
}

func (x *PluginMetrics) GetTotalInputSizeBytes() string {
	if x != nil {
		return x.TotalInputSizeBytes
	}
	return ""
}

func (x *PluginMetrics) GetTotalOutputSizeBytes() string {
	if x != nil {
		return x.TotalOutputSizeBytes
	}
	return ""
}

func (x *PluginMetrics) GetTotalFees() []*v1beta1.Coin {
	if x != nil {
		return x.TotalFees
	}
	return nil
}

var File_warden_async_v1beta1_metrics_proto protoreflect.FileDescriptor

var file_warden_async_v1beta1_metrics_proto_rawDesc = []byte{
	0x0a, 0x22, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e,
	0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d,
	0x04, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x65, 0x63, 0x12, 0x60, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8, 0xde, 0x1f,
	0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a, 0xe7, 0xb0,
	0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x42, 0xeb,
	0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x2f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x57,
	0x41, 0x58, 0xaa, 0x02, 0x14, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x14, 0x57, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x5c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xe2, 0x02, 0x20, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x3a, 0x3a, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_warden_async_v1beta1_metrics_proto_rawDescOnce sync.Once
	file_warden_async_v1beta1_metrics_proto_rawDescData = file_warden_async_v1beta1_metrics_proto_rawDesc
)

func file_warden_async_v1beta1_metrics_proto_rawDescGZIP() []byte {
	file_warden_async_v1beta1_metrics_proto_rawDescOnce.Do(func() {
		file_warden_async_v1beta1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_warden_async_v1beta1_metrics_proto_rawDescData)
	})
	return file_warden_async_v1beta1_metrics_proto_rawDescData
}

var file_warden_async_v1beta1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_warden_async_v1beta1_metrics_proto_goTypes = []interface{}{
	(*PluginMetrics)(nil), // 0: warden.async.v1beta1.PluginMetrics
	(*v1beta1.Coin)(nil),  // 1: cosmos.base.v1beta1.Coin
}
var file_warden_async_v1beta1_metrics_proto_depIdxs = []int32{
	1, // 0: warden.async.v1beta1.PluginMetrics.total_fees:type_name -> cosmos.base.v1beta1.Coin
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_warden_async_v1beta1_metrics_proto_init() }
func file_warden_async_v1beta1_metrics_proto_init() {
	if File_warden_async_v1beta1_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_warden_async_v1beta1_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_warden_async_v1beta1_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_warden_async_v1beta1_metrics_proto_goTypes,
		DependencyIndexes: file_warden_async_v1beta1_metrics_proto_depIdxs,
		MessageInfos:      file_warden_async_v1beta1_metrics_proto_msgTypes,
	}.Build()
	File_warden_async_v1beta1_metrics_proto = out.File
	file_warden_async_v1beta1_metrics_proto_rawDesc = nil
	file_warden_async_v1beta1_metrics_proto_goTypes = nil
	file_warden_async_v1beta1_metrics_proto_depIdxs = nil
}
