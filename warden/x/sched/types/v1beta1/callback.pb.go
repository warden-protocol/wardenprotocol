// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: warden/sched/v1beta1/callback.proto

package v1beta1

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CallbackResultFlag int32

const (
	// Unspecified callback result.
	CallbackResultFlag_CALLBACK_RESULT_UNSPECIFIED CallbackResultFlag = 0
	// Indicates that the callback execution was successful.
	CallbackResultFlag_CALLBACK_RESULT_SUCCEED CallbackResultFlag = 1
	// Indicates that the callback execution failed.
	CallbackResultFlag_CALLBACK_RESULT_FAILED CallbackResultFlag = 2
)

var CallbackResultFlag_name = map[int32]string{
	0: "CALLBACK_RESULT_UNSPECIFIED",
	1: "CALLBACK_RESULT_SUCCEED",
	2: "CALLBACK_RESULT_FAILED",
}

var CallbackResultFlag_value = map[string]int32{
	"CALLBACK_RESULT_UNSPECIFIED": 0,
	"CALLBACK_RESULT_SUCCEED":     1,
	"CALLBACK_RESULT_FAILED":      2,
}

func (x CallbackResultFlag) String() string {
	return proto.EnumName(CallbackResultFlag_name, int32(x))
}

func (CallbackResultFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe57e65106114805, []int{0}
}

// Task defines a task that will be executed asynchronously.
// Validators will be able to submit the proposed result of the Task
// execution.
// Other validators will then be able to vote on the validity of the proposed
// result.
type Callback struct {
	// Unique ID of the Callback.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Callback address.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The limit of gas for callback execution.
	GasLimit string `protobuf:"bytes,3,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	// The token that will be used to pay for callback execution.
	FeeToken types.Coin `protobuf:"bytes,4,opt,name=feeToken,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"feeToken"`
}

func (m *Callback) Reset()         { *m = Callback{} }
func (m *Callback) String() string { return proto.CompactTextString(m) }
func (*Callback) ProtoMessage()    {}
func (*Callback) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe57e65106114805, []int{0}
}
func (m *Callback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Callback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Callback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Callback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Callback.Merge(m, src)
}
func (m *Callback) XXX_Size() int {
	return m.Size()
}
func (m *Callback) XXX_DiscardUnknown() {
	xxx_messageInfo_Callback.DiscardUnknown(m)
}

var xxx_messageInfo_Callback proto.InternalMessageInfo

func (m *Callback) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Callback) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Callback) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *Callback) GetFeeToken() types.Coin {
	if m != nil {
		return m.FeeToken
	}
	return types.Coin{}
}

type CallbackResult struct {
	// The result flag.
	Flag CallbackResultFlag `protobuf:"varint,1,opt,name=flag,proto3,enum=warden.sched.v1beta1.CallbackResultFlag" json:"flag,omitempty"`
}

func (m *CallbackResult) Reset()         { *m = CallbackResult{} }
func (m *CallbackResult) String() string { return proto.CompactTextString(m) }
func (*CallbackResult) ProtoMessage()    {}
func (*CallbackResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe57e65106114805, []int{1}
}
func (m *CallbackResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallbackResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallbackResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallbackResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallbackResult.Merge(m, src)
}
func (m *CallbackResult) XXX_Size() int {
	return m.Size()
}
func (m *CallbackResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CallbackResult.DiscardUnknown(m)
}

var xxx_messageInfo_CallbackResult proto.InternalMessageInfo

func (m *CallbackResult) GetFlag() CallbackResultFlag {
	if m != nil {
		return m.Flag
	}
	return CallbackResultFlag_CALLBACK_RESULT_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("warden.sched.v1beta1.CallbackResultFlag", CallbackResultFlag_name, CallbackResultFlag_value)
	proto.RegisterType((*Callback)(nil), "warden.sched.v1beta1.Callback")
	proto.RegisterType((*CallbackResult)(nil), "warden.sched.v1beta1.CallbackResult")
}

func init() {
	proto.RegisterFile("warden/sched/v1beta1/callback.proto", fileDescriptor_fe57e65106114805)
}

var fileDescriptor_fe57e65106114805 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0xce, 0xd2, 0x40,
	0x14, 0xed, 0x54, 0xa2, 0x38, 0x26, 0x84, 0x4c, 0x88, 0xd6, 0x92, 0x14, 0x82, 0x9b, 0xc6, 0x84,
	0x19, 0xc1, 0xad, 0x1b, 0x28, 0x6d, 0x42, 0x6c, 0x88, 0x29, 0xb0, 0x71, 0x83, 0xd3, 0x76, 0x28,
	0x0d, 0xa5, 0x43, 0x98, 0xe2, 0xcf, 0x5b, 0xf8, 0x1c, 0xbe, 0x81, 0x6f, 0xc0, 0x92, 0xa5, 0x2b,
	0x35, 0xf0, 0x22, 0x86, 0x69, 0x8b, 0xca, 0xf7, 0xad, 0x7a, 0x4f, 0xef, 0x39, 0x37, 0xe7, 0x9e,
	0x3b, 0xf0, 0xc5, 0x27, 0xba, 0x0b, 0x59, 0x4a, 0x44, 0xb0, 0x62, 0x21, 0xf9, 0xd8, 0xf3, 0x59,
	0x46, 0x7b, 0x24, 0xa0, 0x49, 0xe2, 0xd3, 0x60, 0x8d, 0xb7, 0x3b, 0x9e, 0x71, 0xd4, 0xc8, 0x49,
	0x58, 0x92, 0x70, 0x41, 0xd2, 0x8d, 0x80, 0x8b, 0x0d, 0x17, 0xc4, 0xa7, 0x82, 0xfd, 0x55, 0xf2,
	0x38, 0xcd, 0x55, 0x7a, 0x23, 0xe2, 0x11, 0x97, 0x25, 0xb9, 0x54, 0xf9, 0xdf, 0xce, 0x77, 0x00,
	0xab, 0x56, 0x31, 0x1e, 0xd5, 0xa0, 0x1a, 0x87, 0x1a, 0x68, 0x03, 0xb3, 0xe2, 0xa9, 0x71, 0x88,
	0x34, 0xf8, 0x88, 0x86, 0xe1, 0x8e, 0x09, 0xa1, 0xa9, 0x6d, 0x60, 0x3e, 0xf6, 0x4a, 0x88, 0x74,
	0x58, 0x8d, 0xa8, 0x70, 0xe3, 0x4d, 0x9c, 0x69, 0x0f, 0x64, 0xeb, 0x8a, 0x51, 0x04, 0xab, 0x4b,
	0xc6, 0x66, 0x7c, 0xcd, 0x52, 0xad, 0xd2, 0x06, 0xe6, 0x93, 0xfe, 0x73, 0x9c, 0x7b, 0xc3, 0x17,
	0x6f, 0xa5, 0x61, 0x6c, 0xf1, 0x38, 0x1d, 0xbe, 0x3a, 0xfc, 0x6c, 0x29, 0xdf, 0x7e, 0xb5, 0xcc,
	0x28, 0xce, 0x56, 0x7b, 0x1f, 0x07, 0x7c, 0x43, 0x8a, 0x45, 0xf2, 0x4f, 0x57, 0x84, 0x6b, 0x92,
	0x7d, 0xd9, 0x32, 0x21, 0x05, 0xc2, 0xbb, 0x0e, 0xef, 0x4c, 0x60, 0xad, 0xb4, 0xee, 0x31, 0xb1,
	0x4f, 0x32, 0xf4, 0x06, 0x56, 0x96, 0x09, 0x8d, 0xe4, 0x0a, 0xb5, 0xbe, 0x89, 0xef, 0x0b, 0x0a,
	0xff, 0xaf, 0x71, 0x12, 0x1a, 0x79, 0x52, 0xf5, 0x32, 0x85, 0xe8, 0x6e, 0x0f, 0xb5, 0x60, 0xd3,
	0x1a, 0xb8, 0xee, 0x70, 0x60, 0xbd, 0x5d, 0x78, 0xf6, 0x74, 0xee, 0xce, 0x16, 0xf3, 0xc9, 0xf4,
	0x9d, 0x6d, 0x8d, 0x9d, 0xb1, 0x3d, 0xaa, 0x2b, 0xa8, 0x09, 0x9f, 0xdd, 0x12, 0xa6, 0x73, 0xcb,
	0xb2, 0xed, 0x51, 0x1d, 0x20, 0x1d, 0x3e, 0xbd, 0x6d, 0x3a, 0x83, 0xb1, 0x6b, 0x8f, 0xea, 0xea,
	0xf0, 0xc3, 0xe1, 0x64, 0x80, 0xe3, 0xc9, 0x00, 0xbf, 0x4f, 0x06, 0xf8, 0x7a, 0x36, 0x94, 0xe3,
	0xd9, 0x50, 0x7e, 0x9c, 0x0d, 0xe5, 0xbd, 0xf3, 0x4f, 0x1a, 0xf9, 0x0e, 0x5d, 0x79, 0xae, 0x80,
	0x27, 0x05, 0xbe, 0x81, 0xe4, 0x73, 0xf1, 0x64, 0x64, 0x52, 0xe5, 0xf9, 0xfd, 0x87, 0x92, 0xf6,
	0xfa, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x5d, 0x2c, 0x5c, 0x57, 0x02, 0x00, 0x00,
}

func (m *Callback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Callback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Callback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCallback(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintCallback(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCallback(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCallback(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallbackResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallbackResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallbackResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		i = encodeVarintCallback(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCallback(dAtA []byte, offset int, v uint64) int {
	offset -= sovCallback(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Callback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCallback(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCallback(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovCallback(uint64(l))
	}
	l = m.FeeToken.Size()
	n += 1 + l + sovCallback(uint64(l))
	return n
}

func (m *CallbackResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovCallback(uint64(m.Flag))
	}
	return n
}

func sovCallback(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCallback(x uint64) (n int) {
	return sovCallback(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Callback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Callback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Callback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCallback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallbackResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallbackResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallbackResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= CallbackResultFlag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCallback(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCallback
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCallback
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCallback
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCallback
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCallback        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCallback          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCallback = fmt.Errorf("proto: unexpected end of group")
)
