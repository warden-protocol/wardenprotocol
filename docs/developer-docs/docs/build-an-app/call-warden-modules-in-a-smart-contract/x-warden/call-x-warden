---
sidebar_position: 1
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Call x/warden

## Overview

We will create a Solidity contract to interact with the IWarden precompile. This contract will implement the following functionalities:

- Create a space
- Query a space by ID
- Update a space

## Prerequisites

- Ensure you have a working environment with Foundry
- Set up your private key and RPC URL for your preferred testnet or local node.

## Create Project

1. Initialize a Project using Foundry:

```bash
forge init warden-space --no-commit
cd warden-space
```

2. Install Dependencies Add any required Solidity libraries or dependencies.

3. Create the Contract Create a file named `WardenSpace.sol` in the `src` directory and add the following code:

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

interface IWarden {
    struct Space {
        uint64 id;
        address creator;
        address[] owners;
        uint64 nonce;
        uint64 approveAdminTemplateId;
        uint64 rejectAdminTemplateId;
        uint64 approveSignTemplateId;
        uint64 rejectSignTemplateId;
    }

    function newSpace(
        uint64 approveAdminTemplateId,
        uint64 rejectAdminTemplateId,
        uint64 approveSignTemplateId,
        uint64 rejectSignTemplateId,
        address[] calldata additionalOwners
    ) external returns (uint64);

    function spaceById(uint64 id) external view returns (Space memory);

    function spacesByOwner(address owner) external view returns (Space[] memory);

    function updateSpace(
        uint64 spaceId,
        uint64 nonce,
        uint64 approveAdminTemplateId,
        uint64 rejectAdminTemplateId,
        uint64 approveSignTemplateId,
        uint64 rejectSignTemplateId
    ) external returns (uint64);

    function addSpaceOwner(
        uint64 spaceId,
        address newOwner,
        uint64 nonce
    ) external;

    function removeSpaceOwner(
        uint64 spaceId,
        address owner,
        uint64 nonce
    ) external;
}

contract WardenSpace {
    address constant IWardenAddress = 0x0000000000000000000000000000000000000900;

    function createSpace(
        uint64 approveAdminTemplateId,
        uint64 rejectAdminTemplateId,
        uint64 approveSignTemplateId,
        uint64 rejectSignTemplateId,
        address[] calldata additionalOwners
    ) external returns (uint64) {
        return IWarden(IWardenAddress).newSpace(
            approveAdminTemplateId,
            rejectAdminTemplateId,
            approveSignTemplateId,
            rejectSignTemplateId,
            additionalOwners
        );
    }

    function getSpaceById(uint64 id) external view returns (IWarden.Space memory) {
        return IWarden(IWardenAddress).spaceById(id);
    }

    function getSpacesByOwner(address owner) external view returns (IWarden.Space[] memory) {
        return IWarden(IWardenAddress).spacesByOwner(owner);
    }

    function updateExistingSpace(
        uint64 spaceId,
        uint64 nonce,
        uint64 approveAdminTemplateId,
        uint64 rejectAdminTemplateId,
        uint64 approveSignTemplateId,
        uint64 rejectSignTemplateId
    ) external returns (uint64) {
        return IWarden(IWardenAddress).updateSpace(
            spaceId,
            nonce,
            approveAdminTemplateId,
            rejectAdminTemplateId,
            approveSignTemplateId,
            rejectSignTemplateId
        );
    }

    function addOwnerToSpace(uint64 spaceId, address newOwner, uint64 nonce) external {
        IWarden(IWardenAddress).addSpaceOwner(spaceId, newOwner, nonce);
    }

    function removeOwnerFromSpace(uint64 spaceId, address owner, uint64 nonce) external {
        IWarden(IWardenAddress).removeSpaceOwner(spaceId, owner, nonce);
    }
}
```

Explanation of the Code

Interface: The IWarden interface defines methods for interacting with the precompile.

Contract: The WardenSpace contract implements wrapper methods that call the corresponding IWarden functions.

## Deploy the contract

1. Set Up Environment Variables Export your private key and RPC URL as environment variables:

```bash
export PRIVATE_KEY=<your-private-key>
export RPC_URL=http://localhost:8545  # Example: Replace with your RPC URL
```

Note: Use secure key storage solutions like `.env` for storing private keys in production.

2. Compile the Contract Using Foundry, compile the contract:

```bash
forge build
```

If everything is ok, it should compile successfully.

```bash
[⠊] Compiling...
[⠒] Compiling 28 files with Solc 0.8.28
[⠆] Solc 0.8.28 finished in 1.12s
Compiler run successful!
```

3. Deploy the Contract

Deploy the contract using Foundry's forge create command.

```bash
forge create --rpc-url $RPC_URL --private-key $PRIVATE_KEY src/WardenSpace.sol:WardenSpace
```

Once deployed, you will see the following output:

```bash
Deployer: 0x6Ea8aC1673402989e7B653aE4e83b54173719C30
Deployed to: 0xF7b573e5B822136778053BA9Ff7bF2b87748a202
Transaction hash: 0xe9820d9a9e38fd557553cfcfb0f0646d19ecb5440160e0c1ddaa4c8b3ea0292f
```

4. Verify the Deployment To verify the contract is deployed, run the following:

```bash
cast code 0xContractAddress --rpc-url $RPC_URL
```

You will see the output as byte code:

```bash
0x608060405234801561000f575f5ffd5b5060043610610060575f3560e01c80631228b8411461006457806334b04db014610094578063ac08ba88146100a9578063c079bef1146100c9578063eacb8ea0146100dc578063edace690146100ef575b5f5ffd5b6100776100723660046103cb565b61010f565b6040516001600160401b0390911681526020015b60405180910390f35b6100a76100a2366004610497565b61018b565b005b6100bc6100b73660046104df565b6101fe565b60405161008b919061060f565b6100776100d7366004610621565b6102aa565b6100a76100ea366004610497565b610302565b6101026100fd36600461069f565b610347565b60405161008b91906106ba565b60405163c78f766760e01b81525f906109009063c78f766790610140908a908a908a908a908a908a9060040161071d565b6020604051808303815f875af115801561015c573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061018091906107a5565b979650505050505050565b6040516368bad06160e01b81526001600160401b0380851660048301526001600160a01b038416602483015282166044820152610900906368bad061906064015b5f604051808303815f87803b1580156101e3575f5ffd5b505af11580156101f5573d5f5f3e3d5ffd5b50505050505050565b60408051610100810182525f80825260208201819052606082840181905282018190526080820181905260a0820181905260c0820181905260e0820152905163e4c1fc7960e01b81526001600160401b03831660048201526109009063e4c1fc79906024015f60405180830381865afa15801561027d573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102a49190810190610989565b92915050565b604051639abfa27160e01b81526001600160401b0380881660048301528087166024830152808616604483015280851660648301528084166084830152821660a48201525f9061090090639abfa2719060c401610140565b60405163dde24ba960e01b81526001600160401b0380851660048301526001600160a01b0384166024830152821660448201526109009063dde24ba9906064016101cc565b60405163314ea9f760e21b81526001600160a01b03821660048201526060906109009063c53aa7dc906024015f60405180830381865afa15801561038d573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102a491908101906109c2565b6001600160401b03811681146103c8575f5ffd5b50565b5f5f5f5f5f5f60a087890312156103e0575f5ffd5b86356103eb816103b4565b955060208701356103fb816103b4565b9450604087013561040b816103b4565b9350606087013561041b816103b4565b925060808701356001600160401b03811115610435575f5ffd5b8701601f81018913610445575f5ffd5b80356001600160401b0381111561045a575f5ffd5b8960208260051b840101111561046e575f5ffd5b60208201935080925050509295509295509295565b6001600160a01b03811681146103c8575f5ffd5b5f5f5f606084860312156104a9575f5ffd5b83356104b4816103b4565b925060208401356104c481610483565b915060408401356104d4816103b4565b809150509250925092565b5f602082840312156104ef575f5ffd5b81356104fa816103b4565b9392505050565b5f8151808452602084019350602083015f5b8281101561053a5781516001600160a01b0316865260209586019590910190600101610513565b5093949350505050565b6001600160401b03815116825260018060a01b0360208201511660208301525f6040820151610100604085015261057f610100850182610501565b9050606083015161059b60608601826001600160401b03169052565b5060808301516105b660808601826001600160401b03169052565b5060a08301516105d160a08601826001600160401b03169052565b5060c08301516105ec60c08601826001600160401b03169052565b5060e083015161060760e08601826001600160401b03169052565b509392505050565b602081525f6104fa6020830184610544565b5f5f5f5f5f5f60c08789031215610636575f5ffd5b8635610641816103b4565b95506020870135610651816103b4565b94506040870135610661816103b4565b93506060870135610671816103b4565b92506080870135610681816103b4565b915060a0870135610691816103b4565b809150509295509295509295565b5f602082840312156106af575f5ffd5b81356104fa81610483565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561071157603f198786030184526106fc858351610544565b945060209384019391909101906001016106e0565b50929695505050505050565b6001600160401b038781168252868116602083015285811660408301528416606082015260a06080820181905281018290525f8360c08301825b8581101561078757823561076a81610483565b6001600160a01b0316825260209283019290910190600101610757565b509998505050505050505050565b80516107a0816103b4565b919050565b5f602082840312156107b5575f5ffd5b81516104fa816103b4565b634e487b7160e01b5f52604160045260245ffd5b60405161010081016001600160401b03811182821017156107f7576107f76107c0565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610825576108256107c0565b604052919050565b80516107a081610483565b5f6001600160401b03821115610850576108506107c0565b5060051b60200190565b5f82601f830112610869575f5ffd5b815161087c61087782610838565b6107fd565b8082825260208201915060208360051b86010192508583111561089d575f5ffd5b602085015b838110156108c35780516108b581610483565b8352602092830192016108a2565b5095945050505050565b5f61010082840312156108de575f5ffd5b6108e66107d4565b90506108f182610795565b81526108ff6020830161082d565b602082015260408201516001600160401b0381111561091c575f5ffd5b6109288482850161085a565b60408301525061093a60608301610795565b606082015261094b60808301610795565b608082015261095c60a08301610795565b60a082015261096d60c08301610795565b60c082015261097e60e08301610795565b60e082015292915050565b5f60208284031215610999575f5ffd5b81516001600160401b038111156109ae575f5ffd5b6109ba848285016108cd565b949350505050565b5f602082840312156109d2575f5ffd5b81516001600160401b038111156109e7575f5ffd5b8201601f810184136109f7575f5ffd5b8051610a0561087782610838565b8082825260208201915060208360051b850101925086831115610a26575f5ffd5b602084015b83811015610a665780516001600160401b03811115610a48575f5ffd5b610a57896020838901016108cd565b84525060209283019201610a2b565b50969550505050505056fea26469706673582212205a8fbf4bb39b35ddfdc128c22160c7df11f3fc70ae1c9de86a83822e61ef864f64736f6c634300081c0033
```

5. Save Contract Address Save the contract address in an environment variable for future use:

```bash
export CONTRACT_ADDRESS=0xContractAddress
```

6. Prepare for Interaction Ensure you have a functional cast tool (Foundry) or equivalent to interact with the deployed contract.

## Work with Spaces

Now that the contract is deployed, we’ll proceed to interact with the IWarden functions one by one to demonstrate their usage. This step focuses on creating and querying Spaces.

### Create a Space

Use the createSpace function to create a new Space.

```bash
cast send $CONTRACT_ADDRESS "createSpace(uint64,uint64,uint64,uint64,address[])" 1 2 3 4 \[\] --rpc-url $RPC_URL --private-key $PRIVATE_KEY
```

- Replace 1, 2, 3, and 4 with the IDs for admin and sign templates.
- The last parameter ([]) represents additional owners. Leave it empty for now.

Once space is created you will see the following output:

```bash
blockHash               0x3c64537bd0be1aea910ac80c1109ea506928948a06ff503f2d21070175385ce1
blockNumber             11251
contractAddress         
cumulativeGasUsed       46294
effectiveGasPrice       8
from                    0x6Ea8aC1673402989e7B653aE4e83b54173719C30
gasUsed                 46294
logs                    [{"address":"0x0000000000000000000000000000000000000900","topics":["0x1d673e16d9a82fd9a44a946aea320be2cdc951dc51ecb22fbde2396d9c49b4a7","0x000000000000000000000000000000000000000000000000000000000000000b"],"data":"0x0000000000000000000000006ea8ac1673402989e7b653ae4e83b54173719c3000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004","blockHash":"0x3c64537bd0be1aea910ac80c1109ea506928948a06ff503f2d21070175385ce1","blockNumber":"0x2bf3","transactionHash":"0x91148b47baf8729aed7561a4c90ee8d34a0ef571ee2e80ffa94ae76118c4023c","transactionIndex":"0x0","logIndex":"0x0","removed":false}]
logsBloom               0x
root                    
status                  1 (success)
transactionHash         0x91148b47baf8729aed7561a4c90ee8d34a0ef571ee2e80ffa94ae76118c4023c
transactionIndex        0
type                    2
blobGasPrice            
blobGasUsed             
authorizationList       
to                      0xF7b573e5B822136778053BA9Ff7bF2b87748a202
```

### Query Space by ID

Retrieve details of the Space created in the previous step.

```bash
cast call $CONTRACT_ADDRESS "getSpaceById(uint64)" 1 --rpc-url $RPC_URL
```

- Replace 1 with the spaceId from the previous step.

The queried space will be displayed as follows:

```bash
0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000006ea8ac1673402989e7b653ae4e83b54173719c3000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000010000000000000000000000006ea8ac1673402989e7b653ae4e83b54173719c30
```
