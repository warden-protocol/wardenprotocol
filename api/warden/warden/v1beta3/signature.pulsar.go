// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package wardenv1beta3

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_SignRequest_9_list)(nil)

type _SignRequest_9_list struct {
	list *[]*v1beta1.Coin
}

func (x *_SignRequest_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SignRequest_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SignRequest_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_SignRequest_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SignRequest_9_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SignRequest_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SignRequest_9_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SignRequest_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SignRequest                        protoreflect.MessageDescriptor
	fd_SignRequest_id                     protoreflect.FieldDescriptor
	fd_SignRequest_creator                protoreflect.FieldDescriptor
	fd_SignRequest_key_id                 protoreflect.FieldDescriptor
	fd_SignRequest_data_for_signing       protoreflect.FieldDescriptor
	fd_SignRequest_status                 protoreflect.FieldDescriptor
	fd_SignRequest_signed_data            protoreflect.FieldDescriptor
	fd_SignRequest_reject_reason          protoreflect.FieldDescriptor
	fd_SignRequest_encryption_key         protoreflect.FieldDescriptor
	fd_SignRequest_deducted_keychain_fees protoreflect.FieldDescriptor
	fd_SignRequest_broadcast_type         protoreflect.FieldDescriptor
)

func init() {
	file_warden_warden_v1beta3_signature_proto_init()
	md_SignRequest = File_warden_warden_v1beta3_signature_proto.Messages().ByName("SignRequest")
	fd_SignRequest_id = md_SignRequest.Fields().ByName("id")
	fd_SignRequest_creator = md_SignRequest.Fields().ByName("creator")
	fd_SignRequest_key_id = md_SignRequest.Fields().ByName("key_id")
	fd_SignRequest_data_for_signing = md_SignRequest.Fields().ByName("data_for_signing")
	fd_SignRequest_status = md_SignRequest.Fields().ByName("status")
	fd_SignRequest_signed_data = md_SignRequest.Fields().ByName("signed_data")
	fd_SignRequest_reject_reason = md_SignRequest.Fields().ByName("reject_reason")
	fd_SignRequest_encryption_key = md_SignRequest.Fields().ByName("encryption_key")
	fd_SignRequest_deducted_keychain_fees = md_SignRequest.Fields().ByName("deducted_keychain_fees")
	fd_SignRequest_broadcast_type = md_SignRequest.Fields().ByName("broadcast_type")
}

var _ protoreflect.Message = (*fastReflection_SignRequest)(nil)

type fastReflection_SignRequest SignRequest

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SignRequest)(x)
}

func (x *SignRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_warden_warden_v1beta3_signature_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SignRequest_messageType fastReflection_SignRequest_messageType
var _ protoreflect.MessageType = fastReflection_SignRequest_messageType{}

type fastReflection_SignRequest_messageType struct{}

func (x fastReflection_SignRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SignRequest)(nil)
}
func (x fastReflection_SignRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_SignRequest)
}
func (x fastReflection_SignRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SignRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SignRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_SignRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SignRequest) Type() protoreflect.MessageType {
	return _fastReflection_SignRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SignRequest) New() protoreflect.Message {
	return new(fastReflection_SignRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SignRequest) Interface() protoreflect.ProtoMessage {
	return (*SignRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SignRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_SignRequest_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_SignRequest_creator, value) {
			return
		}
	}
	if x.KeyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.KeyId)
		if !f(fd_SignRequest_key_id, value) {
			return
		}
	}
	if len(x.DataForSigning) != 0 {
		value := protoreflect.ValueOfBytes(x.DataForSigning)
		if !f(fd_SignRequest_data_for_signing, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_SignRequest_status, value) {
			return
		}
	}
	if x.Result != nil {
		switch o := x.Result.(type) {
		case *SignRequest_SignedData:
			v := o.SignedData
			value := protoreflect.ValueOfBytes(v)
			if !f(fd_SignRequest_signed_data, value) {
				return
			}
		case *SignRequest_RejectReason:
			v := o.RejectReason
			value := protoreflect.ValueOfString(v)
			if !f(fd_SignRequest_reject_reason, value) {
				return
			}
		}
	}
	if len(x.EncryptionKey) != 0 {
		value := protoreflect.ValueOfBytes(x.EncryptionKey)
		if !f(fd_SignRequest_encryption_key, value) {
			return
		}
	}
	if len(x.DeductedKeychainFees) != 0 {
		value := protoreflect.ValueOfList(&_SignRequest_9_list{list: &x.DeductedKeychainFees})
		if !f(fd_SignRequest_deducted_keychain_fees, value) {
			return
		}
	}
	if x.BroadcastType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.BroadcastType))
		if !f(fd_SignRequest_broadcast_type, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SignRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "warden.warden.v1beta3.SignRequest.id":
		return x.Id != uint64(0)
	case "warden.warden.v1beta3.SignRequest.creator":
		return x.Creator != ""
	case "warden.warden.v1beta3.SignRequest.key_id":
		return x.KeyId != uint64(0)
	case "warden.warden.v1beta3.SignRequest.data_for_signing":
		return len(x.DataForSigning) != 0
	case "warden.warden.v1beta3.SignRequest.status":
		return x.Status != 0
	case "warden.warden.v1beta3.SignRequest.signed_data":
		if x.Result == nil {
			return false
		} else if _, ok := x.Result.(*SignRequest_SignedData); ok {
			return true
		} else {
			return false
		}
	case "warden.warden.v1beta3.SignRequest.reject_reason":
		if x.Result == nil {
			return false
		} else if _, ok := x.Result.(*SignRequest_RejectReason); ok {
			return true
		} else {
			return false
		}
	case "warden.warden.v1beta3.SignRequest.encryption_key":
		return len(x.EncryptionKey) != 0
	case "warden.warden.v1beta3.SignRequest.deducted_keychain_fees":
		return len(x.DeductedKeychainFees) != 0
	case "warden.warden.v1beta3.SignRequest.broadcast_type":
		return x.BroadcastType != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta3.SignRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta3.SignRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "warden.warden.v1beta3.SignRequest.id":
		x.Id = uint64(0)
	case "warden.warden.v1beta3.SignRequest.creator":
		x.Creator = ""
	case "warden.warden.v1beta3.SignRequest.key_id":
		x.KeyId = uint64(0)
	case "warden.warden.v1beta3.SignRequest.data_for_signing":
		x.DataForSigning = nil
	case "warden.warden.v1beta3.SignRequest.status":
		x.Status = 0
	case "warden.warden.v1beta3.SignRequest.signed_data":
		x.Result = nil
	case "warden.warden.v1beta3.SignRequest.reject_reason":
		x.Result = nil
	case "warden.warden.v1beta3.SignRequest.encryption_key":
		x.EncryptionKey = nil
	case "warden.warden.v1beta3.SignRequest.deducted_keychain_fees":
		x.DeductedKeychainFees = nil
	case "warden.warden.v1beta3.SignRequest.broadcast_type":
		x.BroadcastType = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta3.SignRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta3.SignRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SignRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "warden.warden.v1beta3.SignRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "warden.warden.v1beta3.SignRequest.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "warden.warden.v1beta3.SignRequest.key_id":
		value := x.KeyId
		return protoreflect.ValueOfUint64(value)
	case "warden.warden.v1beta3.SignRequest.data_for_signing":
		value := x.DataForSigning
		return protoreflect.ValueOfBytes(value)
	case "warden.warden.v1beta3.SignRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "warden.warden.v1beta3.SignRequest.signed_data":
		if x.Result == nil {
			return protoreflect.ValueOfBytes(nil)
		} else if v, ok := x.Result.(*SignRequest_SignedData); ok {
			return protoreflect.ValueOfBytes(v.SignedData)
		} else {
			return protoreflect.ValueOfBytes(nil)
		}
	case "warden.warden.v1beta3.SignRequest.reject_reason":
		if x.Result == nil {
			return protoreflect.ValueOfString("")
		} else if v, ok := x.Result.(*SignRequest_RejectReason); ok {
			return protoreflect.ValueOfString(v.RejectReason)
		} else {
			return protoreflect.ValueOfString("")
		}
	case "warden.warden.v1beta3.SignRequest.encryption_key":
		value := x.EncryptionKey
		return protoreflect.ValueOfBytes(value)
	case "warden.warden.v1beta3.SignRequest.deducted_keychain_fees":
		if len(x.DeductedKeychainFees) == 0 {
			return protoreflect.ValueOfList(&_SignRequest_9_list{})
		}
		listValue := &_SignRequest_9_list{list: &x.DeductedKeychainFees}
		return protoreflect.ValueOfList(listValue)
	case "warden.warden.v1beta3.SignRequest.broadcast_type":
		value := x.BroadcastType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta3.SignRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta3.SignRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "warden.warden.v1beta3.SignRequest.id":
		x.Id = value.Uint()
	case "warden.warden.v1beta3.SignRequest.creator":
		x.Creator = value.Interface().(string)
	case "warden.warden.v1beta3.SignRequest.key_id":
		x.KeyId = value.Uint()
	case "warden.warden.v1beta3.SignRequest.data_for_signing":
		x.DataForSigning = value.Bytes()
	case "warden.warden.v1beta3.SignRequest.status":
		x.Status = (SignRequestStatus)(value.Enum())
	case "warden.warden.v1beta3.SignRequest.signed_data":
		cv := value.Bytes()
		x.Result = &SignRequest_SignedData{SignedData: cv}
	case "warden.warden.v1beta3.SignRequest.reject_reason":
		cv := value.Interface().(string)
		x.Result = &SignRequest_RejectReason{RejectReason: cv}
	case "warden.warden.v1beta3.SignRequest.encryption_key":
		x.EncryptionKey = value.Bytes()
	case "warden.warden.v1beta3.SignRequest.deducted_keychain_fees":
		lv := value.List()
		clv := lv.(*_SignRequest_9_list)
		x.DeductedKeychainFees = *clv.list
	case "warden.warden.v1beta3.SignRequest.broadcast_type":
		x.BroadcastType = (BroadcastType)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta3.SignRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta3.SignRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "warden.warden.v1beta3.SignRequest.deducted_keychain_fees":
		if x.DeductedKeychainFees == nil {
			x.DeductedKeychainFees = []*v1beta1.Coin{}
		}
		value := &_SignRequest_9_list{list: &x.DeductedKeychainFees}
		return protoreflect.ValueOfList(value)
	case "warden.warden.v1beta3.SignRequest.id":
		panic(fmt.Errorf("field id of message warden.warden.v1beta3.SignRequest is not mutable"))
	case "warden.warden.v1beta3.SignRequest.creator":
		panic(fmt.Errorf("field creator of message warden.warden.v1beta3.SignRequest is not mutable"))
	case "warden.warden.v1beta3.SignRequest.key_id":
		panic(fmt.Errorf("field key_id of message warden.warden.v1beta3.SignRequest is not mutable"))
	case "warden.warden.v1beta3.SignRequest.data_for_signing":
		panic(fmt.Errorf("field data_for_signing of message warden.warden.v1beta3.SignRequest is not mutable"))
	case "warden.warden.v1beta3.SignRequest.status":
		panic(fmt.Errorf("field status of message warden.warden.v1beta3.SignRequest is not mutable"))
	case "warden.warden.v1beta3.SignRequest.signed_data":
		panic(fmt.Errorf("field signed_data of message warden.warden.v1beta3.SignRequest is not mutable"))
	case "warden.warden.v1beta3.SignRequest.reject_reason":
		panic(fmt.Errorf("field reject_reason of message warden.warden.v1beta3.SignRequest is not mutable"))
	case "warden.warden.v1beta3.SignRequest.encryption_key":
		panic(fmt.Errorf("field encryption_key of message warden.warden.v1beta3.SignRequest is not mutable"))
	case "warden.warden.v1beta3.SignRequest.broadcast_type":
		panic(fmt.Errorf("field broadcast_type of message warden.warden.v1beta3.SignRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta3.SignRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta3.SignRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SignRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "warden.warden.v1beta3.SignRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.warden.v1beta3.SignRequest.creator":
		return protoreflect.ValueOfString("")
	case "warden.warden.v1beta3.SignRequest.key_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "warden.warden.v1beta3.SignRequest.data_for_signing":
		return protoreflect.ValueOfBytes(nil)
	case "warden.warden.v1beta3.SignRequest.status":
		return protoreflect.ValueOfEnum(0)
	case "warden.warden.v1beta3.SignRequest.signed_data":
		return protoreflect.ValueOfBytes(nil)
	case "warden.warden.v1beta3.SignRequest.reject_reason":
		return protoreflect.ValueOfString("")
	case "warden.warden.v1beta3.SignRequest.encryption_key":
		return protoreflect.ValueOfBytes(nil)
	case "warden.warden.v1beta3.SignRequest.deducted_keychain_fees":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_SignRequest_9_list{list: &list})
	case "warden.warden.v1beta3.SignRequest.broadcast_type":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: warden.warden.v1beta3.SignRequest"))
		}
		panic(fmt.Errorf("message warden.warden.v1beta3.SignRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SignRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "warden.warden.v1beta3.SignRequest.result":
		if x.Result == nil {
			return nil
		}
		switch x.Result.(type) {
		case *SignRequest_SignedData:
			return x.Descriptor().Fields().ByName("signed_data")
		case *SignRequest_RejectReason:
			return x.Descriptor().Fields().ByName("reject_reason")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in warden.warden.v1beta3.SignRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SignRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SignRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SignRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SignRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SignRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.KeyId != 0 {
			n += 1 + runtime.Sov(uint64(x.KeyId))
		}
		l = len(x.DataForSigning)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		switch x := x.Result.(type) {
		case *SignRequest_SignedData:
			if x == nil {
				break
			}
			l = len(x.SignedData)
			n += 1 + l + runtime.Sov(uint64(l))
		case *SignRequest_RejectReason:
			if x == nil {
				break
			}
			l = len(x.RejectReason)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EncryptionKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.DeductedKeychainFees) > 0 {
			for _, e := range x.DeductedKeychainFees {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.BroadcastType != 0 {
			n += 1 + runtime.Sov(uint64(x.BroadcastType))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SignRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Result.(type) {
		case *SignRequest_SignedData:
			i -= len(x.SignedData)
			copy(dAtA[i:], x.SignedData)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SignedData)))
			i--
			dAtA[i] = 0x32
		case *SignRequest_RejectReason:
			i -= len(x.RejectReason)
			copy(dAtA[i:], x.RejectReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RejectReason)))
			i--
			dAtA[i] = 0x3a
		}
		if x.BroadcastType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BroadcastType))
			i--
			dAtA[i] = 0x50
		}
		if len(x.DeductedKeychainFees) > 0 {
			for iNdEx := len(x.DeductedKeychainFees) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DeductedKeychainFees[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.EncryptionKey) > 0 {
			i -= len(x.EncryptionKey)
			copy(dAtA[i:], x.EncryptionKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncryptionKey)))
			i--
			dAtA[i] = 0x42
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x28
		}
		if len(x.DataForSigning) > 0 {
			i -= len(x.DataForSigning)
			copy(dAtA[i:], x.DataForSigning)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DataForSigning)))
			i--
			dAtA[i] = 0x22
		}
		if x.KeyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.KeyId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SignRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
				}
				x.KeyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.KeyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataForSigning", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DataForSigning = append(x.DataForSigning[:0], dAtA[iNdEx:postIndex]...)
				if x.DataForSigning == nil {
					x.DataForSigning = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= SignRequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := make([]byte, postIndex-iNdEx)
				copy(v, dAtA[iNdEx:postIndex])
				x.Result = &SignRequest_SignedData{v}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Result = &SignRequest_RejectReason{string(dAtA[iNdEx:postIndex])}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncryptionKey = append(x.EncryptionKey[:0], dAtA[iNdEx:postIndex]...)
				if x.EncryptionKey == nil {
					x.EncryptionKey = []byte{}
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DeductedKeychainFees", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DeductedKeychainFees = append(x.DeductedKeychainFees, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DeductedKeychainFees[len(x.DeductedKeychainFees)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
				}
				x.BroadcastType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BroadcastType |= BroadcastType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: warden/warden/v1beta3/signature.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SignRequestStatus indicates the status of a signature request.
//
// The possible state transitions are:
//   - PENDING -> FULFILLED
//   - PENDING -> REJECTED
type SignRequestStatus int32

const (
	// The request is missing the status field.
	SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED SignRequestStatus = 0
	// The request is waiting to be fulfilled. This is the initial state of a
	// request.
	SignRequestStatus_SIGN_REQUEST_STATUS_PENDING SignRequestStatus = 1
	// The request was fulfilled. This is a final state for a request.
	SignRequestStatus_SIGN_REQUEST_STATUS_FULFILLED SignRequestStatus = 2
	// The request was rejected. This is a final state for a request.
	SignRequestStatus_SIGN_REQUEST_STATUS_REJECTED SignRequestStatus = 3
)

// Enum value maps for SignRequestStatus.
var (
	SignRequestStatus_name = map[int32]string{
		0: "SIGN_REQUEST_STATUS_UNSPECIFIED",
		1: "SIGN_REQUEST_STATUS_PENDING",
		2: "SIGN_REQUEST_STATUS_FULFILLED",
		3: "SIGN_REQUEST_STATUS_REJECTED",
	}
	SignRequestStatus_value = map[string]int32{
		"SIGN_REQUEST_STATUS_UNSPECIFIED": 0,
		"SIGN_REQUEST_STATUS_PENDING":     1,
		"SIGN_REQUEST_STATUS_FULFILLED":   2,
		"SIGN_REQUEST_STATUS_REJECTED":    3,
	}
)

func (x SignRequestStatus) Enum() *SignRequestStatus {
	p := new(SignRequestStatus)
	*p = x
	return p
}

func (x SignRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_warden_warden_v1beta3_signature_proto_enumTypes[0].Descriptor()
}

func (SignRequestStatus) Type() protoreflect.EnumType {
	return &file_warden_warden_v1beta3_signature_proto_enumTypes[0]
}

func (x SignRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignRequestStatus.Descriptor instead.
func (SignRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_warden_warden_v1beta3_signature_proto_rawDescGZIP(), []int{0}
}

// BroadcastType specifies how the transaction should be broadcasted.
type BroadcastType int32

const (
	// The signature should be broadcasted manually by the caller.
	BroadcastType_BROADCAST_TYPE_DISABLED BroadcastType = 0
	// The signature should be automatically broadcasted by an offchain relayer.
	BroadcastType_BROADCAST_TYPE_AUTOMATIC BroadcastType = 1
)

// Enum value maps for BroadcastType.
var (
	BroadcastType_name = map[int32]string{
		0: "BROADCAST_TYPE_DISABLED",
		1: "BROADCAST_TYPE_AUTOMATIC",
	}
	BroadcastType_value = map[string]int32{
		"BROADCAST_TYPE_DISABLED":  0,
		"BROADCAST_TYPE_AUTOMATIC": 1,
	}
)

func (x BroadcastType) Enum() *BroadcastType {
	p := new(BroadcastType)
	*p = x
	return p
}

func (x BroadcastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastType) Descriptor() protoreflect.EnumDescriptor {
	return file_warden_warden_v1beta3_signature_proto_enumTypes[1].Descriptor()
}

func (BroadcastType) Type() protoreflect.EnumType {
	return &file_warden_warden_v1beta3_signature_proto_enumTypes[1]
}

func (x BroadcastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastType.Descriptor instead.
func (BroadcastType) EnumDescriptor() ([]byte, []int) {
	return file_warden_warden_v1beta3_signature_proto_rawDescGZIP(), []int{1}
}

// SignRequest is the request from a user (creator) to a Keychain to sign a
// message (data_for_signing).
//
// Once that the Keychain has received the request, it will either fulfill it
// or reject it. The result of the request will be stored in the result field.
type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the request.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the creator of the request.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// Key ID of the key to be used for signing.
	KeyId uint64 `protobuf:"varint,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Data to be signed.
	DataForSigning []byte `protobuf:"bytes,4,opt,name=data_for_signing,json=dataForSigning,proto3" json:"data_for_signing,omitempty"`
	// Status of the request.
	Status SignRequestStatus `protobuf:"varint,5,opt,name=status,proto3,enum=warden.warden.v1beta3.SignRequestStatus" json:"status,omitempty"`
	// Result of the request, depending on the status:
	//
	//	If pending, this field is empty.
	//	If approved, this field contains the signed data.
	//	If rejected, this field contains the reason.
	//
	// Types that are assignable to Result:
	//
	//	*SignRequest_SignedData
	//	*SignRequest_RejectReason
	Result        isSignRequest_Result `protobuf_oneof:"result"`
	EncryptionKey []byte               `protobuf:"bytes,8,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	// Amount of fees deducted during new sign request
	DeductedKeychainFees []*v1beta1.Coin `protobuf:"bytes,9,rep,name=deducted_keychain_fees,json=deductedKeychainFees,proto3" json:"deducted_keychain_fees,omitempty"`
	// Broadcast type of the sign request, indicating how the transaction should be broadcasted.
	BroadcastType BroadcastType `protobuf:"varint,10,opt,name=broadcast_type,json=broadcastType,proto3,enum=warden.warden.v1beta3.BroadcastType" json:"broadcast_type,omitempty"`
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_warden_warden_v1beta3_signature_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_warden_warden_v1beta3_signature_proto_rawDescGZIP(), []int{0}
}

func (x *SignRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SignRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *SignRequest) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *SignRequest) GetDataForSigning() []byte {
	if x != nil {
		return x.DataForSigning
	}
	return nil
}

func (x *SignRequest) GetStatus() SignRequestStatus {
	if x != nil {
		return x.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

func (x *SignRequest) GetResult() isSignRequest_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SignRequest) GetSignedData() []byte {
	if x, ok := x.GetResult().(*SignRequest_SignedData); ok {
		return x.SignedData
	}
	return nil
}

func (x *SignRequest) GetRejectReason() string {
	if x, ok := x.GetResult().(*SignRequest_RejectReason); ok {
		return x.RejectReason
	}
	return ""
}

func (x *SignRequest) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *SignRequest) GetDeductedKeychainFees() []*v1beta1.Coin {
	if x != nil {
		return x.DeductedKeychainFees
	}
	return nil
}

func (x *SignRequest) GetBroadcastType() BroadcastType {
	if x != nil {
		return x.BroadcastType
	}
	return BroadcastType_BROADCAST_TYPE_DISABLED
}

type isSignRequest_Result interface {
	isSignRequest_Result()
}

type SignRequest_SignedData struct {
	SignedData []byte `protobuf:"bytes,6,opt,name=signed_data,json=signedData,proto3,oneof"`
}

type SignRequest_RejectReason struct {
	RejectReason string `protobuf:"bytes,7,opt,name=reject_reason,json=rejectReason,proto3,oneof"`
}

func (*SignRequest_SignedData) isSignRequest_Result() {}

func (*SignRequest_RejectReason) isSignRequest_Result() {}

var File_warden_warden_v1beta3_signature_proto protoreflect.FileDescriptor

var file_warden_warden_v1beta3_signature_proto_rawDesc = []byte{
	0x0a, 0x25, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x1a, 0x11,
	0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x04, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0f, 0xb2, 0xe7, 0xb0, 0x2a, 0x0a,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xb2, 0xe7, 0xb0, 0x2a, 0x0c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x64, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a, 0xe7, 0xb0, 0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x14, 0x64,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x46,
	0x65, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x33, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x9e, 0x01, 0x0a, 0x11, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55,
	0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x47,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x0d, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x42, 0xf4, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x33, 0x42, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2f, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x3b, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0xa2, 0x02, 0x03, 0x57, 0x57, 0x58,
	0xaa, 0x02, 0x15, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2e, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0xca, 0x02, 0x15, 0x57, 0x61, 0x72, 0x64, 0x65,
	0x6e, 0x5c, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33,
	0xe2, 0x02, 0x21, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5c, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x57, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x3a, 0x3a, 0x57,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_warden_warden_v1beta3_signature_proto_rawDescOnce sync.Once
	file_warden_warden_v1beta3_signature_proto_rawDescData = file_warden_warden_v1beta3_signature_proto_rawDesc
)

func file_warden_warden_v1beta3_signature_proto_rawDescGZIP() []byte {
	file_warden_warden_v1beta3_signature_proto_rawDescOnce.Do(func() {
		file_warden_warden_v1beta3_signature_proto_rawDescData = protoimpl.X.CompressGZIP(file_warden_warden_v1beta3_signature_proto_rawDescData)
	})
	return file_warden_warden_v1beta3_signature_proto_rawDescData
}

var file_warden_warden_v1beta3_signature_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_warden_warden_v1beta3_signature_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_warden_warden_v1beta3_signature_proto_goTypes = []interface{}{
	(SignRequestStatus)(0), // 0: warden.warden.v1beta3.SignRequestStatus
	(BroadcastType)(0),     // 1: warden.warden.v1beta3.BroadcastType
	(*SignRequest)(nil),    // 2: warden.warden.v1beta3.SignRequest
	(*v1beta1.Coin)(nil),   // 3: cosmos.base.v1beta1.Coin
}
var file_warden_warden_v1beta3_signature_proto_depIdxs = []int32{
	0, // 0: warden.warden.v1beta3.SignRequest.status:type_name -> warden.warden.v1beta3.SignRequestStatus
	3, // 1: warden.warden.v1beta3.SignRequest.deducted_keychain_fees:type_name -> cosmos.base.v1beta1.Coin
	1, // 2: warden.warden.v1beta3.SignRequest.broadcast_type:type_name -> warden.warden.v1beta3.BroadcastType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_warden_warden_v1beta3_signature_proto_init() }
func file_warden_warden_v1beta3_signature_proto_init() {
	if File_warden_warden_v1beta3_signature_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_warden_warden_v1beta3_signature_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_warden_warden_v1beta3_signature_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SignRequest_SignedData)(nil),
		(*SignRequest_RejectReason)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_warden_warden_v1beta3_signature_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_warden_warden_v1beta3_signature_proto_goTypes,
		DependencyIndexes: file_warden_warden_v1beta3_signature_proto_depIdxs,
		EnumInfos:         file_warden_warden_v1beta3_signature_proto_enumTypes,
		MessageInfos:      file_warden_warden_v1beta3_signature_proto_msgTypes,
	}.Build()
	File_warden_warden_v1beta3_signature_proto = out.File
	file_warden_warden_v1beta3_signature_proto_rawDesc = nil
	file_warden_warden_v1beta3_signature_proto_goTypes = nil
	file_warden_warden_v1beta3_signature_proto_depIdxs = nil
}
