swagger: '2.0'
info:
  title: HTTP API Console
  name: ''
  description: ''
paths:
  /cosmos.auth.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a (governance) operation for updating the x/auth
        module

        parameters. The authority defaults to the x/gov module account.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosAuthV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/auth parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  max_memo_characters:
                    type: string
                    format: uint64
                  tx_sig_limit:
                    type: string
                    format: uint64
                  tx_size_cost_per_byte:
                    type: string
                    format: uint64
                  sig_verify_cost_ed25519:
                    type: string
                    format: uint64
                  sig_verify_cost_secp256k1:
                    type: string
                    format: uint64
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.authz.v1beta1.Msg/Exec:
    post:
      summary: |-
        Exec attempts to execute the provided messages using
        authorizations granted to the grantee. Each message should have only
        one signer corresponding to the granter of the authorization.
      operationId: CosmosAuthzV1Beta1Msg_Exec
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  type: string
                  format: byte
            description: MsgExecResponse defines the Msg/MsgExecResponse response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgExec attempts to execute the provided messages using
            authorizations granted to the grantee. Each message should have only
            one signer corresponding to the granter of the authorization.
          in: body
          required: true
          schema:
            type: object
            properties:
              grantee:
                type: string
              msgs:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: >-
                  Execute Msg.

                  The x/authz will try to find a grant matching (msg.signers[0],
                  grantee, MsgTypeURL(msg))

                  triple and validate it.
            description: >-
              MsgExec attempts to execute the provided messages using

              authorizations granted to the grantee. Each message should have
              only

              one signer corresponding to the granter of the authorization.
      tags:
        - Msg
  /cosmos.authz.v1beta1.Msg/Grant:
    post:
      summary: |-
        Grant grants the provided authorization to the grantee on the granter's
        account with the provided expiration time. If there is already a grant
        for the given (granter, grantee, Authorization) triple, then the grant
        will be overwritten.
      operationId: CosmosAuthzV1Beta1Msg_Grant
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgGrantResponse defines the Msg/MsgGrant response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgGrant is a request type for Grant method. It declares
            authorization to the grantee

            on behalf of the granter with the provided expiration time.
          in: body
          required: true
          schema:
            type: object
            properties:
              granter:
                type: string
              grantee:
                type: string
              grant:
                type: object
                properties:
                  authorization:
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com. As of May 2023, there are no
                          widely used type server

                          implementations and no plans to implement one.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }
                          // or ...
                          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                            foo = any.unpack(Foo.getDefaultInstance());
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".


                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  expiration:
                    type: string
                    format: date-time
                    title: >-
                      time when the grant will expire and will be pruned. If
                      null, then the grant

                      doesn't have a time expiration (other conditions  in
                      `authorization`

                      may apply to invalidate the grant)
                description: |-
                  Grant gives permissions to execute
                  the provide method with expiration time.
            description: >-
              MsgGrant is a request type for Grant method. It declares
              authorization to the grantee

              on behalf of the granter with the provided expiration time.
      tags:
        - Msg
  /cosmos.authz.v1beta1.Msg/Revoke:
    post:
      summary: >-
        Revoke revokes any authorization corresponding to the provided method
        name on the

        granter's account that has been granted to the grantee.
      operationId: CosmosAuthzV1Beta1Msg_Revoke
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgRevokeResponse defines the Msg/MsgRevokeResponse response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgRevoke revokes any authorization with the provided sdk.Msg type
            on the

            granter's account with that has been granted to the grantee.
          in: body
          required: true
          schema:
            type: object
            properties:
              granter:
                type: string
              grantee:
                type: string
              msg_type_url:
                type: string
            description: >-
              MsgRevoke revokes any authorization with the provided sdk.Msg type
              on the

              granter's account with that has been granted to the grantee.
      tags:
        - Msg
  /cosmos.bank.v1beta1.Msg/MultiSend:
    post:
      summary: >-
        MultiSend defines a method for sending coins from some accounts to other
        accounts.
      operationId: CosmosBankV1Beta1Msg_MultiSend
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgMultiSendResponse defines the Msg/MultiSend response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgMultiSend represents an arbitrary multi-in, multi-out send
            message.
          in: body
          required: true
          schema:
            type: object
            properties:
              inputs:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                  description: Input models transaction input.
                description: >-
                  Inputs, despite being `repeated`, only allows one sender
                  input. This is

                  checked in MsgMultiSend's ValidateBasic.
              outputs:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                  description: Output models transaction outputs.
            description: >-
              MsgMultiSend represents an arbitrary multi-in, multi-out send
              message.
      tags:
        - Msg
  /cosmos.bank.v1beta1.Msg/Send:
    post:
      summary: >-
        Send defines a method for sending coins from one account to another
        account.
      operationId: CosmosBankV1Beta1Msg_Send
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgSendResponse defines the Msg/Send response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgSend represents a message to send coins from one account to
            another.
          in: body
          required: true
          schema:
            type: object
            properties:
              from_address:
                type: string
              to_address:
                type: string
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            description: >-
              MsgSend represents a message to send coins from one account to
              another.
      tags:
        - Msg
  /cosmos.bank.v1beta1.Msg/SetSendEnabled:
    post:
      summary: >-
        SetSendEnabled is a governance operation for setting the SendEnabled
        flag

        on any number of Denoms. Only the entries to add or update should be

        included. Entries that already exist in the store, but that aren't

        included in this message, will be left unchanged.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosBankV1Beta1Msg_SetSendEnabled
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgSetSendEnabledResponse defines the Msg/SetSendEnabled response
              type.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgSetSendEnabled is the Msg/SetSendEnabled request type.

            Only entries to add/update/delete need to be included.
            Existing SendEnabled entries that are not included in this
            message are left unchanged.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: authority is the address that controls the module.
              send_enabled:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    enabled:
                      type: boolean
                  description: >-
                    SendEnabled maps coin denom to a send_enabled status
                    (whether a denom is

                    sendable).
                description: send_enabled is the list of entries to add or update.
              use_default_for:
                type: array
                items:
                  type: string
                description: >-
                  use_default_for is a list of denoms that should use the
                  params.default_send_enabled value.

                  Denoms listed here will have their SendEnabled entries
                  deleted.

                  If a denom is included that doesn't have a SendEnabled entry,

                  it will be ignored.
            description: |-
              MsgSetSendEnabled is the Msg/SetSendEnabled request type.

              Only entries to add/update/delete need to be included.
              Existing SendEnabled entries that are not included in this
              message are left unchanged.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.bank.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/bank
        module parameters.

        The authority is defined in the keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosBankV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/bank parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  send_enabled:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        enabled:
                          type: boolean
                      description: >-
                        SendEnabled maps coin denom to a send_enabled status
                        (whether a denom is

                        sendable).
                    description: >-
                      Deprecated: Use of SendEnabled in params is deprecated.

                      For genesis, use the newly added send_enabled field in the
                      genesis object.

                      Storage, lookup, and manipulation of this information is
                      now in the keeper.


                      As of cosmos-sdk 0.47, this only exists for backwards
                      compatibility of genesis files.
                  default_send_enabled:
                    type: boolean
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos/base/node/v1beta1/config:
    get:
      summary: Config queries for the operator configuration.
      operationId: CosmosBaseNodeV1Beta1Service_Config
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              minimum_gas_price:
                type: string
              pruning_keep_recent:
                type: string
              pruning_interval:
                type: string
              halt_height:
                type: string
                format: uint64
            description: >-
              ConfigResponse defines the response structure for the Config gRPC
              query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Service
  /cosmos/base/node/v1beta1/status:
    get:
      summary: Status queries for the node status.
      operationId: CosmosBaseNodeV1Beta1Service_Status
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              earliest_store_height:
                type: string
                format: uint64
                title: earliest block height available in the store
              height:
                type: string
                format: uint64
                title: current block height
              timestamp:
                type: string
                format: date-time
                title: block height timestamp
              app_hash:
                type: string
                format: byte
                title: app hash of the current block
              validator_hash:
                type: string
                format: byte
                title: validator hash provided by the consensus header
            description: >-
              StateResponse defines the response structure for the status of a
              node.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Service
  /cosmos.consensus.v1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/consensus
        module parameters.

        The authority is defined in the keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosConsensusV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: MsgUpdateParams is the Msg/UpdateParams request type.
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              block:
                description: >-
                  params defines the x/consensus parameters to update.

                  VersionsParams is not included in this Msg because it is
                  tracked

                  separarately in x/upgrade.


                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  max_bytes:
                    type: string
                    format: int64
                    title: |-
                      Max block size, in bytes.
                      Note: must be greater than 0
                  max_gas:
                    type: string
                    format: int64
                    title: |-
                      Max gas per block.
                      Note: must be greater or equal to -1
              evidence:
                type: object
                properties:
                  max_age_num_blocks:
                    type: string
                    format: int64
                    description: >-
                      Max age of evidence, in blocks.


                      The basic formula for calculating this is: MaxAgeDuration
                      / {average block

                      time}.
                  max_age_duration:
                    type: string
                    description: >-
                      Max age of evidence, in time.


                      It should correspond with an app's "unbonding period" or
                      other similar

                      mechanism for handling [Nothing-At-Stake

                      attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
                  max_bytes:
                    type: string
                    format: int64
                    title: >-
                      This sets the maximum size of total evidence in bytes that
                      can be committed in a single block.

                      and should fall comfortably under the max block bytes.

                      Default is 1048576 or 1MB
                description: >-
                  EvidenceParams determine how we handle evidence of
                  malfeasance.
              validator:
                type: object
                properties:
                  pub_key_types:
                    type: array
                    items:
                      type: string
                description: >-
                  ValidatorParams restrict the public key types validators can
                  use.

                  NOTE: uses ABCI pubkey naming, not Amino names.
              abci:
                title: 'Since: cosmos-sdk 0.50'
                type: object
                properties:
                  vote_extensions_enable_height:
                    type: string
                    format: int64
                    description: >-
                      vote_extensions_enable_height configures the first height
                      during which

                      vote extensions will be enabled. During this specified
                      height, and for all

                      subsequent heights, precommit messages that do not contain
                      valid extension data

                      will be considered invalid. Prior to this height, vote
                      extensions will not

                      be used or accepted by validators on the network.


                      Once enabled, vote extensions will be created by the
                      application in ExtendVote,

                      passed to the application for validation in
                      VerifyVoteExtension and given

                      to the application to use when proposing a block during
                      PrepareProposal.
                description: >-
                  ABCIParams configure functionality specific to the Application
                  Blockchain Interface.
            description: MsgUpdateParams is the Msg/UpdateParams request type.
      tags:
        - Msg
  /cosmos.crisis.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/crisis
        module

        parameters. The authority is defined in the keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosCrisisV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              constant_fee:
                description: constant_fee defines the x/crisis parameter.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.crisis.v1beta1.Msg/VerifyInvariant:
    post:
      summary: VerifyInvariant defines a method to verify a particular invariant.
      operationId: CosmosCrisisV1Beta1Msg_VerifyInvariant
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgVerifyInvariantResponse defines the Msg/VerifyInvariant
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgVerifyInvariant represents a message to verify a particular
            invariance.
          in: body
          required: true
          schema:
            type: object
            properties:
              sender:
                type: string
                description: >-
                  sender is the account address of private key to send coins to
                  fee collector account.
              invariant_module_name:
                type: string
                description: name of the invariant module.
              invariant_route:
                type: string
                description: invariant_route is the msg's invariant route.
            description: >-
              MsgVerifyInvariant represents a message to verify a particular
              invariance.
      tags:
        - Msg
  /cosmos.distribution.v1beta1.Msg/CommunityPoolSpend:
    post:
      summary: >-
        CommunityPoolSpend defines a governance operation for sending tokens
        from

        the community pool in the x/distribution module to another account,
        which

        could be the governance module itself. The authority is defined in the

        keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosDistributionV1Beta1Msg_CommunityPoolSpend
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: |-
              MsgCommunityPoolSpendResponse defines the response to executing a
              MsgCommunityPoolSpend message.

              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgCommunityPoolSpend defines a message for sending tokens from the
            community

            pool to another account. This message is typically executed via a
            governance

            proposal with the governance module being the executing authority.


            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              recipient:
                type: string
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            description: >-
              MsgCommunityPoolSpend defines a message for sending tokens from
              the community

              pool to another account. This message is typically executed via a
              governance

              proposal with the governance module being the executing authority.


              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.distribution.v1beta1.Msg/DepositValidatorRewardsPool:
    post:
      summary: >-
        DepositValidatorRewardsPool defines a method to provide additional
        rewards

        to delegators to a specific validator.
      description: 'Since: cosmos-sdk 0.50'
      operationId: CosmosDistributionV1Beta1Msg_DepositValidatorRewardsPool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgDepositValidatorRewardsPoolResponse defines the response to
              executing a

              MsgDepositValidatorRewardsPool message.


              Since: cosmos-sdk 0.50
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            DepositValidatorRewardsPool defines the request structure to provide
            additional rewards to delegators from a specific validator.

            Since: cosmos-sdk 0.50
          in: body
          required: true
          schema:
            type: object
            properties:
              depositor:
                type: string
              validator_address:
                type: string
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            description: >-
              DepositValidatorRewardsPool defines the request structure to
              provide

              additional rewards to delegators from a specific validator.


              Since: cosmos-sdk 0.50
      tags:
        - Msg
  /cosmos.distribution.v1beta1.Msg/FundCommunityPool:
    post:
      summary: |-
        FundCommunityPool defines a method to allow an account to directly
        fund the community pool.
      operationId: CosmosDistributionV1Beta1Msg_FundCommunityPool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgFundCommunityPool allows an account to directly
            fund the community pool.
          in: body
          required: true
          schema:
            type: object
            properties:
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
              depositor:
                type: string
            description: |-
              MsgFundCommunityPool allows an account to directly
              fund the community pool.
      tags:
        - Msg
  /cosmos.distribution.v1beta1.Msg/SetWithdrawAddress:
    post:
      summary: |-
        SetWithdrawAddress defines a method to change the withdraw address
        for a delegator (or validator self-delegation).
      operationId: CosmosDistributionV1Beta1Msg_SetWithdrawAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress
              response

              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgSetWithdrawAddress sets the withdraw address for
            a delegator (or validator self-delegation).
          in: body
          required: true
          schema:
            type: object
            properties:
              delegator_address:
                type: string
              withdraw_address:
                type: string
            description: |-
              MsgSetWithdrawAddress sets the withdraw address for
              a delegator (or validator self-delegation).
      tags:
        - Msg
  /cosmos.distribution.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the
        x/distribution

        module parameters. The authority is defined in the keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosDistributionV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/distribution parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  community_tax:
                    type: string
                  base_proposer_reward:
                    type: string
                    description: >-
                      Deprecated: The base_proposer_reward field is deprecated
                      and is no longer used

                      in the x/distribution module's reward mechanism.
                  bonus_proposer_reward:
                    type: string
                    description: >-
                      Deprecated: The bonus_proposer_reward field is deprecated
                      and is no longer used

                      in the x/distribution module's reward mechanism.
                  withdraw_addr_enabled:
                    type: boolean
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward:
    post:
      summary: >-
        WithdrawDelegatorReward defines a method to withdraw rewards of
        delegator

        from a single validator.
      operationId: CosmosDistributionV1Beta1Msg_WithdrawDelegatorReward
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: 'Since: cosmos-sdk 0.46'
            description: >-
              MsgWithdrawDelegatorRewardResponse defines the
              Msg/WithdrawDelegatorReward

              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgWithdrawDelegatorReward represents delegation withdrawal to a
            delegator

            from a single validator.
          in: body
          required: true
          schema:
            type: object
            properties:
              delegator_address:
                type: string
              validator_address:
                type: string
            description: >-
              MsgWithdrawDelegatorReward represents delegation withdrawal to a
              delegator

              from a single validator.
      tags:
        - Msg
  /cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission:
    post:
      summary: |-
        WithdrawValidatorCommission defines a method to withdraw the
        full commission to the validator address.
      operationId: CosmosDistributionV1Beta1Msg_WithdrawValidatorCommission
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: 'Since: cosmos-sdk 0.46'
            description: |-
              MsgWithdrawValidatorCommissionResponse defines the
              Msg/WithdrawValidatorCommission response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: >-
            MsgWithdrawValidatorCommission withdraws the full commission to the
            validator

            address.
          in: body
          required: true
          schema:
            type: object
            properties:
              validator_address:
                type: string
            description: >-
              MsgWithdrawValidatorCommission withdraws the full commission to
              the validator

              address.
      tags:
        - Msg
  /cosmos.evidence.v1beta1.Msg/SubmitEvidence:
    post:
      summary: >-
        SubmitEvidence submits an arbitrary Evidence of misbehavior such as
        equivocation or

        counterfactual signing.
      operationId: CosmosEvidenceV1Beta1Msg_SubmitEvidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              hash:
                type: string
                format: byte
                description: hash defines the hash of the evidence.
            description: >-
              MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgSubmitEvidence represents a message that supports submitting
            arbitrary

            Evidence of misbehavior such as equivocation or counterfactual
            signing.
          in: body
          required: true
          schema:
            type: object
            properties:
              submitter:
                type: string
                description: submitter is the signer account address of evidence.
              evidence:
                description: evidence defines the evidence of misbehavior.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
            description: >-
              MsgSubmitEvidence represents a message that supports submitting
              arbitrary

              Evidence of misbehavior such as equivocation or counterfactual
              signing.
      tags:
        - Msg
  /cosmos.feegrant.v1beta1.Msg/GrantAllowance:
    post:
      summary: |-
        GrantAllowance grants fee allowance to the grantee on the granter's
        account with the provided expiration time.
      operationId: CosmosFeegrantV1Beta1Msg_GrantAllowance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgGrantAllowance adds permission for Grantee to spend up to
            Allowance

            of fees from the account of Granter.
          in: body
          required: true
          schema:
            type: object
            properties:
              granter:
                type: string
                description: >-
                  granter is the address of the user granting an allowance of
                  their funds.
              grantee:
                type: string
                description: >-
                  grantee is the address of the user being granted an allowance
                  of another user's funds.
              allowance:
                description: >-
                  allowance can be any of basic, periodic, allowed fee
                  allowance.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
            description: >-
              MsgGrantAllowance adds permission for Grantee to spend up to
              Allowance

              of fees from the account of Granter.
      tags:
        - Msg
  /cosmos.feegrant.v1beta1.Msg/PruneAllowances:
    post:
      summary: >-
        PruneAllowances prunes expired fee allowances, currently up to 75 at a
        time.
      description: Since cosmos-sdk 0.50
      operationId: CosmosFeegrantV1Beta1Msg_PruneAllowances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgPruneAllowancesResponse defines the Msg/PruneAllowancesResponse
              response type.


              Since cosmos-sdk 0.50
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgPruneAllowances prunes expired fee allowances.

            Since cosmos-sdk 0.50
          in: body
          required: true
          schema:
            type: object
            properties:
              pruner:
                type: string
                description: pruner is the address of the user pruning expired allowances.
            description: |-
              MsgPruneAllowances prunes expired fee allowances.

              Since cosmos-sdk 0.50
      tags:
        - Msg
  /cosmos.feegrant.v1beta1.Msg/RevokeAllowance:
    post:
      summary: |-
        RevokeAllowance revokes any fee allowance of granter's account that
        has been granted to the grantee.
      operationId: CosmosFeegrantV1Beta1Msg_RevokeAllowance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgRevokeAllowance removes any existing Allowance from Granter to
            Grantee.
          in: body
          required: true
          schema:
            type: object
            properties:
              granter:
                type: string
                description: >-
                  granter is the address of the user granting an allowance of
                  their funds.
              grantee:
                type: string
                description: >-
                  grantee is the address of the user being granted an allowance
                  of another user's funds.
            description: >-
              MsgRevokeAllowance removes any existing Allowance from Granter to
              Grantee.
      tags:
        - Msg
  /cosmos.gov.v1.Msg/CancelProposal:
    post:
      summary: CancelProposal defines a method to cancel governance proposal
      description: 'Since: cosmos-sdk 0.50'
      operationId: CosmosGovV1Msg_CancelProposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
              canceled_time:
                type: string
                format: date-time
                description: canceled_time is the time when proposal is canceled.
              canceled_height:
                type: string
                format: uint64
                description: >-
                  canceled_height defines the block height at which the proposal
                  is canceled.
            description: >-
              MsgCancelProposalResponse defines the response structure for
              executing a

              MsgCancelProposal message.


              Since: cosmos-sdk 0.50
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgCancelProposal is the Msg/CancelProposal request type.

            Since: cosmos-sdk 0.50
          in: body
          required: true
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
              proposer:
                type: string
                description: proposer is the account address of the proposer.
            description: |-
              MsgCancelProposal is the Msg/CancelProposal request type.

              Since: cosmos-sdk 0.50
      tags:
        - Msg
  /cosmos.gov.v1.Msg/Deposit:
    post:
      summary: Deposit defines a method to add deposit on a specific proposal.
      operationId: CosmosGovV1Msg_Deposit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgDepositResponse defines the Msg/Deposit response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgDeposit defines a message to submit a deposit to an existing
            proposal.
          in: body
          required: true
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
              depositor:
                type: string
                description: depositor defines the deposit addresses from the proposals.
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: amount to be deposited by depositor.
            description: >-
              MsgDeposit defines a message to submit a deposit to an existing
              proposal.
      tags:
        - Msg
  /cosmos.gov.v1.Msg/ExecLegacyContent:
    post:
      summary: |-
        ExecLegacyContent defines a Msg to be in included in a MsgSubmitProposal
        to execute a legacy content-based proposal.
      operationId: CosmosGovV1Msg_ExecLegacyContent
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgExecLegacyContentResponse defines the Msg/ExecLegacyContent
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgExecLegacyContent is used to wrap the legacy content field into a
            message.

            This ensures backwards compatibility with v1beta1.MsgSubmitProposal.
          in: body
          required: true
          schema:
            type: object
            properties:
              content:
                description: content is the proposal's content.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
              authority:
                type: string
                description: authority must be the gov module address.
            description: >-
              MsgExecLegacyContent is used to wrap the legacy content field into
              a message.

              This ensures backwards compatibility with
              v1beta1.MsgSubmitProposal.
      tags:
        - Msg
  /cosmos.gov.v1.Msg/SubmitProposal:
    post:
      summary: >-
        SubmitProposal defines a method to create new proposal given the
        messages.
      operationId: CosmosGovV1Msg_SubmitProposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
            description: >-
              MsgSubmitProposalResponse defines the Msg/SubmitProposal response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgSubmitProposal defines an sdk.Msg type that supports submitting
            arbitrary

            proposal Content.
          in: body
          required: true
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: >-
                  messages are the arbitrary messages to be executed if proposal
                  passes.
              initial_deposit:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: >-
                  initial_deposit is the deposit value that must be paid at
                  proposal submission.
              proposer:
                type: string
                description: proposer is the account address of the proposer.
              metadata:
                type: string
                description: metadata is any arbitrary metadata attached to the proposal.
              title:
                type: string
                description: |-
                  title is the title of the proposal.

                  Since: cosmos-sdk 0.47
              summary:
                type: string
                description: 'Since: cosmos-sdk 0.47'
                title: summary is the summary of the proposal
              expedited:
                type: boolean
                description: 'Since: cosmos-sdk 0.50'
                title: expedited defines if the proposal is expedited or not
            description: >-
              MsgSubmitProposal defines an sdk.Msg type that supports submitting
              arbitrary

              proposal Content.
      tags:
        - Msg
  /cosmos.gov.v1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/gov
        module

        parameters. The authority is defined in the keeper.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosGovV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/gov parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  min_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: Minimum deposit for a proposal to enter voting period.
                  max_deposit_period:
                    type: string
                    description: >-
                      Maximum period for Atom holders to deposit on a proposal.
                      Initial value: 2

                      months.
                  voting_period:
                    type: string
                    description: Duration of the voting period.
                  quorum:
                    type: string
                    description: >-
                      Minimum percentage of total stake needed to vote for a
                      result to be
                       considered valid.
                  threshold:
                    type: string
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.5.
                  veto_threshold:
                    type: string
                    description: >-
                      Minimum value of Veto votes to Total votes ratio for
                      proposal to be
                       vetoed. Default value: 1/3.
                  min_initial_deposit_ratio:
                    type: string
                    description: >-
                      The ratio representing the proportion of the deposit value
                      that must be paid at proposal submission.
                  proposal_cancel_ratio:
                    type: string
                    description: >-
                      The cancel ratio which will not be returned back to the
                      depositors when a proposal is cancelled.


                      Since: cosmos-sdk 0.50
                  proposal_cancel_dest:
                    type: string
                    description: >-
                      The address which will receive (proposal_cancel_ratio *
                      deposit) proposal deposits.

                      If empty, the (proposal_cancel_ratio * deposit) proposal
                      deposits will be burned.


                      Since: cosmos-sdk 0.50
                  expedited_voting_period:
                    type: string
                    description: |-
                      Duration of the voting period of an expedited proposal.

                      Since: cosmos-sdk 0.50
                  expedited_threshold:
                    type: string
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.67.


                      Since: cosmos-sdk 0.50
                  expedited_min_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: >-
                      Minimum expedited deposit for a proposal to enter voting
                      period.
                  burn_vote_quorum:
                    type: boolean
                    title: burn deposits if a proposal does not meet quorum
                  burn_proposal_deposit_prevote:
                    type: boolean
                    title: burn deposits if the proposal does not enter voting period
                  burn_vote_veto:
                    type: boolean
                    title: burn deposits if quorum with vote type no_veto is met
                  min_deposit_ratio:
                    type: string
                    description: >-
                      The ratio representing the proportion of the deposit value
                      minimum that must be met when making a deposit.

                      Default value: 0.01. Meaning that for a chain with a
                      min_deposit of 100stake, a deposit of 1stake would be

                      required.


                      Since: cosmos-sdk 0.50
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.gov.v1.Msg/Vote:
    post:
      summary: Vote defines a method to add a vote on a specific proposal.
      operationId: CosmosGovV1Msg_Vote
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgVoteResponse defines the Msg/Vote response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: MsgVote defines a message to cast a vote.
          in: body
          required: true
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
              voter:
                type: string
                description: voter is the voter address for the proposal.
              option:
                description: option defines the vote option.
                type: string
                enum:
                  - VOTE_OPTION_UNSPECIFIED
                  - VOTE_OPTION_YES
                  - VOTE_OPTION_ABSTAIN
                  - VOTE_OPTION_NO
                  - VOTE_OPTION_NO_WITH_VETO
                default: VOTE_OPTION_UNSPECIFIED
              metadata:
                type: string
                description: metadata is any arbitrary metadata attached to the Vote.
            description: MsgVote defines a message to cast a vote.
      tags:
        - Msg
  /cosmos.gov.v1.Msg/VoteWeighted:
    post:
      summary: >-
        VoteWeighted defines a method to add a weighted vote on a specific
        proposal.
      operationId: CosmosGovV1Msg_VoteWeighted
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgVoteWeightedResponse defines the Msg/VoteWeighted response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: MsgVoteWeighted defines a message to cast a vote.
          in: body
          required: true
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
              voter:
                type: string
                description: voter is the voter address for the proposal.
              options:
                type: array
                items:
                  type: object
                  properties:
                    option:
                      description: >-
                        option defines the valid vote options, it must not
                        contain duplicate vote options.
                      type: string
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      default: VOTE_OPTION_UNSPECIFIED
                    weight:
                      type: string
                      description: >-
                        weight is the vote weight associated with the vote
                        option.
                  description: WeightedVoteOption defines a unit of vote for vote split.
                description: options defines the weighted vote options.
              metadata:
                type: string
                description: >-
                  metadata is any arbitrary metadata attached to the
                  VoteWeighted.
            description: MsgVoteWeighted defines a message to cast a vote.
      tags:
        - Msg
  /cosmos.gov.v1beta1.Msg/Deposit:
    post:
      summary: Deposit defines a method to add deposit on a specific proposal.
      operationId: CosmosGovV1Beta1Msg_Deposit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgDepositResponse defines the Msg/Deposit response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgDeposit defines a message to submit a deposit to an existing
            proposal.
          in: body
          required: true
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
              depositor:
                type: string
                description: depositor defines the deposit addresses from the proposals.
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: amount to be deposited by depositor.
            description: >-
              MsgDeposit defines a message to submit a deposit to an existing
              proposal.
      tags:
        - Msg
  /cosmos.gov.v1beta1.Msg/SubmitProposal:
    post:
      summary: SubmitProposal defines a method to create new proposal given a content.
      operationId: CosmosGovV1Beta1Msg_SubmitProposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
            description: >-
              MsgSubmitProposalResponse defines the Msg/SubmitProposal response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgSubmitProposal defines an sdk.Msg type that supports submitting
            arbitrary

            proposal Content.
          in: body
          required: true
          schema:
            type: object
            properties:
              content:
                description: content is the proposal's content.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
              initial_deposit:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: >-
                  initial_deposit is the deposit value that must be paid at
                  proposal submission.
              proposer:
                type: string
                description: proposer is the account address of the proposer.
            description: >-
              MsgSubmitProposal defines an sdk.Msg type that supports submitting
              arbitrary

              proposal Content.
      tags:
        - Msg
  /cosmos.gov.v1beta1.Msg/Vote:
    post:
      summary: Vote defines a method to add a vote on a specific proposal.
      operationId: CosmosGovV1Beta1Msg_Vote
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgVoteResponse defines the Msg/Vote response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: MsgVote defines a message to cast a vote.
          in: body
          required: true
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
              voter:
                type: string
                description: voter is the voter address for the proposal.
              option:
                description: option defines the vote option.
                type: string
                enum:
                  - VOTE_OPTION_UNSPECIFIED
                  - VOTE_OPTION_YES
                  - VOTE_OPTION_ABSTAIN
                  - VOTE_OPTION_NO
                  - VOTE_OPTION_NO_WITH_VETO
                default: VOTE_OPTION_UNSPECIFIED
            description: MsgVote defines a message to cast a vote.
      tags:
        - Msg
  /cosmos.gov.v1beta1.Msg/VoteWeighted:
    post:
      summary: >-
        VoteWeighted defines a method to add a weighted vote on a specific
        proposal.
      description: 'Since: cosmos-sdk 0.43'
      operationId: CosmosGovV1Beta1Msg_VoteWeighted
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgVoteWeightedResponse defines the Msg/VoteWeighted response
              type.


              Since: cosmos-sdk 0.43
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgVoteWeighted defines a message to cast a vote.

            Since: cosmos-sdk 0.43
          in: body
          required: true
          schema:
            type: object
            properties:
              proposal_id:
                type: string
                format: uint64
                description: proposal_id defines the unique id of the proposal.
              voter:
                type: string
                description: voter is the voter address for the proposal.
              options:
                type: array
                items:
                  type: object
                  properties:
                    option:
                      description: >-
                        option defines the valid vote options, it must not
                        contain duplicate vote options.
                      type: string
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      default: VOTE_OPTION_UNSPECIFIED
                    weight:
                      type: string
                      description: >-
                        weight is the vote weight associated with the vote
                        option.
                  description: |-
                    WeightedVoteOption defines a unit of vote for vote split.

                    Since: cosmos-sdk 0.43
                description: options defines the weighted vote options.
            description: |-
              MsgVoteWeighted defines a message to cast a vote.

              Since: cosmos-sdk 0.43
      tags:
        - Msg
  /cosmos.mint.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/mint
        module

        parameters. The authority is defaults to the x/gov module account.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosMintV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/mint parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  mint_denom:
                    type: string
                    title: type of coin to mint
                  inflation_rate_change:
                    type: string
                    title: maximum annual change in inflation rate
                  inflation_max:
                    type: string
                    title: maximum inflation rate
                  inflation_min:
                    type: string
                    title: minimum inflation rate
                  goal_bonded:
                    type: string
                    title: goal of percent bonded atoms
                  blocks_per_year:
                    type: string
                    format: uint64
                    title: expected blocks per year
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos/params/v1beta1/params:
    get:
      summary: |-
        Params queries a specific parameter of a module, given its subspace and
        key.
      operationId: CosmosParamsV1Beta1Query_Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              param:
                description: param defines the queried parameter.
                type: object
                properties:
                  subspace:
                    type: string
                  key:
                    type: string
                  value:
                    type: string
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: subspace
          description: subspace defines the module to query the parameter for.
          in: query
          required: false
          type: string
        - name: key
          description: key defines the key of the parameter in the subspace.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/params/v1beta1/subspaces:
    get:
      summary: >-
        Subspaces queries for all registered subspaces and all keys for a
        subspace.
      description: 'Since: cosmos-sdk 0.46'
      operationId: CosmosParamsV1Beta1Query_Subspaces
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              subspaces:
                type: array
                items:
                  type: object
                  properties:
                    subspace:
                      type: string
                    keys:
                      type: array
                      items:
                        type: string
                  description: >-
                    Subspace defines a parameter subspace name and all the keys
                    that exist for

                    the subspace.


                    Since: cosmos-sdk 0.46
            description: >-
              QuerySubspacesResponse defines the response types for querying for
              all

              registered subspaces and all keys for a subspace.


              Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Query
  /cosmos.slashing.v1beta1.Msg/Unjail:
    post:
      summary: >-
        Unjail defines a method for unjailing a jailed validator, thus returning

        them into the bonded validator set, so they can begin receiving
        provisions

        and rewards again.
      operationId: CosmosSlashingV1Beta1Msg_Unjail
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: MsgUnjailResponse defines the Msg/Unjail response type
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              validator_addr:
                type: string
            title: MsgUnjail defines the Msg/Unjail request type
      tags:
        - Msg
  /cosmos.slashing.v1beta1.Msg/UpdateParams:
    post:
      summary: >-
        UpdateParams defines a governance operation for updating the x/slashing
        module

        parameters. The authority defaults to the x/gov module account.
      description: 'Since: cosmos-sdk 0.47'
      operationId: CosmosSlashingV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/slashing parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  signed_blocks_window:
                    type: string
                    format: int64
                  min_signed_per_window:
                    type: string
                    format: byte
                  downtime_jail_duration:
                    type: string
                  slash_fraction_double_sign:
                    type: string
                    format: byte
                  slash_fraction_downtime:
                    type: string
                    format: byte
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /cosmos.staking.v1beta1.Msg/BeginRedelegate:
    post:
      summary: >-
        BeginRedelegate defines a method for performing a redelegation

        of coins from a delegator and source validator to a destination
        validator.
      operationId: CosmosStakingV1Beta1Msg_BeginRedelegate
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              completion_time:
                type: string
                format: date-time
            description: >-
              MsgBeginRedelegateResponse defines the Msg/BeginRedelegate
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgBeginRedelegate defines a SDK message for performing a
            redelegation

            of coins from a delegator and source validator to a destination
            validator.
          in: body
          required: true
          schema:
            type: object
            properties:
              delegator_address:
                type: string
              validator_src_address:
                type: string
              validator_dst_address:
                type: string
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              MsgBeginRedelegate defines a SDK message for performing a
              redelegation

              of coins from a delegator and source validator to a destination
              validator.
      tags:
        - Msg
  /cosmos.staking.v1beta1.Msg/CancelUnbondingDelegation:
    post:
      summary: >-
        CancelUnbondingDelegation defines a method for performing canceling the
        unbonding delegation

        and delegate back to previous validator.
      description: 'Since: cosmos-sdk 0.46'
      operationId: CosmosStakingV1Beta1Msg_CancelUnbondingDelegation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: 'Since: cosmos-sdk 0.46'
            title: MsgCancelUnbondingDelegationResponse
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: 'Since: cosmos-sdk 0.46'
          in: body
          required: true
          schema:
            type: object
            properties:
              delegator_address:
                type: string
              validator_address:
                type: string
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                title: >-
                  amount is always less than or equal to unbonding delegation
                  entry balance
              creation_height:
                type: string
                format: int64
                description: creation_height is the height which the unbonding took place.
            description: 'Since: cosmos-sdk 0.46'
            title: >-
              MsgCancelUnbondingDelegation defines the SDK message for
              performing a cancel unbonding delegation for delegator
      tags:
        - Msg
  /cosmos.staking.v1beta1.Msg/CreateValidator:
    post:
      summary: CreateValidator defines a method for creating a new validator.
      operationId: CosmosStakingV1Beta1Msg_CreateValidator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgCreateValidatorResponse defines the Msg/CreateValidator
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgCreateValidator defines a SDK message for creating a new
            validator.
          in: body
          required: true
          schema:
            type: object
            properties:
              description:
                type: object
                properties:
                  moniker:
                    type: string
                    description: moniker defines a human-readable name for the validator.
                  identity:
                    type: string
                    description: >-
                      identity defines an optional identity signature (ex. UPort
                      or Keybase).
                  website:
                    type: string
                    description: website defines an optional website link.
                  security_contact:
                    type: string
                    description: >-
                      security_contact defines an optional email for security
                      contact.
                  details:
                    type: string
                    description: details define other optional details.
                description: Description defines a validator description.
              commission:
                type: object
                properties:
                  rate:
                    type: string
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                  max_rate:
                    type: string
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                  max_change_rate:
                    type: string
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
                description: >-
                  CommissionRates defines the initial commission rates to be
                  used for creating

                  a validator.
              min_self_delegation:
                type: string
              delegator_address:
                type: string
                description: >-
                  Deprecated: Use of Delegator Address in MsgCreateValidator is
                  deprecated.

                  The validator address bytes and delegator address bytes refer
                  to the same account while creating validator (defer

                  only in bech32 notation).
              validator_address:
                type: string
              pubkey:
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              value:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              MsgCreateValidator defines a SDK message for creating a new
              validator.
      tags:
        - Msg
  /cosmos.staking.v1beta1.Msg/Delegate:
    post:
      summary: |-
        Delegate defines a method for performing a delegation of coins
        from a delegator to a validator.
      operationId: CosmosStakingV1Beta1Msg_Delegate
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgDelegateResponse defines the Msg/Delegate response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgDelegate defines a SDK message for performing a delegation of
            coins

            from a delegator to a validator.
          in: body
          required: true
          schema:
            type: object
            properties:
              delegator_address:
                type: string
              validator_address:
                type: string
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              MsgDelegate defines a SDK message for performing a delegation of
              coins

              from a delegator to a validator.
      tags:
        - Msg
  /cosmos.staking.v1beta1.Msg/EditValidator:
    post:
      summary: EditValidator defines a method for editing an existing validator.
      operationId: CosmosStakingV1Beta1Msg_EditValidator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgEditValidatorResponse defines the Msg/EditValidator response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgEditValidator defines a SDK message for editing an existing
            validator.
          in: body
          required: true
          schema:
            type: object
            properties:
              description:
                type: object
                properties:
                  moniker:
                    type: string
                    description: moniker defines a human-readable name for the validator.
                  identity:
                    type: string
                    description: >-
                      identity defines an optional identity signature (ex. UPort
                      or Keybase).
                  website:
                    type: string
                    description: website defines an optional website link.
                  security_contact:
                    type: string
                    description: >-
                      security_contact defines an optional email for security
                      contact.
                  details:
                    type: string
                    description: details define other optional details.
                description: Description defines a validator description.
              validator_address:
                type: string
              commission_rate:
                type: string
                title: >-
                  We pass a reference to the new commission rate and min self
                  delegation as

                  it's not mandatory to update. If not updated, the deserialized
                  rate will be

                  zero with no way to distinguish if an update was intended.

                  REF: #2373
              min_self_delegation:
                type: string
            description: >-
              MsgEditValidator defines a SDK message for editing an existing
              validator.
      tags:
        - Msg
  /cosmos.staking.v1beta1.Msg/Undelegate:
    post:
      summary: |-
        Undelegate defines a method for performing an undelegation from a
        delegate and a validator.
      operationId: CosmosStakingV1Beta1Msg_Undelegate
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              completion_time:
                type: string
                format: date-time
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                title: amount returns the amount of undelegated coins
            description: MsgUndelegateResponse defines the Msg/Undelegate response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgUndelegate defines a SDK message for performing an undelegation
            from a

            delegate and a validator.
          in: body
          required: true
          schema:
            type: object
            properties:
              delegator_address:
                type: string
              validator_address:
                type: string
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              MsgUndelegate defines a SDK message for performing an undelegation
              from a

              delegate and a validator.
      tags:
        - Msg
  /cosmos.staking.v1beta1.Msg/UpdateParams:
    post:
      summary: |-
        UpdateParams defines an operation for updating the x/staking module
        parameters.
        Since: cosmos-sdk 0.47
      operationId: CosmosStakingV1Beta1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.


              Since: cosmos-sdk 0.47
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgUpdateParams is the Msg/UpdateParams request type.

            Since: cosmos-sdk 0.47
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: |-
                  params defines the x/staking parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  unbonding_time:
                    type: string
                    description: unbonding_time is the time duration of unbonding.
                  max_validators:
                    type: integer
                    format: int64
                    description: max_validators is the maximum number of validators.
                  max_entries:
                    type: integer
                    format: int64
                    description: >-
                      max_entries is the max entries for either unbonding
                      delegation or redelegation (per pair/trio).
                  historical_entries:
                    type: integer
                    format: int64
                    description: >-
                      historical_entries is the number of historical entries to
                      persist.
                  bond_denom:
                    type: string
                    description: bond_denom defines the bondable coin denomination.
                  min_commission_rate:
                    type: string
                    title: >-
                      min_commission_rate is the chain-wide minimum commission
                      rate that a validator can charge their delegators
            description: |-
              MsgUpdateParams is the Msg/UpdateParams request type.

              Since: cosmos-sdk 0.47
      tags:
        - Msg
  /ibc.applications.fee.v1.Msg/PayPacketFee:
    post:
      summary: >-
        PayPacketFee defines a rpc handler method for MsgPayPacketFee

        PayPacketFee is an open callback that may be called by any module/user
        that wishes to escrow funds in order to

        incentivize the relaying of the packet at the next sequence

        NOTE: This method is intended to be used within a multi msg transaction,
        where the subsequent msg that follows

        initiates the lifecycle of the incentivized packet
      operationId: IbcApplicationsFeeV1Msg_PayPacketFee
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgPayPacketFeeResponse defines the response type for the
              PayPacketFee rpc
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              fee:
                title: >-
                  fee encapsulates the recv, ack and timeout fees associated
                  with an IBC packet
                type: object
                properties:
                  recv_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: the packet receive fee
                  ack_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: the packet acknowledgement fee
                  timeout_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: the packet timeout fee
              source_port_id:
                type: string
                title: the source port unique identifier
              source_channel_id:
                type: string
                title: the source channel unique identifier
              signer:
                type: string
                title: account address to refund fee if necessary
              relayers:
                type: array
                items:
                  type: string
                title: optional list of relayers permitted to the receive packet fees
            title: >-
              MsgPayPacketFee defines the request type for the PayPacketFee rpc

              This Msg can be used to pay for a packet at the next sequence send
              & should be combined with the Msg that will be

              paid for
      tags:
        - Msg
  /ibc.applications.fee.v1.Msg/PayPacketFeeAsync:
    post:
      summary: >-
        PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync

        PayPacketFeeAsync is an open callback that may be called by any
        module/user that wishes to escrow funds in order to

        incentivize the relaying of a known packet (i.e. at a particular
        sequence)
      operationId: IbcApplicationsFeeV1Msg_PayPacketFeeAsync
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgPayPacketFeeAsyncResponse defines the response type for the
              PayPacketFeeAsync rpc
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              packet_id:
                title: >-
                  unique packet identifier comprised of the channel ID, port ID
                  and sequence
                type: object
                properties:
                  port_id:
                    type: string
                    title: channel port identifier
                  channel_id:
                    type: string
                    title: channel unique identifier
                  sequence:
                    type: string
                    format: uint64
                    title: packet sequence
              packet_fee:
                title: the packet fee associated with a particular IBC packet
                type: object
                properties:
                  fee:
                    title: >-
                      fee encapsulates the recv, ack and timeout fees associated
                      with an IBC packet
                    type: object
                    properties:
                      recv_fee:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                        title: the packet receive fee
                      ack_fee:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                        title: the packet acknowledgement fee
                      timeout_fee:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                        title: the packet timeout fee
                  refund_address:
                    type: string
                    title: the refund address for unspent fees
                  relayers:
                    type: array
                    items:
                      type: string
                    title: optional list of relayers permitted to receive fees
            title: >-
              MsgPayPacketFeeAsync defines the request type for the
              PayPacketFeeAsync rpc

              This Msg can be used to pay for a packet at a specified sequence
              (instead of the next sequence send)
      tags:
        - Msg
  /ibc.applications.fee.v1.Msg/RegisterCounterpartyPayee:
    post:
      summary: >-
        RegisterCounterpartyPayee defines a rpc handler method for
        MsgRegisterCounterpartyPayee

        RegisterCounterpartyPayee is called by the relayer on each channelEnd
        and allows them to specify the counterparty

        payee address before relaying. This ensures they will be properly
        compensated for forward relaying since

        the destination chain must include the registered counterparty payee
        address in the acknowledgement. This function

        may be called more than once by a relayer, in which case, the latest
        counterparty payee address is always used.
      operationId: IbcApplicationsFeeV1Msg_RegisterCounterpartyPayee
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgRegisterCounterpartyPayeeResponse defines the response type for
              the RegisterCounterpartyPayee rpc
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
                title: unique port identifier
              channel_id:
                type: string
                title: unique channel identifier
              relayer:
                type: string
                title: the relayer address
              counterparty_payee:
                type: string
                title: the counterparty payee address
            title: >-
              MsgRegisterCounterpartyPayee defines the request type for the
              RegisterCounterpartyPayee rpc
      tags:
        - Msg
  /ibc.applications.fee.v1.Msg/RegisterPayee:
    post:
      summary: >-
        RegisterPayee defines a rpc handler method for MsgRegisterPayee

        RegisterPayee is called by the relayer on each channelEnd and allows
        them to set an optional

        payee to which reverse and timeout relayer packet fees will be paid out.
        The payee should be registered on

        the source chain from which packets originate as this is where fee
        distribution takes place. This function may be

        called more than once by a relayer, in which case, the latest payee is
        always used.
      operationId: IbcApplicationsFeeV1Msg_RegisterPayee
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: >-
              MsgRegisterPayeeResponse defines the response type for the
              RegisterPayee rpc
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
                title: unique port identifier
              channel_id:
                type: string
                title: unique channel identifier
              relayer:
                type: string
                title: the relayer address
              payee:
                type: string
                title: the payee address
            title: >-
              MsgRegisterPayee defines the request type for the RegisterPayee
              rpc
      tags:
        - Msg
  /ibc.applications.interchain_accounts.controller.v1.Msg/RegisterInterchainAccount:
    post:
      summary: >-
        RegisterInterchainAccount defines a rpc handler for
        MsgRegisterInterchainAccount.
      operationId: >-
        IbcApplicationsInterchainAccountsControllerV1Msg_RegisterInterchainAccount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channel_id:
                type: string
              port_id:
                type: string
            title: >-
              MsgRegisterInterchainAccountResponse defines the response for
              Msg/RegisterAccount
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              owner:
                type: string
              connection_id:
                type: string
              version:
                type: string
            title: >-
              MsgRegisterInterchainAccount defines the payload for
              Msg/RegisterAccount
      tags:
        - Msg
  /ibc.applications.interchain_accounts.controller.v1.Msg/SendTx:
    post:
      summary: SendTx defines a rpc handler for MsgSendTx.
      operationId: IbcApplicationsInterchainAccountsControllerV1Msg_SendTx
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sequence:
                type: string
                format: uint64
            title: MsgSendTxResponse defines the response for MsgSendTx
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              owner:
                type: string
              connection_id:
                type: string
              packet_data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - TYPE_UNSPECIFIED
                      - TYPE_EXECUTE_TX
                    default: TYPE_UNSPECIFIED
                    description: |-
                      - TYPE_UNSPECIFIED: Default zero value enumeration
                       - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain
                    title: >-
                      Type defines a classification of message issued from a
                      controller chain to its associated interchain accounts

                      host
                  data:
                    type: string
                    format: byte
                  memo:
                    type: string
                description: >-
                  InterchainAccountPacketData is comprised of a raw transaction,
                  type of transaction and optional memo field.
              relative_timeout:
                type: string
                format: uint64
                description: >-
                  Relative timeout timestamp provided will be added to the
                  current block time during transaction execution.

                  The timeout timestamp must be non-zero.
            title: MsgSendTx defines the payload for Msg/SendTx
      tags:
        - Msg
  /ibc.applications.interchain_accounts.controller.v1.Msg/UpdateParams:
    post:
      summary: UpdateParams defines a rpc handler for MsgUpdateParams.
      operationId: IbcApplicationsInterchainAccountsControllerV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: MsgUpdateParamsResponse defines the response for Msg/UpdateParams
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: >-
                  params defines the 27-interchain-accounts/controller
                  parameters to update.


                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  controller_enabled:
                    type: boolean
                    description: >-
                      controller_enabled enables or disables the controller
                      submodule.
            title: MsgUpdateParams defines the payload for Msg/UpdateParams
      tags:
        - Msg
  /ibc.applications.interchain_accounts.host.v1.Msg/UpdateParams:
    post:
      summary: UpdateParams defines a rpc handler for MsgUpdateParams.
      operationId: IbcApplicationsInterchainAccountsHostV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            title: MsgUpdateParamsResponse defines the response for Msg/UpdateParams
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: >-
                  params defines the 27-interchain-accounts/host parameters to
                  update.


                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  host_enabled:
                    type: boolean
                    description: host_enabled enables or disables the host submodule.
                  allow_messages:
                    type: array
                    items:
                      type: string
                    description: >-
                      allow_messages defines a list of sdk message typeURLs
                      allowed to be executed on a host chain.
            title: MsgUpdateParams defines the payload for Msg/UpdateParams
      tags:
        - Msg
  /ibc.applications.transfer.v1.Msg/Transfer:
    post:
      summary: Transfer defines a rpc handler method for MsgTransfer.
      operationId: IbcApplicationsTransferV1Msg_Transfer
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sequence:
                type: string
                format: uint64
                title: sequence number of the transfer packet sent
            description: MsgTransferResponse defines the Msg/Transfer response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              source_port:
                type: string
                title: the port on which the packet will be sent
              source_channel:
                type: string
                title: the channel by which the packet will be sent
              token:
                title: the tokens to be transferred
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              sender:
                type: string
                title: the sender address
              receiver:
                type: string
                title: the recipient address on the destination chain
              timeout_height:
                description: |-
                  Timeout height relative to the current block height.
                  The timeout is disabled when set to 0.
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              timeout_timestamp:
                type: string
                format: uint64
                description: |-
                  Timeout timestamp in absolute nanoseconds since unix epoch.
                  The timeout is disabled when set to 0.
              memo:
                type: string
                title: optional memo
            title: >-
              MsgTransfer defines a msg to transfer fungible tokens (i.e Coins)
              between

              ICS20 enabled chains. See ICS Spec here:

              https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
      tags:
        - Msg
  /ibc.applications.transfer.v1.Msg/UpdateParams:
    post:
      summary: UpdateParams defines a rpc handler for MsgUpdateParams.
      operationId: IbcApplicationsTransferV1Msg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: MsgUpdateParams is the Msg/UpdateParams request type.
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: |-
                  params defines the transfer parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  send_enabled:
                    type: boolean
                    description: >-
                      send_enabled enables or disables all cross-chain token
                      transfers from this

                      chain.
                  receive_enabled:
                    type: boolean
                    description: >-
                      receive_enabled enables or disables all cross-chain token
                      transfers to this

                      chain.
            description: MsgUpdateParams is the Msg/UpdateParams request type.
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/Acknowledgement:
    post:
      summary: Acknowledgement defines a rpc handler method for MsgAcknowledgement.
      operationId: IbcCoreChannelV1Msg_Acknowledgement
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              result:
                type: string
                enum:
                  - RESPONSE_RESULT_TYPE_UNSPECIFIED
                  - RESPONSE_RESULT_TYPE_NOOP
                  - RESPONSE_RESULT_TYPE_SUCCESS
                default: RESPONSE_RESULT_TYPE_UNSPECIFIED
                description: >-
                  - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value
                  enumeration
                   - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
                   - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
                title: >-
                  ResponseResultType defines the possible outcomes of the
                  execution of a message
            description: >-
              MsgAcknowledgementResponse defines the Msg/Acknowledgement
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              packet:
                type: object
                properties:
                  sequence:
                    type: string
                    format: uint64
                    description: >-
                      number corresponds to the order of sends and receives,
                      where a Packet

                      with an earlier sequence number must be sent and received
                      before a Packet

                      with a later sequence number.
                  source_port:
                    type: string
                    description: identifies the port on the sending chain.
                  source_channel:
                    type: string
                    description: identifies the channel end on the sending chain.
                  destination_port:
                    type: string
                    description: identifies the port on the receiving chain.
                  destination_channel:
                    type: string
                    description: identifies the channel end on the receiving chain.
                  data:
                    type: string
                    format: byte
                    title: >-
                      actual opaque bytes transferred directly to the
                      application module
                  timeout_height:
                    title: block height after which the packet times out
                    type: object
                    properties:
                      revision_number:
                        type: string
                        format: uint64
                        title: the revision that the client is currently on
                      revision_height:
                        type: string
                        format: uint64
                        title: the height within the given revision
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                  timeout_timestamp:
                    type: string
                    format: uint64
                    title: >-
                      block timestamp (in nanoseconds) after which the packet
                      times out
                title: >-
                  Packet defines a type that carries data across different
                  chains through IBC
              acknowledgement:
                type: string
                format: byte
              proof_acked:
                type: string
                format: byte
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
            title: MsgAcknowledgement receives incoming IBC acknowledgement
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/ChannelCloseConfirm:
    post:
      summary: |-
        ChannelCloseConfirm defines a rpc handler method for
        MsgChannelCloseConfirm.
      operationId: IbcCoreChannelV1Msg_ChannelCloseConfirm
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm
              response

              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
            to acknowledge the change of channel state to CLOSED on Chain A.
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
              channel_id:
                type: string
              proof_init:
                type: string
                format: byte
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
            description: |-
              MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
              to acknowledge the change of channel state to CLOSED on Chain A.
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/ChannelCloseInit:
    post:
      summary: ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
      operationId: IbcCoreChannelV1Msg_ChannelCloseInit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
            to close a channel with Chain B.
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
              channel_id:
                type: string
              signer:
                type: string
            description: |-
              MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
              to close a channel with Chain B.
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/ChannelOpenAck:
    post:
      summary: ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
      operationId: IbcCoreChannelV1Msg_ChannelOpenAck
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to
            acknowledge

            the change of channel state to TRYOPEN on Chain B.
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
              channel_id:
                type: string
              counterparty_channel_id:
                type: string
              counterparty_version:
                type: string
              proof_try:
                type: string
                format: byte
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
            description: >-
              MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to
              acknowledge

              the change of channel state to TRYOPEN on Chain B.
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/ChannelOpenConfirm:
    post:
      summary: >-
        ChannelOpenConfirm defines a rpc handler method for
        MsgChannelOpenConfirm.
      operationId: IbcCoreChannelV1Msg_ChannelOpenConfirm
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm
              response

              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
            acknowledge the change of channel state to OPEN on Chain A.
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
              channel_id:
                type: string
              proof_ack:
                type: string
                format: byte
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
            description: >-
              MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B
              to

              acknowledge the change of channel state to OPEN on Chain A.
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/ChannelOpenInit:
    post:
      summary: ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
      operationId: IbcCoreChannelV1Msg_ChannelOpenInit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channel_id:
                type: string
              version:
                type: string
            description: >-
              MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgChannelOpenInit defines an sdk.Msg to initialize a channel
            handshake. It

            is called by a relayer on Chain A.
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
              channel:
                type: object
                properties:
                  state:
                    title: current state of the channel end
                    type: string
                    enum:
                      - STATE_UNINITIALIZED_UNSPECIFIED
                      - STATE_INIT
                      - STATE_TRYOPEN
                      - STATE_OPEN
                      - STATE_CLOSED
                    default: STATE_UNINITIALIZED_UNSPECIFIED
                    description: >-
                      State defines if a channel is in one of the following
                      states:

                      CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                       - STATE_INIT: A channel has just started the opening handshake.
                       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                       - STATE_OPEN: A channel has completed the handshake. Open channels are
                      ready to send and receive packets.
                       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                      packets.
                  ordering:
                    title: whether the channel is ordered or unordered
                    type: string
                    enum:
                      - ORDER_NONE_UNSPECIFIED
                      - ORDER_UNORDERED
                      - ORDER_ORDERED
                    default: ORDER_NONE_UNSPECIFIED
                    description: |-
                      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                      which they were sent.
                       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                  counterparty:
                    title: counterparty channel end
                    type: object
                    properties:
                      port_id:
                        type: string
                        description: >-
                          port on the counterparty chain which owns the other
                          end of the channel.
                      channel_id:
                        type: string
                        title: channel end on the counterparty chain
                  connection_hops:
                    type: array
                    items:
                      type: string
                    title: >-
                      list of connection identifiers, in order, along which
                      packets sent on

                      this channel will travel
                  version:
                    type: string
                    title: >-
                      opaque channel version, which is agreed upon during the
                      handshake
                description: >-
                  Channel defines pipeline for exactly-once packet delivery
                  between specific

                  modules on separate blockchains, which has at least one end
                  capable of

                  sending packets and one end capable of receiving packets.
              signer:
                type: string
            description: >-
              MsgChannelOpenInit defines an sdk.Msg to initialize a channel
              handshake. It

              is called by a relayer on Chain A.
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/ChannelOpenTry:
    post:
      summary: ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
      operationId: IbcCoreChannelV1Msg_ChannelOpenTry
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              version:
                type: string
              channel_id:
                type: string
            description: >-
              MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgChannelOpenInit defines a msg sent by a Relayer to try to open a
            channel

            on Chain B. The version field within the Channel field has been
            deprecated. Its

            value will be ignored by core IBC.
          in: body
          required: true
          schema:
            type: object
            properties:
              port_id:
                type: string
              previous_channel_id:
                type: string
                description: >-
                  Deprecated: this field is unused. Crossing hello's are no
                  longer supported in core IBC.
              channel:
                type: object
                properties:
                  state:
                    title: current state of the channel end
                    type: string
                    enum:
                      - STATE_UNINITIALIZED_UNSPECIFIED
                      - STATE_INIT
                      - STATE_TRYOPEN
                      - STATE_OPEN
                      - STATE_CLOSED
                    default: STATE_UNINITIALIZED_UNSPECIFIED
                    description: >-
                      State defines if a channel is in one of the following
                      states:

                      CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                       - STATE_INIT: A channel has just started the opening handshake.
                       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                       - STATE_OPEN: A channel has completed the handshake. Open channels are
                      ready to send and receive packets.
                       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                      packets.
                  ordering:
                    title: whether the channel is ordered or unordered
                    type: string
                    enum:
                      - ORDER_NONE_UNSPECIFIED
                      - ORDER_UNORDERED
                      - ORDER_ORDERED
                    default: ORDER_NONE_UNSPECIFIED
                    description: |-
                      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                      which they were sent.
                       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                  counterparty:
                    title: counterparty channel end
                    type: object
                    properties:
                      port_id:
                        type: string
                        description: >-
                          port on the counterparty chain which owns the other
                          end of the channel.
                      channel_id:
                        type: string
                        title: channel end on the counterparty chain
                  connection_hops:
                    type: array
                    items:
                      type: string
                    title: >-
                      list of connection identifiers, in order, along which
                      packets sent on

                      this channel will travel
                  version:
                    type: string
                    title: >-
                      opaque channel version, which is agreed upon during the
                      handshake
                description: >-
                  Channel defines pipeline for exactly-once packet delivery
                  between specific

                  modules on separate blockchains, which has at least one end
                  capable of

                  sending packets and one end capable of receiving packets.
              counterparty_version:
                type: string
              proof_init:
                type: string
                format: byte
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
            description: >-
              MsgChannelOpenInit defines a msg sent by a Relayer to try to open
              a channel

              on Chain B. The version field within the Channel field has been
              deprecated. Its

              value will be ignored by core IBC.
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/RecvPacket:
    post:
      summary: RecvPacket defines a rpc handler method for MsgRecvPacket.
      operationId: IbcCoreChannelV1Msg_RecvPacket
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              result:
                type: string
                enum:
                  - RESPONSE_RESULT_TYPE_UNSPECIFIED
                  - RESPONSE_RESULT_TYPE_NOOP
                  - RESPONSE_RESULT_TYPE_SUCCESS
                default: RESPONSE_RESULT_TYPE_UNSPECIFIED
                description: >-
                  - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value
                  enumeration
                   - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
                   - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
                title: >-
                  ResponseResultType defines the possible outcomes of the
                  execution of a message
            description: MsgRecvPacketResponse defines the Msg/RecvPacket response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              packet:
                type: object
                properties:
                  sequence:
                    type: string
                    format: uint64
                    description: >-
                      number corresponds to the order of sends and receives,
                      where a Packet

                      with an earlier sequence number must be sent and received
                      before a Packet

                      with a later sequence number.
                  source_port:
                    type: string
                    description: identifies the port on the sending chain.
                  source_channel:
                    type: string
                    description: identifies the channel end on the sending chain.
                  destination_port:
                    type: string
                    description: identifies the port on the receiving chain.
                  destination_channel:
                    type: string
                    description: identifies the channel end on the receiving chain.
                  data:
                    type: string
                    format: byte
                    title: >-
                      actual opaque bytes transferred directly to the
                      application module
                  timeout_height:
                    title: block height after which the packet times out
                    type: object
                    properties:
                      revision_number:
                        type: string
                        format: uint64
                        title: the revision that the client is currently on
                      revision_height:
                        type: string
                        format: uint64
                        title: the height within the given revision
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                  timeout_timestamp:
                    type: string
                    format: uint64
                    title: >-
                      block timestamp (in nanoseconds) after which the packet
                      times out
                title: >-
                  Packet defines a type that carries data across different
                  chains through IBC
              proof_commitment:
                type: string
                format: byte
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
            title: MsgRecvPacket receives incoming IBC packet
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/Timeout:
    post:
      summary: Timeout defines a rpc handler method for MsgTimeout.
      operationId: IbcCoreChannelV1Msg_Timeout
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              result:
                type: string
                enum:
                  - RESPONSE_RESULT_TYPE_UNSPECIFIED
                  - RESPONSE_RESULT_TYPE_NOOP
                  - RESPONSE_RESULT_TYPE_SUCCESS
                default: RESPONSE_RESULT_TYPE_UNSPECIFIED
                description: >-
                  - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value
                  enumeration
                   - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
                   - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
                title: >-
                  ResponseResultType defines the possible outcomes of the
                  execution of a message
            description: MsgTimeoutResponse defines the Msg/Timeout response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              packet:
                type: object
                properties:
                  sequence:
                    type: string
                    format: uint64
                    description: >-
                      number corresponds to the order of sends and receives,
                      where a Packet

                      with an earlier sequence number must be sent and received
                      before a Packet

                      with a later sequence number.
                  source_port:
                    type: string
                    description: identifies the port on the sending chain.
                  source_channel:
                    type: string
                    description: identifies the channel end on the sending chain.
                  destination_port:
                    type: string
                    description: identifies the port on the receiving chain.
                  destination_channel:
                    type: string
                    description: identifies the channel end on the receiving chain.
                  data:
                    type: string
                    format: byte
                    title: >-
                      actual opaque bytes transferred directly to the
                      application module
                  timeout_height:
                    title: block height after which the packet times out
                    type: object
                    properties:
                      revision_number:
                        type: string
                        format: uint64
                        title: the revision that the client is currently on
                      revision_height:
                        type: string
                        format: uint64
                        title: the height within the given revision
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                  timeout_timestamp:
                    type: string
                    format: uint64
                    title: >-
                      block timestamp (in nanoseconds) after which the packet
                      times out
                title: >-
                  Packet defines a type that carries data across different
                  chains through IBC
              proof_unreceived:
                type: string
                format: byte
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              next_sequence_recv:
                type: string
                format: uint64
              signer:
                type: string
            title: MsgTimeout receives timed-out packet
      tags:
        - Msg
  /ibc.core.channel.v1.Msg/TimeoutOnClose:
    post:
      summary: TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
      operationId: IbcCoreChannelV1Msg_TimeoutOnClose
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              result:
                type: string
                enum:
                  - RESPONSE_RESULT_TYPE_UNSPECIFIED
                  - RESPONSE_RESULT_TYPE_NOOP
                  - RESPONSE_RESULT_TYPE_SUCCESS
                default: RESPONSE_RESULT_TYPE_UNSPECIFIED
                description: >-
                  - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value
                  enumeration
                   - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
                   - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
                title: >-
                  ResponseResultType defines the possible outcomes of the
                  execution of a message
            description: >-
              MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgTimeoutOnClose timed-out packet upon counterparty channel
            closure.
          in: body
          required: true
          schema:
            type: object
            properties:
              packet:
                type: object
                properties:
                  sequence:
                    type: string
                    format: uint64
                    description: >-
                      number corresponds to the order of sends and receives,
                      where a Packet

                      with an earlier sequence number must be sent and received
                      before a Packet

                      with a later sequence number.
                  source_port:
                    type: string
                    description: identifies the port on the sending chain.
                  source_channel:
                    type: string
                    description: identifies the channel end on the sending chain.
                  destination_port:
                    type: string
                    description: identifies the port on the receiving chain.
                  destination_channel:
                    type: string
                    description: identifies the channel end on the receiving chain.
                  data:
                    type: string
                    format: byte
                    title: >-
                      actual opaque bytes transferred directly to the
                      application module
                  timeout_height:
                    title: block height after which the packet times out
                    type: object
                    properties:
                      revision_number:
                        type: string
                        format: uint64
                        title: the revision that the client is currently on
                      revision_height:
                        type: string
                        format: uint64
                        title: the height within the given revision
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                  timeout_timestamp:
                    type: string
                    format: uint64
                    title: >-
                      block timestamp (in nanoseconds) after which the packet
                      times out
                title: >-
                  Packet defines a type that carries data across different
                  chains through IBC
              proof_unreceived:
                type: string
                format: byte
              proof_close:
                type: string
                format: byte
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              next_sequence_recv:
                type: string
                format: uint64
              signer:
                type: string
            description: >-
              MsgTimeoutOnClose timed-out packet upon counterparty channel
              closure.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/CreateClient:
    post:
      summary: CreateClient defines a rpc handler method for MsgCreateClient.
      operationId: IbcCoreClientV1Msg_CreateClient
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgCreateClientResponse defines the Msg/CreateClient response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              client_state:
                title: light client state
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              consensus_state:
                description: >-
                  consensus state associated with the client that corresponds to
                  a given

                  height.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
              signer:
                type: string
                title: signer address
            title: MsgCreateClient defines a message to create an IBC client
      tags:
        - Msg
  /ibc.core.client.v1.Msg/IBCSoftwareUpgrade:
    post:
      summary: >-
        IBCSoftwareUpgrade defines a rpc handler method for
        MsgIBCSoftwareUpgrade.
      operationId: IbcCoreClientV1Msg_IBCSoftwareUpgrade
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgIBCSoftwareUpgradeResponse defines the Msg/IBCSoftwareUpgrade
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              plan:
                type: object
                properties:
                  name:
                    type: string
                    description: >-
                      Sets the name for the upgrade. This name will be used by
                      the upgraded

                      version of the software to apply any special "on-upgrade"
                      commands during

                      the first BeginBlock method after the upgrade is applied.
                      It is also used

                      to detect whether a software version can handle a given
                      upgrade. If no

                      upgrade handler with this name has been set in the
                      software, it will be

                      assumed that the software is out-of-date when the upgrade
                      Time or Height is

                      reached and the software will exit.
                  time:
                    type: string
                    format: date-time
                    description: >-
                      Deprecated: Time based upgrades have been deprecated. Time
                      based upgrade logic

                      has been removed from the SDK.

                      If this field is not empty, an error will be thrown.
                  height:
                    type: string
                    format: int64
                    description: The height at which the upgrade must be performed.
                  info:
                    type: string
                    title: >-
                      Any application specific upgrade info to be included
                      on-chain

                      such as a git commit that validators could automatically
                      upgrade to
                  upgraded_client_state:
                    description: >-
                      Deprecated: UpgradedClientState field has been deprecated.
                      IBC upgrade logic has been

                      moved to the IBC module in the sub module 02-client.

                      If this field is not empty, an error will be thrown.
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com. As of May 2023, there are no
                          widely used type server

                          implementations and no plans to implement one.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                description: >-
                  Plan specifies information about a planned upgrade and when it
                  should occur.
              upgraded_client_state:
                description: >-
                  An UpgradedClientState must be provided to perform an IBC
                  breaking upgrade.

                  This will make the chain commit to the correct upgraded (self)
                  client state

                  before the upgrade occurs, so that connecting chains can
                  verify that the

                  new upgraded client is valid by verifying a proof on the
                  previous version

                  of the chain. This will allow IBC connections to persist
                  smoothly across

                  planned chain upgrades. Correspondingly, the
                  UpgradedClientState field has been

                  deprecated in the Cosmos SDK to allow for this logic to exist
                  solely in

                  the 02-client module.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
              signer:
                type: string
                title: signer address
            title: >-
              MsgIBCSoftwareUpgrade defines the message used to schedule an
              upgrade of an IBC client using a v1 governance proposal
      tags:
        - Msg
  /ibc.core.client.v1.Msg/RecoverClient:
    post:
      summary: RecoverClient defines a rpc handler method for MsgRecoverClient.
      operationId: IbcCoreClientV1Msg_RecoverClient
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgRecoverClientResponse defines the Msg/RecoverClient response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgRecoverClient defines the message used to recover a frozen or
            expired client.
          in: body
          required: true
          schema:
            type: object
            properties:
              subject_client_id:
                type: string
                title: >-
                  the client identifier for the client to be updated if the
                  proposal passes
              substitute_client_id:
                type: string
                title: >-
                  the substitute client identifier for the client which will
                  replace the subject

                  client
              signer:
                type: string
                title: signer address
            description: >-
              MsgRecoverClient defines the message used to recover a frozen or
              expired client.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/SubmitMisbehaviour:
    post:
      summary: >-
        SubmitMisbehaviour defines a rpc handler method for
        MsgSubmitMisbehaviour.
      operationId: IbcCoreClientV1Msg_SubmitMisbehaviour
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgSubmitMisbehaviourResponse defines the Msg/SubmitMisbehaviour
              response

              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgSubmitMisbehaviour defines an sdk.Msg type that submits Evidence
            for

            light client misbehaviour.

            This message has been deprecated. Use MsgUpdateClient instead.
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
                title: client unique identifier
              misbehaviour:
                title: misbehaviour used for freezing the light client
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              signer:
                type: string
                title: signer address
            description: >-
              MsgSubmitMisbehaviour defines an sdk.Msg type that submits
              Evidence for

              light client misbehaviour.

              This message has been deprecated. Use MsgUpdateClient instead.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/UpdateClient:
    post:
      summary: UpdateClient defines a rpc handler method for MsgUpdateClient.
      operationId: IbcCoreClientV1Msg_UpdateClient
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateClientResponse defines the Msg/UpdateClient response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgUpdateClient defines an sdk.Msg to update a IBC client state
            using

            the given client message.
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
                title: client unique identifier
              client_message:
                title: client message to update the light client
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              signer:
                type: string
                title: signer address
            description: >-
              MsgUpdateClient defines an sdk.Msg to update a IBC client state
              using

              the given client message.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/UpdateClientParams:
    post:
      summary: UpdateClientParams defines a rpc handler method for MsgUpdateParams.
      operationId: IbcCoreClientV1Msg_UpdateClientParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgUpdateParamsResponse defines the MsgUpdateParams response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgUpdateParams defines the sdk.Msg type to update the client
            parameters.
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: |-
                  params defines the client parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  allowed_clients:
                    type: array
                    items:
                      type: string
                    description: >-
                      allowed_clients defines the list of allowed client state
                      types which can be created

                      and interacted with. If a client type is removed from the
                      allowed clients list, usage

                      of this client will be disabled until it is added again to
                      the list.
            description: >-
              MsgUpdateParams defines the sdk.Msg type to update the client
              parameters.
      tags:
        - Msg
  /ibc.core.client.v1.Msg/UpgradeClient:
    post:
      summary: UpgradeClient defines a rpc handler method for MsgUpgradeClient.
      operationId: IbcCoreClientV1Msg_UpgradeClient
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpgradeClientResponse defines the Msg/UpgradeClient response
              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
                title: client unique identifier
              client_state:
                title: upgraded client state
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              consensus_state:
                title: >-
                  upgraded consensus state, only contains enough information to
                  serve as a

                  basis of trust in update logic
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              proof_upgrade_client:
                type: string
                format: byte
                title: proof that old chain committed to new client
              proof_upgrade_consensus_state:
                type: string
                format: byte
                title: proof that old chain committed to new consensus state
              signer:
                type: string
                title: signer address
            title: >-
              MsgUpgradeClient defines an sdk.Msg to upgrade an IBC client to a
              new client

              state
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/ConnectionOpenAck:
    post:
      summary: ConnectionOpenAck defines a rpc handler method for MsgConnectionOpenAck.
      operationId: IbcCoreConnectionV1Msg_ConnectionOpenAck
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to
            acknowledge the change of connection state to TRYOPEN on Chain B.
          in: body
          required: true
          schema:
            type: object
            properties:
              connection_id:
                type: string
              counterparty_connection_id:
                type: string
              version:
                type: object
                properties:
                  identifier:
                    type: string
                    title: unique version identifier
                  features:
                    type: array
                    items:
                      type: string
                    title: list of features compatible with the specified identifier
                description: >-
                  Version defines the versioning scheme used to negotiate the
                  IBC verison in

                  the connection handshake.
              client_state:
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              proof_try:
                type: string
                format: byte
                title: >-
                  proof of the initialization the connection on Chain B:
                  `UNITIALIZED ->

                  TRYOPEN`
              proof_client:
                type: string
                format: byte
                title: proof of client state included in message
              proof_consensus:
                type: string
                format: byte
                title: proof of client consensus state
              consensus_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
              host_consensus_state_proof:
                type: string
                format: byte
                title: >-
                  optional proof data for host state machines that are unable to
                  introspect their own consensus state
            description: |-
              MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to
              acknowledge the change of connection state to TRYOPEN on Chain B.
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/ConnectionOpenConfirm:
    post:
      summary: |-
        ConnectionOpenConfirm defines a rpc handler method for
        MsgConnectionOpenConfirm.
      operationId: IbcCoreConnectionV1Msg_ConnectionOpenConfirm
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgConnectionOpenConfirmResponse defines the
              Msg/ConnectionOpenConfirm

              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain B
            to

            acknowledge the change of connection state to OPEN on Chain A.
          in: body
          required: true
          schema:
            type: object
            properties:
              connection_id:
                type: string
              proof_ack:
                type: string
                format: byte
                title: >-
                  proof for the change of the connection state on Chain A: `INIT
                  -> OPEN`
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
            description: >-
              MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain
              B to

              acknowledge the change of connection state to OPEN on Chain A.
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/ConnectionOpenInit:
    post:
      summary: >-
        ConnectionOpenInit defines a rpc handler method for
        MsgConnectionOpenInit.
      operationId: IbcCoreConnectionV1Msg_ConnectionOpenInit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit
              response

              type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgConnectionOpenInit defines the msg sent by an account on Chain A
            to

            initialize a connection with Chain B.
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
              counterparty:
                type: object
                properties:
                  client_id:
                    type: string
                    description: >-
                      identifies the client on the counterparty chain associated
                      with a given

                      connection.
                  connection_id:
                    type: string
                    description: >-
                      identifies the connection end on the counterparty chain
                      associated with a

                      given connection.
                  prefix:
                    description: commitment merkle prefix of the counterparty chain.
                    type: object
                    properties:
                      key_prefix:
                        type: string
                        format: byte
                    title: >-
                      MerklePrefix is merkle path prefixed to the key.

                      The constructed key from the Path and the key will be
                      append(Path.KeyPath,

                      append(Path.KeyPrefix, key...))
                description: >-
                  Counterparty defines the counterparty chain associated with a
                  connection end.
              version:
                type: object
                properties:
                  identifier:
                    type: string
                    title: unique version identifier
                  features:
                    type: array
                    items:
                      type: string
                    title: list of features compatible with the specified identifier
                description: >-
                  Version defines the versioning scheme used to negotiate the
                  IBC verison in

                  the connection handshake.
              delay_period:
                type: string
                format: uint64
              signer:
                type: string
            description: >-
              MsgConnectionOpenInit defines the msg sent by an account on Chain
              A to

              initialize a connection with Chain B.
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/ConnectionOpenTry:
    post:
      summary: ConnectionOpenTry defines a rpc handler method for MsgConnectionOpenTry.
      operationId: IbcCoreConnectionV1Msg_ConnectionOpenTry
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry
              response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgConnectionOpenTry defines a msg sent by a Relayer to try to open
            a

            connection on Chain B.
          in: body
          required: true
          schema:
            type: object
            properties:
              client_id:
                type: string
              previous_connection_id:
                type: string
                description: >-
                  Deprecated: this field is unused. Crossing hellos are no
                  longer supported in core IBC.
              client_state:
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              counterparty:
                type: object
                properties:
                  client_id:
                    type: string
                    description: >-
                      identifies the client on the counterparty chain associated
                      with a given

                      connection.
                  connection_id:
                    type: string
                    description: >-
                      identifies the connection end on the counterparty chain
                      associated with a

                      given connection.
                  prefix:
                    description: commitment merkle prefix of the counterparty chain.
                    type: object
                    properties:
                      key_prefix:
                        type: string
                        format: byte
                    title: >-
                      MerklePrefix is merkle path prefixed to the key.

                      The constructed key from the Path and the key will be
                      append(Path.KeyPath,

                      append(Path.KeyPrefix, key...))
                description: >-
                  Counterparty defines the counterparty chain associated with a
                  connection end.
              delay_period:
                type: string
                format: uint64
              counterparty_versions:
                type: array
                items:
                  type: object
                  properties:
                    identifier:
                      type: string
                      title: unique version identifier
                    features:
                      type: array
                      items:
                        type: string
                      title: >-
                        list of features compatible with the specified
                        identifier
                  description: >-
                    Version defines the versioning scheme used to negotiate the
                    IBC verison in

                    the connection handshake.
              proof_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              proof_init:
                type: string
                format: byte
                title: >-
                  proof of the initialization the connection on Chain A:
                  `UNITIALIZED ->

                  INIT`
              proof_client:
                type: string
                format: byte
                title: proof of client state included in message
              proof_consensus:
                type: string
                format: byte
                title: proof of client consensus state
              consensus_height:
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                title: >-
                  Height is a monotonically increasing data type

                  that can be compared against another Height for the purposes
                  of updating and

                  freezing clients
              signer:
                type: string
              host_consensus_state_proof:
                type: string
                format: byte
                title: >-
                  optional proof data for host state machines that are unable to
                  introspect their own consensus state
            description: >-
              MsgConnectionOpenTry defines a msg sent by a Relayer to try to
              open a

              connection on Chain B.
      tags:
        - Msg
  /ibc.core.connection.v1.Msg/UpdateConnectionParams:
    post:
      summary: |-
        UpdateConnectionParams defines a rpc handler method for
        MsgUpdateParams.
      operationId: IbcCoreConnectionV1Msg_UpdateConnectionParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: MsgUpdateParamsResponse defines the MsgUpdateParams response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            MsgUpdateParams defines the sdk.Msg type to update the connection
            parameters.
          in: body
          required: true
          schema:
            type: object
            properties:
              signer:
                type: string
                title: signer address
              params:
                description: |-
                  params defines the connection parameters to update.

                  NOTE: All parameters must be supplied.
                type: object
                properties:
                  max_expected_time_per_block:
                    type: string
                    format: uint64
                    description: >-
                      maximum expected time per block (in nanoseconds), used to
                      enforce block delay. This parameter should reflect the

                      largest amount of time that the chain might reasonably
                      take to produce the next block under normal operating

                      conditions. A safe choice is 3-5x the expected time per
                      block.
            description: >-
              MsgUpdateParams defines the sdk.Msg type to update the connection
              parameters.
      tags:
        - Msg
  /warden.intent.Msg/ApproveAction:
    post:
      summary: Add an approval to an existing Action.
      operationId: WardenIntentMsg_ApproveAction
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              status:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              creator:
                type: string
              action_type:
                type: string
              action_id:
                type: string
                format: uint64
              intent_payload:
                description: >-
                  Optional payload input for the intent. This is "any" as it
                  depends on the

                  type of the intent linked to the action being approved.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
      tags:
        - Msg
  /warden.intent.Msg/NewIntent:
    post:
      summary: Create a new intent.
      operationId: WardenIntentMsg_NewIntent
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              id:
                type: string
                format: uint64
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              creator:
                type: string
              name:
                type: string
              intent:
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
      tags:
        - Msg
  /warden.intent.Msg/RevokeAction:
    post:
      summary: Revoke an existing Action while in pending state.
      operationId: WardenIntentMsg_RevokeAction
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              creator:
                type: string
              action_type:
                type: string
              action_id:
                type: string
                format: uint64
      tags:
        - Msg
  /warden.intent.Msg/UpdateParams:
    post:
      summary: |-
        UpdateParams defines a (governance) operation for updating the module
        parameters. The authority defaults to the x/gov module account.
      operationId: WardenIntentMsg_UpdateParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            description: >-
              MsgUpdateParamsResponse defines the response structure for
              executing a

              MsgUpdateParams message.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: MsgUpdateParams is the Msg/UpdateParams request type.
          in: body
          required: true
          schema:
            type: object
            properties:
              authority:
                type: string
                description: >-
                  authority is the address that controls the module (defaults to
                  x/gov unless overwritten).
              params:
                description: 'NOTE: All parameters must be supplied.'
                type: object
            description: MsgUpdateParams is the Msg/UpdateParams request type.
      tags:
        - Msg
definitions:
  cosmos.auth.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/auth parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          max_memo_characters:
            type: string
            format: uint64
          tx_sig_limit:
            type: string
            format: uint64
          tx_size_cost_per_byte:
            type: string
            format: uint64
          sig_verify_cost_ed25519:
            type: string
            format: uint64
          sig_verify_cost_secp256k1:
            type: string
            format: uint64
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.auth.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.auth.v1beta1.Params:
    type: object
    properties:
      max_memo_characters:
        type: string
        format: uint64
      tx_sig_limit:
        type: string
        format: uint64
      tx_size_cost_per_byte:
        type: string
        format: uint64
      sig_verify_cost_ed25519:
        type: string
        format: uint64
      sig_verify_cost_secp256k1:
        type: string
        format: uint64
    description: Params defines the parameters for the auth module.
  google.protobuf.Any:
    type: object
    properties:
      '@type':
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com. As of May 2023, there are no widely used type
          server

          implementations and no plans to implement one.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
    additionalProperties: {}
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".


      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  google.rpc.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com. As of May 2023, there are no widely used
                type server

                implementations and no plans to implement one.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  cosmos.authz.v1beta1.Grant:
    type: object
    properties:
      authorization:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      expiration:
        type: string
        format: date-time
        title: >-
          time when the grant will expire and will be pruned. If null, then the
          grant

          doesn't have a time expiration (other conditions  in `authorization`

          may apply to invalidate the grant)
    description: |-
      Grant gives permissions to execute
      the provide method with expiration time.
  cosmos.authz.v1beta1.MsgExec:
    type: object
    properties:
      grantee:
        type: string
      msgs:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com. As of May 2023, there are no widely used
                type server

                implementations and no plans to implement one.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: >-
          Execute Msg.

          The x/authz will try to find a grant matching (msg.signers[0],
          grantee, MsgTypeURL(msg))

          triple and validate it.
    description: |-
      MsgExec attempts to execute the provided messages using
      authorizations granted to the grantee. Each message should have only
      one signer corresponding to the granter of the authorization.
  cosmos.authz.v1beta1.MsgExecResponse:
    type: object
    properties:
      results:
        type: array
        items:
          type: string
          format: byte
    description: MsgExecResponse defines the Msg/MsgExecResponse response type.
  cosmos.authz.v1beta1.MsgGrant:
    type: object
    properties:
      granter:
        type: string
      grantee:
        type: string
      grant:
        type: object
        properties:
          authorization:
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com. As of May 2023, there are no widely used
                  type server

                  implementations and no plans to implement one.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          expiration:
            type: string
            format: date-time
            title: >-
              time when the grant will expire and will be pruned. If null, then
              the grant

              doesn't have a time expiration (other conditions  in
              `authorization`

              may apply to invalidate the grant)
        description: |-
          Grant gives permissions to execute
          the provide method with expiration time.
    description: >-
      MsgGrant is a request type for Grant method. It declares authorization to
      the grantee

      on behalf of the granter with the provided expiration time.
  cosmos.authz.v1beta1.MsgGrantResponse:
    type: object
    description: MsgGrantResponse defines the Msg/MsgGrant response type.
  cosmos.authz.v1beta1.MsgRevoke:
    type: object
    properties:
      granter:
        type: string
      grantee:
        type: string
      msg_type_url:
        type: string
    description: |-
      MsgRevoke revokes any authorization with the provided sdk.Msg type on the
      granter's account with that has been granted to the grantee.
  cosmos.authz.v1beta1.MsgRevokeResponse:
    type: object
    description: MsgRevokeResponse defines the Msg/MsgRevokeResponse response type.
  cosmos.bank.v1beta1.Input:
    type: object
    properties:
      address:
        type: string
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: Input models transaction input.
  cosmos.bank.v1beta1.MsgMultiSend:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          description: Input models transaction input.
        description: >-
          Inputs, despite being `repeated`, only allows one sender input. This
          is

          checked in MsgMultiSend's ValidateBasic.
      outputs:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          description: Output models transaction outputs.
    description: MsgMultiSend represents an arbitrary multi-in, multi-out send message.
  cosmos.bank.v1beta1.MsgMultiSendResponse:
    type: object
    description: MsgMultiSendResponse defines the Msg/MultiSend response type.
  cosmos.bank.v1beta1.MsgSend:
    type: object
    properties:
      from_address:
        type: string
      to_address:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: MsgSend represents a message to send coins from one account to another.
  cosmos.bank.v1beta1.MsgSendResponse:
    type: object
    description: MsgSendResponse defines the Msg/Send response type.
  cosmos.bank.v1beta1.MsgSetSendEnabled:
    type: object
    properties:
      authority:
        type: string
        description: authority is the address that controls the module.
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
        description: send_enabled is the list of entries to add or update.
      use_default_for:
        type: array
        items:
          type: string
        description: >-
          use_default_for is a list of denoms that should use the
          params.default_send_enabled value.

          Denoms listed here will have their SendEnabled entries deleted.

          If a denom is included that doesn't have a SendEnabled entry,

          it will be ignored.
    description: |-
      MsgSetSendEnabled is the Msg/SetSendEnabled request type.

      Only entries to add/update/delete need to be included.
      Existing SendEnabled entries that are not included in this
      message are left unchanged.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.MsgSetSendEnabledResponse:
    type: object
    description: |-
      MsgSetSendEnabledResponse defines the Msg/SetSendEnabled response type.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/bank parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          send_enabled:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                enabled:
                  type: boolean
              description: >-
                SendEnabled maps coin denom to a send_enabled status (whether a
                denom is

                sendable).
            description: >-
              Deprecated: Use of SendEnabled in params is deprecated.

              For genesis, use the newly added send_enabled field in the genesis
              object.

              Storage, lookup, and manipulation of this information is now in
              the keeper.


              As of cosmos-sdk 0.47, this only exists for backwards
              compatibility of genesis files.
          default_send_enabled:
            type: boolean
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.bank.v1beta1.Output:
    type: object
    properties:
      address:
        type: string
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: Output models transaction outputs.
  cosmos.bank.v1beta1.Params:
    type: object
    properties:
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
        description: >-
          Deprecated: Use of SendEnabled in params is deprecated.

          For genesis, use the newly added send_enabled field in the genesis
          object.

          Storage, lookup, and manipulation of this information is now in the
          keeper.


          As of cosmos-sdk 0.47, this only exists for backwards compatibility of
          genesis files.
      default_send_enabled:
        type: boolean
    description: Params defines the parameters for the bank module.
  cosmos.bank.v1beta1.SendEnabled:
    type: object
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    description: |-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  cosmos.base.node.v1beta1.ConfigResponse:
    type: object
    properties:
      minimum_gas_price:
        type: string
      pruning_keep_recent:
        type: string
      pruning_interval:
        type: string
      halt_height:
        type: string
        format: uint64
    description: ConfigResponse defines the response structure for the Config gRPC query.
  cosmos.base.node.v1beta1.StatusResponse:
    type: object
    properties:
      earliest_store_height:
        type: string
        format: uint64
        title: earliest block height available in the store
      height:
        type: string
        format: uint64
        title: current block height
      timestamp:
        type: string
        format: date-time
        title: block height timestamp
      app_hash:
        type: string
        format: byte
        title: app hash of the current block
      validator_hash:
        type: string
        format: byte
        title: validator hash provided by the consensus header
    description: StateResponse defines the response structure for the status of a node.
  cosmos.consensus.v1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      block:
        description: |-
          params defines the x/consensus parameters to update.
          VersionsParams is not included in this Msg because it is tracked
          separarately in x/upgrade.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          max_bytes:
            type: string
            format: int64
            title: |-
              Max block size, in bytes.
              Note: must be greater than 0
          max_gas:
            type: string
            format: int64
            title: |-
              Max gas per block.
              Note: must be greater or equal to -1
      evidence:
        type: object
        properties:
          max_age_num_blocks:
            type: string
            format: int64
            description: >-
              Max age of evidence, in blocks.


              The basic formula for calculating this is: MaxAgeDuration /
              {average block

              time}.
          max_age_duration:
            type: string
            description: >-
              Max age of evidence, in time.


              It should correspond with an app's "unbonding period" or other
              similar

              mechanism for handling [Nothing-At-Stake

              attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
          max_bytes:
            type: string
            format: int64
            title: >-
              This sets the maximum size of total evidence in bytes that can be
              committed in a single block.

              and should fall comfortably under the max block bytes.

              Default is 1048576 or 1MB
        description: EvidenceParams determine how we handle evidence of malfeasance.
      validator:
        type: object
        properties:
          pub_key_types:
            type: array
            items:
              type: string
        description: |-
          ValidatorParams restrict the public key types validators can use.
          NOTE: uses ABCI pubkey naming, not Amino names.
      abci:
        title: 'Since: cosmos-sdk 0.50'
        type: object
        properties:
          vote_extensions_enable_height:
            type: string
            format: int64
            description: >-
              vote_extensions_enable_height configures the first height during
              which

              vote extensions will be enabled. During this specified height, and
              for all

              subsequent heights, precommit messages that do not contain valid
              extension data

              will be considered invalid. Prior to this height, vote extensions
              will not

              be used or accepted by validators on the network.


              Once enabled, vote extensions will be created by the application
              in ExtendVote,

              passed to the application for validation in VerifyVoteExtension
              and given

              to the application to use when proposing a block during
              PrepareProposal.
        description: >-
          ABCIParams configure functionality specific to the Application
          Blockchain Interface.
    description: MsgUpdateParams is the Msg/UpdateParams request type.
  cosmos.consensus.v1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.
  tendermint.types.ABCIParams:
    type: object
    properties:
      vote_extensions_enable_height:
        type: string
        format: int64
        description: >-
          vote_extensions_enable_height configures the first height during which

          vote extensions will be enabled. During this specified height, and for
          all

          subsequent heights, precommit messages that do not contain valid
          extension data

          will be considered invalid. Prior to this height, vote extensions will
          not

          be used or accepted by validators on the network.


          Once enabled, vote extensions will be created by the application in
          ExtendVote,

          passed to the application for validation in VerifyVoteExtension and
          given

          to the application to use when proposing a block during
          PrepareProposal.
    description: >-
      ABCIParams configure functionality specific to the Application Blockchain
      Interface.
  tendermint.types.BlockParams:
    type: object
    properties:
      max_bytes:
        type: string
        format: int64
        title: |-
          Max block size, in bytes.
          Note: must be greater than 0
      max_gas:
        type: string
        format: int64
        title: |-
          Max gas per block.
          Note: must be greater or equal to -1
    description: BlockParams contains limits on the block size.
  tendermint.types.EvidenceParams:
    type: object
    properties:
      max_age_num_blocks:
        type: string
        format: int64
        description: >-
          Max age of evidence, in blocks.


          The basic formula for calculating this is: MaxAgeDuration / {average
          block

          time}.
      max_age_duration:
        type: string
        description: >-
          Max age of evidence, in time.


          It should correspond with an app's "unbonding period" or other similar

          mechanism for handling [Nothing-At-Stake

          attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
      max_bytes:
        type: string
        format: int64
        title: >-
          This sets the maximum size of total evidence in bytes that can be
          committed in a single block.

          and should fall comfortably under the max block bytes.

          Default is 1048576 or 1MB
    description: EvidenceParams determine how we handle evidence of malfeasance.
  tendermint.types.ValidatorParams:
    type: object
    properties:
      pub_key_types:
        type: array
        items:
          type: string
    description: |-
      ValidatorParams restrict the public key types validators can use.
      NOTE: uses ABCI pubkey naming, not Amino names.
  cosmos.crisis.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      constant_fee:
        description: constant_fee defines the x/crisis parameter.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.crisis.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.crisis.v1beta1.MsgVerifyInvariant:
    type: object
    properties:
      sender:
        type: string
        description: >-
          sender is the account address of private key to send coins to fee
          collector account.
      invariant_module_name:
        type: string
        description: name of the invariant module.
      invariant_route:
        type: string
        description: invariant_route is the msg's invariant route.
    description: MsgVerifyInvariant represents a message to verify a particular invariance.
  cosmos.crisis.v1beta1.MsgVerifyInvariantResponse:
    type: object
    description: MsgVerifyInvariantResponse defines the Msg/VerifyInvariant response type.
  cosmos.distribution.v1beta1.MsgCommunityPoolSpend:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      recipient:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: >-
      MsgCommunityPoolSpend defines a message for sending tokens from the
      community

      pool to another account. This message is typically executed via a
      governance

      proposal with the governance module being the executing authority.


      Since: cosmos-sdk 0.47
  cosmos.distribution.v1beta1.MsgCommunityPoolSpendResponse:
    type: object
    description: |-
      MsgCommunityPoolSpendResponse defines the response to executing a
      MsgCommunityPoolSpend message.

      Since: cosmos-sdk 0.47
  cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPool:
    type: object
    properties:
      depositor:
        type: string
      validator_address:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: |-
      DepositValidatorRewardsPool defines the request structure to provide
      additional rewards to delegators from a specific validator.

      Since: cosmos-sdk 0.50
  cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPoolResponse:
    type: object
    description: |-
      MsgDepositValidatorRewardsPoolResponse defines the response to executing a
      MsgDepositValidatorRewardsPool message.

      Since: cosmos-sdk 0.50
  cosmos.distribution.v1beta1.MsgFundCommunityPool:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      depositor:
        type: string
    description: |-
      MsgFundCommunityPool allows an account to directly
      fund the community pool.
  cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse:
    type: object
    description: >-
      MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response
      type.
  cosmos.distribution.v1beta1.MsgSetWithdrawAddress:
    type: object
    properties:
      delegator_address:
        type: string
      withdraw_address:
        type: string
    description: |-
      MsgSetWithdrawAddress sets the withdraw address for
      a delegator (or validator self-delegation).
  cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse:
    type: object
    description: |-
      MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response
      type.
  cosmos.distribution.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/distribution parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          community_tax:
            type: string
          base_proposer_reward:
            type: string
            description: >-
              Deprecated: The base_proposer_reward field is deprecated and is no
              longer used

              in the x/distribution module's reward mechanism.
          bonus_proposer_reward:
            type: string
            description: >-
              Deprecated: The bonus_proposer_reward field is deprecated and is
              no longer used

              in the x/distribution module's reward mechanism.
          withdraw_addr_enabled:
            type: boolean
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.distribution.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
    description: |-
      MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
      from a single validator.
  cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: 'Since: cosmos-sdk 0.46'
    description: |-
      MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward
      response type.
  cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission:
    type: object
    properties:
      validator_address:
        type: string
    description: >-
      MsgWithdrawValidatorCommission withdraws the full commission to the
      validator

      address.
  cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: 'Since: cosmos-sdk 0.46'
    description: |-
      MsgWithdrawValidatorCommissionResponse defines the
      Msg/WithdrawValidatorCommission response type.
  cosmos.distribution.v1beta1.Params:
    type: object
    properties:
      community_tax:
        type: string
      base_proposer_reward:
        type: string
        description: >-
          Deprecated: The base_proposer_reward field is deprecated and is no
          longer used

          in the x/distribution module's reward mechanism.
      bonus_proposer_reward:
        type: string
        description: >-
          Deprecated: The bonus_proposer_reward field is deprecated and is no
          longer used

          in the x/distribution module's reward mechanism.
      withdraw_addr_enabled:
        type: boolean
    description: Params defines the set of params for the distribution module.
  cosmos.evidence.v1beta1.MsgSubmitEvidence:
    type: object
    properties:
      submitter:
        type: string
        description: submitter is the signer account address of evidence.
      evidence:
        description: evidence defines the evidence of misbehavior.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: |-
      MsgSubmitEvidence represents a message that supports submitting arbitrary
      Evidence of misbehavior such as equivocation or counterfactual signing.
  cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse:
    type: object
    properties:
      hash:
        type: string
        format: byte
        description: hash defines the hash of the evidence.
    description: MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
  cosmos.feegrant.v1beta1.MsgGrantAllowance:
    type: object
    properties:
      granter:
        type: string
        description: >-
          granter is the address of the user granting an allowance of their
          funds.
      grantee:
        type: string
        description: >-
          grantee is the address of the user being granted an allowance of
          another user's funds.
      allowance:
        description: allowance can be any of basic, periodic, allowed fee allowance.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: |-
      MsgGrantAllowance adds permission for Grantee to spend up to Allowance
      of fees from the account of Granter.
  cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse:
    type: object
    description: >-
      MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response
      type.
  cosmos.feegrant.v1beta1.MsgPruneAllowances:
    type: object
    properties:
      pruner:
        type: string
        description: pruner is the address of the user pruning expired allowances.
    description: |-
      MsgPruneAllowances prunes expired fee allowances.

      Since cosmos-sdk 0.50
  cosmos.feegrant.v1beta1.MsgPruneAllowancesResponse:
    type: object
    description: >-
      MsgPruneAllowancesResponse defines the Msg/PruneAllowancesResponse
      response type.


      Since cosmos-sdk 0.50
  cosmos.feegrant.v1beta1.MsgRevokeAllowance:
    type: object
    properties:
      granter:
        type: string
        description: >-
          granter is the address of the user granting an allowance of their
          funds.
      grantee:
        type: string
        description: >-
          grantee is the address of the user being granted an allowance of
          another user's funds.
    description: MsgRevokeAllowance removes any existing Allowance from Granter to Grantee.
  cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse:
    type: object
    description: >-
      MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse
      response type.
  cosmos.gov.v1.MsgCancelProposal:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
      proposer:
        type: string
        description: proposer is the account address of the proposer.
    description: |-
      MsgCancelProposal is the Msg/CancelProposal request type.

      Since: cosmos-sdk 0.50
  cosmos.gov.v1.MsgCancelProposalResponse:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
      canceled_time:
        type: string
        format: date-time
        description: canceled_time is the time when proposal is canceled.
      canceled_height:
        type: string
        format: uint64
        description: >-
          canceled_height defines the block height at which the proposal is
          canceled.
    description: |-
      MsgCancelProposalResponse defines the response structure for executing a
      MsgCancelProposal message.

      Since: cosmos-sdk 0.50
  cosmos.gov.v1.MsgDeposit:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
      depositor:
        type: string
        description: depositor defines the deposit addresses from the proposals.
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: amount to be deposited by depositor.
    description: MsgDeposit defines a message to submit a deposit to an existing proposal.
  cosmos.gov.v1.MsgDepositResponse:
    type: object
    description: MsgDepositResponse defines the Msg/Deposit response type.
  cosmos.gov.v1.MsgExecLegacyContent:
    type: object
    properties:
      content:
        description: content is the proposal's content.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
      authority:
        type: string
        description: authority must be the gov module address.
    description: >-
      MsgExecLegacyContent is used to wrap the legacy content field into a
      message.

      This ensures backwards compatibility with v1beta1.MsgSubmitProposal.
  cosmos.gov.v1.MsgExecLegacyContentResponse:
    type: object
    description: >-
      MsgExecLegacyContentResponse defines the Msg/ExecLegacyContent response
      type.
  cosmos.gov.v1.MsgSubmitProposal:
    type: object
    properties:
      messages:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com. As of May 2023, there are no widely used
                type server

                implementations and no plans to implement one.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: messages are the arbitrary messages to be executed if proposal passes.
      initial_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: >-
          initial_deposit is the deposit value that must be paid at proposal
          submission.
      proposer:
        type: string
        description: proposer is the account address of the proposer.
      metadata:
        type: string
        description: metadata is any arbitrary metadata attached to the proposal.
      title:
        type: string
        description: |-
          title is the title of the proposal.

          Since: cosmos-sdk 0.47
      summary:
        type: string
        description: 'Since: cosmos-sdk 0.47'
        title: summary is the summary of the proposal
      expedited:
        type: boolean
        description: 'Since: cosmos-sdk 0.50'
        title: expedited defines if the proposal is expedited or not
    description: >-
      MsgSubmitProposal defines an sdk.Msg type that supports submitting
      arbitrary

      proposal Content.
  cosmos.gov.v1.MsgSubmitProposalResponse:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
    description: MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
  cosmos.gov.v1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/gov parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          min_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: Minimum deposit for a proposal to enter voting period.
          max_deposit_period:
            type: string
            description: >-
              Maximum period for Atom holders to deposit on a proposal. Initial
              value: 2

              months.
          voting_period:
            type: string
            description: Duration of the voting period.
          quorum:
            type: string
            description: >-
              Minimum percentage of total stake needed to vote for a result to
              be
               considered valid.
          threshold:
            type: string
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.5.
          veto_threshold:
            type: string
            description: >-
              Minimum value of Veto votes to Total votes ratio for proposal to
              be
               vetoed. Default value: 1/3.
          min_initial_deposit_ratio:
            type: string
            description: >-
              The ratio representing the proportion of the deposit value that
              must be paid at proposal submission.
          proposal_cancel_ratio:
            type: string
            description: >-
              The cancel ratio which will not be returned back to the depositors
              when a proposal is cancelled.


              Since: cosmos-sdk 0.50
          proposal_cancel_dest:
            type: string
            description: >-
              The address which will receive (proposal_cancel_ratio * deposit)
              proposal deposits.

              If empty, the (proposal_cancel_ratio * deposit) proposal deposits
              will be burned.


              Since: cosmos-sdk 0.50
          expedited_voting_period:
            type: string
            description: |-
              Duration of the voting period of an expedited proposal.

              Since: cosmos-sdk 0.50
          expedited_threshold:
            type: string
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.67.


              Since: cosmos-sdk 0.50
          expedited_min_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: Minimum expedited deposit for a proposal to enter voting period.
          burn_vote_quorum:
            type: boolean
            title: burn deposits if a proposal does not meet quorum
          burn_proposal_deposit_prevote:
            type: boolean
            title: burn deposits if the proposal does not enter voting period
          burn_vote_veto:
            type: boolean
            title: burn deposits if quorum with vote type no_veto is met
          min_deposit_ratio:
            type: string
            description: >-
              The ratio representing the proportion of the deposit value minimum
              that must be met when making a deposit.

              Default value: 0.01. Meaning that for a chain with a min_deposit
              of 100stake, a deposit of 1stake would be

              required.


              Since: cosmos-sdk 0.50
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.gov.v1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.gov.v1.MsgVote:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
      voter:
        type: string
        description: voter is the voter address for the proposal.
      option:
        description: option defines the vote option.
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
      metadata:
        type: string
        description: metadata is any arbitrary metadata attached to the Vote.
    description: MsgVote defines a message to cast a vote.
  cosmos.gov.v1.MsgVoteResponse:
    type: object
    description: MsgVoteResponse defines the Msg/Vote response type.
  cosmos.gov.v1.MsgVoteWeighted:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
      voter:
        type: string
        description: voter is the voter address for the proposal.
      options:
        type: array
        items:
          type: object
          properties:
            option:
              description: >-
                option defines the valid vote options, it must not contain
                duplicate vote options.
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
            weight:
              type: string
              description: weight is the vote weight associated with the vote option.
          description: WeightedVoteOption defines a unit of vote for vote split.
        description: options defines the weighted vote options.
      metadata:
        type: string
        description: metadata is any arbitrary metadata attached to the VoteWeighted.
    description: MsgVoteWeighted defines a message to cast a vote.
  cosmos.gov.v1.MsgVoteWeightedResponse:
    type: object
    description: MsgVoteWeightedResponse defines the Msg/VoteWeighted response type.
  cosmos.gov.v1.Params:
    type: object
    properties:
      min_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: Minimum deposit for a proposal to enter voting period.
      max_deposit_period:
        type: string
        description: >-
          Maximum period for Atom holders to deposit on a proposal. Initial
          value: 2

          months.
      voting_period:
        type: string
        description: Duration of the voting period.
      quorum:
        type: string
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
           considered valid.
      threshold:
        type: string
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.5.
      veto_threshold:
        type: string
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
           vetoed. Default value: 1/3.
      min_initial_deposit_ratio:
        type: string
        description: >-
          The ratio representing the proportion of the deposit value that must
          be paid at proposal submission.
      proposal_cancel_ratio:
        type: string
        description: >-
          The cancel ratio which will not be returned back to the depositors
          when a proposal is cancelled.


          Since: cosmos-sdk 0.50
      proposal_cancel_dest:
        type: string
        description: >-
          The address which will receive (proposal_cancel_ratio * deposit)
          proposal deposits.

          If empty, the (proposal_cancel_ratio * deposit) proposal deposits will
          be burned.


          Since: cosmos-sdk 0.50
      expedited_voting_period:
        type: string
        description: |-
          Duration of the voting period of an expedited proposal.

          Since: cosmos-sdk 0.50
      expedited_threshold:
        type: string
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.67.


          Since: cosmos-sdk 0.50
      expedited_min_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: Minimum expedited deposit for a proposal to enter voting period.
      burn_vote_quorum:
        type: boolean
        title: burn deposits if a proposal does not meet quorum
      burn_proposal_deposit_prevote:
        type: boolean
        title: burn deposits if the proposal does not enter voting period
      burn_vote_veto:
        type: boolean
        title: burn deposits if quorum with vote type no_veto is met
      min_deposit_ratio:
        type: string
        description: >-
          The ratio representing the proportion of the deposit value minimum
          that must be met when making a deposit.

          Default value: 0.01. Meaning that for a chain with a min_deposit of
          100stake, a deposit of 1stake would be

          required.


          Since: cosmos-sdk 0.50
    description: |-
      Params defines the parameters for the x/gov module.

      Since: cosmos-sdk 0.47
  cosmos.gov.v1.VoteOption:
    type: string
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    default: VOTE_OPTION_UNSPECIFIED
    description: >-
      VoteOption enumerates the valid vote options for a given governance
      proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  cosmos.gov.v1.WeightedVoteOption:
    type: object
    properties:
      option:
        description: >-
          option defines the valid vote options, it must not contain duplicate
          vote options.
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
      weight:
        type: string
        description: weight is the vote weight associated with the vote option.
    description: WeightedVoteOption defines a unit of vote for vote split.
  cosmos.gov.v1beta1.MsgDeposit:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
      depositor:
        type: string
        description: depositor defines the deposit addresses from the proposals.
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: amount to be deposited by depositor.
    description: MsgDeposit defines a message to submit a deposit to an existing proposal.
  cosmos.gov.v1beta1.MsgDepositResponse:
    type: object
    description: MsgDepositResponse defines the Msg/Deposit response type.
  cosmos.gov.v1beta1.MsgSubmitProposal:
    type: object
    properties:
      content:
        description: content is the proposal's content.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
      initial_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: >-
          initial_deposit is the deposit value that must be paid at proposal
          submission.
      proposer:
        type: string
        description: proposer is the account address of the proposer.
    description: >-
      MsgSubmitProposal defines an sdk.Msg type that supports submitting
      arbitrary

      proposal Content.
  cosmos.gov.v1beta1.MsgSubmitProposalResponse:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
    description: MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
  cosmos.gov.v1beta1.MsgVote:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
      voter:
        type: string
        description: voter is the voter address for the proposal.
      option:
        description: option defines the vote option.
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
    description: MsgVote defines a message to cast a vote.
  cosmos.gov.v1beta1.MsgVoteResponse:
    type: object
    description: MsgVoteResponse defines the Msg/Vote response type.
  cosmos.gov.v1beta1.MsgVoteWeighted:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
        description: proposal_id defines the unique id of the proposal.
      voter:
        type: string
        description: voter is the voter address for the proposal.
      options:
        type: array
        items:
          type: object
          properties:
            option:
              description: >-
                option defines the valid vote options, it must not contain
                duplicate vote options.
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
            weight:
              type: string
              description: weight is the vote weight associated with the vote option.
          description: |-
            WeightedVoteOption defines a unit of vote for vote split.

            Since: cosmos-sdk 0.43
        description: options defines the weighted vote options.
    description: |-
      MsgVoteWeighted defines a message to cast a vote.

      Since: cosmos-sdk 0.43
  cosmos.gov.v1beta1.MsgVoteWeightedResponse:
    type: object
    description: |-
      MsgVoteWeightedResponse defines the Msg/VoteWeighted response type.

      Since: cosmos-sdk 0.43
  cosmos.gov.v1beta1.VoteOption:
    type: string
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    default: VOTE_OPTION_UNSPECIFIED
    description: >-
      VoteOption enumerates the valid vote options for a given governance
      proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  cosmos.gov.v1beta1.WeightedVoteOption:
    type: object
    properties:
      option:
        description: >-
          option defines the valid vote options, it must not contain duplicate
          vote options.
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
      weight:
        type: string
        description: weight is the vote weight associated with the vote option.
    description: |-
      WeightedVoteOption defines a unit of vote for vote split.

      Since: cosmos-sdk 0.43
  cosmos.mint.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/mint parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          mint_denom:
            type: string
            title: type of coin to mint
          inflation_rate_change:
            type: string
            title: maximum annual change in inflation rate
          inflation_max:
            type: string
            title: maximum inflation rate
          inflation_min:
            type: string
            title: minimum inflation rate
          goal_bonded:
            type: string
            title: goal of percent bonded atoms
          blocks_per_year:
            type: string
            format: uint64
            title: expected blocks per year
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.mint.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.mint.v1beta1.Params:
    type: object
    properties:
      mint_denom:
        type: string
        title: type of coin to mint
      inflation_rate_change:
        type: string
        title: maximum annual change in inflation rate
      inflation_max:
        type: string
        title: maximum inflation rate
      inflation_min:
        type: string
        title: minimum inflation rate
      goal_bonded:
        type: string
        title: goal of percent bonded atoms
      blocks_per_year:
        type: string
        format: uint64
        title: expected blocks per year
    description: Params defines the parameters for the x/mint module.
  cosmos.params.v1beta1.ParamChange:
    type: object
    properties:
      subspace:
        type: string
      key:
        type: string
      value:
        type: string
    description: |-
      ParamChange defines an individual parameter change, for use in
      ParameterChangeProposal.
  cosmos.params.v1beta1.QueryParamsResponse:
    type: object
    properties:
      param:
        description: param defines the queried parameter.
        type: object
        properties:
          subspace:
            type: string
          key:
            type: string
          value:
            type: string
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.params.v1beta1.QuerySubspacesResponse:
    type: object
    properties:
      subspaces:
        type: array
        items:
          type: object
          properties:
            subspace:
              type: string
            keys:
              type: array
              items:
                type: string
          description: >-
            Subspace defines a parameter subspace name and all the keys that
            exist for

            the subspace.


            Since: cosmos-sdk 0.46
    description: |-
      QuerySubspacesResponse defines the response types for querying for all
      registered subspaces and all keys for a subspace.

      Since: cosmos-sdk 0.46
  cosmos.params.v1beta1.Subspace:
    type: object
    properties:
      subspace:
        type: string
      keys:
        type: array
        items:
          type: string
    description: |-
      Subspace defines a parameter subspace name and all the keys that exist for
      the subspace.

      Since: cosmos-sdk 0.46
  cosmos.slashing.v1beta1.MsgUnjail:
    type: object
    properties:
      validator_addr:
        type: string
    title: MsgUnjail defines the Msg/Unjail request type
  cosmos.slashing.v1beta1.MsgUnjailResponse:
    type: object
    title: MsgUnjailResponse defines the Msg/Unjail response type
  cosmos.slashing.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/slashing parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          signed_blocks_window:
            type: string
            format: int64
          min_signed_per_window:
            type: string
            format: byte
          downtime_jail_duration:
            type: string
          slash_fraction_double_sign:
            type: string
            format: byte
          slash_fraction_downtime:
            type: string
            format: byte
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.slashing.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.slashing.v1beta1.Params:
    type: object
    properties:
      signed_blocks_window:
        type: string
        format: int64
      min_signed_per_window:
        type: string
        format: byte
      downtime_jail_duration:
        type: string
      slash_fraction_double_sign:
        type: string
        format: byte
      slash_fraction_downtime:
        type: string
        format: byte
    description: Params represents the parameters used for by the slashing module.
  cosmos.staking.v1beta1.CommissionRates:
    type: object
    properties:
      rate:
        type: string
        description: rate is the commission rate charged to delegators, as a fraction.
      max_rate:
        type: string
        description: >-
          max_rate defines the maximum commission rate which validator can ever
          charge, as a fraction.
      max_change_rate:
        type: string
        description: >-
          max_change_rate defines the maximum daily increase of the validator
          commission, as a fraction.
    description: >-
      CommissionRates defines the initial commission rates to be used for
      creating

      a validator.
  cosmos.staking.v1beta1.Description:
    type: object
    properties:
      moniker:
        type: string
        description: moniker defines a human-readable name for the validator.
      identity:
        type: string
        description: >-
          identity defines an optional identity signature (ex. UPort or
          Keybase).
      website:
        type: string
        description: website defines an optional website link.
      security_contact:
        type: string
        description: security_contact defines an optional email for security contact.
      details:
        type: string
        description: details define other optional details.
    description: Description defines a validator description.
  cosmos.staking.v1beta1.MsgBeginRedelegate:
    type: object
    properties:
      delegator_address:
        type: string
      validator_src_address:
        type: string
      validator_dst_address:
        type: string
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      MsgBeginRedelegate defines a SDK message for performing a redelegation
      of coins from a delegator and source validator to a destination validator.
  cosmos.staking.v1beta1.MsgBeginRedelegateResponse:
    type: object
    properties:
      completion_time:
        type: string
        format: date-time
    description: MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
  cosmos.staking.v1beta1.MsgCancelUnbondingDelegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        title: >-
          amount is always less than or equal to unbonding delegation entry
          balance
      creation_height:
        type: string
        format: int64
        description: creation_height is the height which the unbonding took place.
    description: 'Since: cosmos-sdk 0.46'
    title: >-
      MsgCancelUnbondingDelegation defines the SDK message for performing a
      cancel unbonding delegation for delegator
  cosmos.staking.v1beta1.MsgCancelUnbondingDelegationResponse:
    type: object
    description: 'Since: cosmos-sdk 0.46'
    title: MsgCancelUnbondingDelegationResponse
  cosmos.staking.v1beta1.MsgCreateValidator:
    type: object
    properties:
      description:
        type: object
        properties:
          moniker:
            type: string
            description: moniker defines a human-readable name for the validator.
          identity:
            type: string
            description: >-
              identity defines an optional identity signature (ex. UPort or
              Keybase).
          website:
            type: string
            description: website defines an optional website link.
          security_contact:
            type: string
            description: security_contact defines an optional email for security contact.
          details:
            type: string
            description: details define other optional details.
        description: Description defines a validator description.
      commission:
        type: object
        properties:
          rate:
            type: string
            description: rate is the commission rate charged to delegators, as a fraction.
          max_rate:
            type: string
            description: >-
              max_rate defines the maximum commission rate which validator can
              ever charge, as a fraction.
          max_change_rate:
            type: string
            description: >-
              max_change_rate defines the maximum daily increase of the
              validator commission, as a fraction.
        description: >-
          CommissionRates defines the initial commission rates to be used for
          creating

          a validator.
      min_self_delegation:
        type: string
      delegator_address:
        type: string
        description: >-
          Deprecated: Use of Delegator Address in MsgCreateValidator is
          deprecated.

          The validator address bytes and delegator address bytes refer to the
          same account while creating validator (defer

          only in bech32 notation).
      validator_address:
        type: string
      pubkey:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      value:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: MsgCreateValidator defines a SDK message for creating a new validator.
  cosmos.staking.v1beta1.MsgCreateValidatorResponse:
    type: object
    description: MsgCreateValidatorResponse defines the Msg/CreateValidator response type.
  cosmos.staking.v1beta1.MsgDelegate:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      MsgDelegate defines a SDK message for performing a delegation of coins
      from a delegator to a validator.
  cosmos.staking.v1beta1.MsgDelegateResponse:
    type: object
    description: MsgDelegateResponse defines the Msg/Delegate response type.
  cosmos.staking.v1beta1.MsgEditValidator:
    type: object
    properties:
      description:
        type: object
        properties:
          moniker:
            type: string
            description: moniker defines a human-readable name for the validator.
          identity:
            type: string
            description: >-
              identity defines an optional identity signature (ex. UPort or
              Keybase).
          website:
            type: string
            description: website defines an optional website link.
          security_contact:
            type: string
            description: security_contact defines an optional email for security contact.
          details:
            type: string
            description: details define other optional details.
        description: Description defines a validator description.
      validator_address:
        type: string
      commission_rate:
        type: string
        title: >-
          We pass a reference to the new commission rate and min self delegation
          as

          it's not mandatory to update. If not updated, the deserialized rate
          will be

          zero with no way to distinguish if an update was intended.

          REF: #2373
      min_self_delegation:
        type: string
    description: MsgEditValidator defines a SDK message for editing an existing validator.
  cosmos.staking.v1beta1.MsgEditValidatorResponse:
    type: object
    description: MsgEditValidatorResponse defines the Msg/EditValidator response type.
  cosmos.staking.v1beta1.MsgUndelegate:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      MsgUndelegate defines a SDK message for performing an undelegation from a
      delegate and a validator.
  cosmos.staking.v1beta1.MsgUndelegateResponse:
    type: object
    properties:
      completion_time:
        type: string
        format: date-time
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        title: amount returns the amount of undelegated coins
    description: MsgUndelegateResponse defines the Msg/Undelegate response type.
  cosmos.staking.v1beta1.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: |-
          params defines the x/staking parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          unbonding_time:
            type: string
            description: unbonding_time is the time duration of unbonding.
          max_validators:
            type: integer
            format: int64
            description: max_validators is the maximum number of validators.
          max_entries:
            type: integer
            format: int64
            description: >-
              max_entries is the max entries for either unbonding delegation or
              redelegation (per pair/trio).
          historical_entries:
            type: integer
            format: int64
            description: historical_entries is the number of historical entries to persist.
          bond_denom:
            type: string
            description: bond_denom defines the bondable coin denomination.
          min_commission_rate:
            type: string
            title: >-
              min_commission_rate is the chain-wide minimum commission rate that
              a validator can charge their delegators
    description: |-
      MsgUpdateParams is the Msg/UpdateParams request type.

      Since: cosmos-sdk 0.47
  cosmos.staking.v1beta1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.

      Since: cosmos-sdk 0.47
  cosmos.staking.v1beta1.Params:
    type: object
    properties:
      unbonding_time:
        type: string
        description: unbonding_time is the time duration of unbonding.
      max_validators:
        type: integer
        format: int64
        description: max_validators is the maximum number of validators.
      max_entries:
        type: integer
        format: int64
        description: >-
          max_entries is the max entries for either unbonding delegation or
          redelegation (per pair/trio).
      historical_entries:
        type: integer
        format: int64
        description: historical_entries is the number of historical entries to persist.
      bond_denom:
        type: string
        description: bond_denom defines the bondable coin denomination.
      min_commission_rate:
        type: string
        title: >-
          min_commission_rate is the chain-wide minimum commission rate that a
          validator can charge their delegators
    description: Params defines the parameters for the x/staking module.
  ibc.applications.fee.v1.Fee:
    type: object
    properties:
      recv_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: the packet receive fee
      ack_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: the packet acknowledgement fee
      timeout_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: the packet timeout fee
    title: Fee defines the ICS29 receive, acknowledgement and timeout fees
  ibc.applications.fee.v1.MsgPayPacketFee:
    type: object
    properties:
      fee:
        title: >-
          fee encapsulates the recv, ack and timeout fees associated with an IBC
          packet
        type: object
        properties:
          recv_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet receive fee
          ack_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet acknowledgement fee
          timeout_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet timeout fee
      source_port_id:
        type: string
        title: the source port unique identifier
      source_channel_id:
        type: string
        title: the source channel unique identifier
      signer:
        type: string
        title: account address to refund fee if necessary
      relayers:
        type: array
        items:
          type: string
        title: optional list of relayers permitted to the receive packet fees
    title: >-
      MsgPayPacketFee defines the request type for the PayPacketFee rpc

      This Msg can be used to pay for a packet at the next sequence send &
      should be combined with the Msg that will be

      paid for
  ibc.applications.fee.v1.MsgPayPacketFeeAsync:
    type: object
    properties:
      packet_id:
        title: >-
          unique packet identifier comprised of the channel ID, port ID and
          sequence
        type: object
        properties:
          port_id:
            type: string
            title: channel port identifier
          channel_id:
            type: string
            title: channel unique identifier
          sequence:
            type: string
            format: uint64
            title: packet sequence
      packet_fee:
        title: the packet fee associated with a particular IBC packet
        type: object
        properties:
          fee:
            title: >-
              fee encapsulates the recv, ack and timeout fees associated with an
              IBC packet
            type: object
            properties:
              recv_fee:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: the packet receive fee
              ack_fee:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: the packet acknowledgement fee
              timeout_fee:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: the packet timeout fee
          refund_address:
            type: string
            title: the refund address for unspent fees
          relayers:
            type: array
            items:
              type: string
            title: optional list of relayers permitted to receive fees
    title: >-
      MsgPayPacketFeeAsync defines the request type for the PayPacketFeeAsync
      rpc

      This Msg can be used to pay for a packet at a specified sequence (instead
      of the next sequence send)
  ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse:
    type: object
    title: >-
      MsgPayPacketFeeAsyncResponse defines the response type for the
      PayPacketFeeAsync rpc
  ibc.applications.fee.v1.MsgPayPacketFeeResponse:
    type: object
    title: MsgPayPacketFeeResponse defines the response type for the PayPacketFee rpc
  ibc.applications.fee.v1.MsgRegisterCounterpartyPayee:
    type: object
    properties:
      port_id:
        type: string
        title: unique port identifier
      channel_id:
        type: string
        title: unique channel identifier
      relayer:
        type: string
        title: the relayer address
      counterparty_payee:
        type: string
        title: the counterparty payee address
    title: >-
      MsgRegisterCounterpartyPayee defines the request type for the
      RegisterCounterpartyPayee rpc
  ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse:
    type: object
    title: >-
      MsgRegisterCounterpartyPayeeResponse defines the response type for the
      RegisterCounterpartyPayee rpc
  ibc.applications.fee.v1.MsgRegisterPayee:
    type: object
    properties:
      port_id:
        type: string
        title: unique port identifier
      channel_id:
        type: string
        title: unique channel identifier
      relayer:
        type: string
        title: the relayer address
      payee:
        type: string
        title: the payee address
    title: MsgRegisterPayee defines the request type for the RegisterPayee rpc
  ibc.applications.fee.v1.MsgRegisterPayeeResponse:
    type: object
    title: >-
      MsgRegisterPayeeResponse defines the response type for the RegisterPayee
      rpc
  ibc.applications.fee.v1.PacketFee:
    type: object
    properties:
      fee:
        title: >-
          fee encapsulates the recv, ack and timeout fees associated with an IBC
          packet
        type: object
        properties:
          recv_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet receive fee
          ack_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet acknowledgement fee
          timeout_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: the packet timeout fee
      refund_address:
        type: string
        title: the refund address for unspent fees
      relayers:
        type: array
        items:
          type: string
        title: optional list of relayers permitted to receive fees
    title: >-
      PacketFee contains ICS29 relayer fees, refund address and optional list of
      permitted relayers
  ibc.core.channel.v1.PacketId:
    type: object
    properties:
      port_id:
        type: string
        title: channel port identifier
      channel_id:
        type: string
        title: channel unique identifier
      sequence:
        type: string
        format: uint64
        title: packet sequence
    title: |-
      PacketId is an identifier for a unique Packet
      Source chains refer to packets by source port/channel
      Destination chains refer to packets by destination port/channel
  ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount:
    type: object
    properties:
      owner:
        type: string
      connection_id:
        type: string
      version:
        type: string
    title: MsgRegisterInterchainAccount defines the payload for Msg/RegisterAccount
  ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse:
    type: object
    properties:
      channel_id:
        type: string
      port_id:
        type: string
    title: >-
      MsgRegisterInterchainAccountResponse defines the response for
      Msg/RegisterAccount
  ibc.applications.interchain_accounts.controller.v1.MsgSendTx:
    type: object
    properties:
      owner:
        type: string
      connection_id:
        type: string
      packet_data:
        type: object
        properties:
          type:
            type: string
            enum:
              - TYPE_UNSPECIFIED
              - TYPE_EXECUTE_TX
            default: TYPE_UNSPECIFIED
            description: |-
              - TYPE_UNSPECIFIED: Default zero value enumeration
               - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain
            title: >-
              Type defines a classification of message issued from a controller
              chain to its associated interchain accounts

              host
          data:
            type: string
            format: byte
          memo:
            type: string
        description: >-
          InterchainAccountPacketData is comprised of a raw transaction, type of
          transaction and optional memo field.
      relative_timeout:
        type: string
        format: uint64
        description: >-
          Relative timeout timestamp provided will be added to the current block
          time during transaction execution.

          The timeout timestamp must be non-zero.
    title: MsgSendTx defines the payload for Msg/SendTx
  ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse:
    type: object
    properties:
      sequence:
        type: string
        format: uint64
    title: MsgSendTxResponse defines the response for MsgSendTx
  ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: >-
          params defines the 27-interchain-accounts/controller parameters to
          update.


          NOTE: All parameters must be supplied.
        type: object
        properties:
          controller_enabled:
            type: boolean
            description: controller_enabled enables or disables the controller submodule.
    title: MsgUpdateParams defines the payload for Msg/UpdateParams
  ibc.applications.interchain_accounts.controller.v1.MsgUpdateParamsResponse:
    type: object
    title: MsgUpdateParamsResponse defines the response for Msg/UpdateParams
  ibc.applications.interchain_accounts.controller.v1.Params:
    type: object
    properties:
      controller_enabled:
        type: boolean
        description: controller_enabled enables or disables the controller submodule.
    description: |-
      Params defines the set of on-chain interchain accounts parameters.
      The following parameters may be used to disable the controller submodule.
  ibc.applications.interchain_accounts.v1.InterchainAccountPacketData:
    type: object
    properties:
      type:
        type: string
        enum:
          - TYPE_UNSPECIFIED
          - TYPE_EXECUTE_TX
        default: TYPE_UNSPECIFIED
        description: |-
          - TYPE_UNSPECIFIED: Default zero value enumeration
           - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain
        title: >-
          Type defines a classification of message issued from a controller
          chain to its associated interchain accounts

          host
      data:
        type: string
        format: byte
      memo:
        type: string
    description: >-
      InterchainAccountPacketData is comprised of a raw transaction, type of
      transaction and optional memo field.
  ibc.applications.interchain_accounts.v1.Type:
    type: string
    enum:
      - TYPE_UNSPECIFIED
      - TYPE_EXECUTE_TX
    default: TYPE_UNSPECIFIED
    description: |-
      - TYPE_UNSPECIFIED: Default zero value enumeration
       - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain
    title: >-
      Type defines a classification of message issued from a controller chain to
      its associated interchain accounts

      host
  ibc.applications.interchain_accounts.host.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: |-
          params defines the 27-interchain-accounts/host parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          host_enabled:
            type: boolean
            description: host_enabled enables or disables the host submodule.
          allow_messages:
            type: array
            items:
              type: string
            description: >-
              allow_messages defines a list of sdk message typeURLs allowed to
              be executed on a host chain.
    title: MsgUpdateParams defines the payload for Msg/UpdateParams
  ibc.applications.interchain_accounts.host.v1.MsgUpdateParamsResponse:
    type: object
    title: MsgUpdateParamsResponse defines the response for Msg/UpdateParams
  ibc.applications.interchain_accounts.host.v1.Params:
    type: object
    properties:
      host_enabled:
        type: boolean
        description: host_enabled enables or disables the host submodule.
      allow_messages:
        type: array
        items:
          type: string
        description: >-
          allow_messages defines a list of sdk message typeURLs allowed to be
          executed on a host chain.
    description: |-
      Params defines the set of on-chain interchain accounts parameters.
      The following parameters may be used to disable the host submodule.
  ibc.applications.transfer.v1.MsgTransfer:
    type: object
    properties:
      source_port:
        type: string
        title: the port on which the packet will be sent
      source_channel:
        type: string
        title: the channel by which the packet will be sent
      token:
        title: the tokens to be transferred
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      sender:
        type: string
        title: the sender address
      receiver:
        type: string
        title: the recipient address on the destination chain
      timeout_height:
        description: |-
          Timeout height relative to the current block height.
          The timeout is disabled when set to 0.
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      timeout_timestamp:
        type: string
        format: uint64
        description: |-
          Timeout timestamp in absolute nanoseconds since unix epoch.
          The timeout is disabled when set to 0.
      memo:
        type: string
        title: optional memo
    title: >-
      MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between

      ICS20 enabled chains. See ICS Spec here:

      https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
  ibc.applications.transfer.v1.MsgTransferResponse:
    type: object
    properties:
      sequence:
        type: string
        format: uint64
        title: sequence number of the transfer packet sent
    description: MsgTransferResponse defines the Msg/Transfer response type.
  ibc.applications.transfer.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: |-
          params defines the transfer parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          send_enabled:
            type: boolean
            description: >-
              send_enabled enables or disables all cross-chain token transfers
              from this

              chain.
          receive_enabled:
            type: boolean
            description: >-
              receive_enabled enables or disables all cross-chain token
              transfers to this

              chain.
    description: MsgUpdateParams is the Msg/UpdateParams request type.
  ibc.applications.transfer.v1.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.
  ibc.applications.transfer.v1.Params:
    type: object
    properties:
      send_enabled:
        type: boolean
        description: >-
          send_enabled enables or disables all cross-chain token transfers from
          this

          chain.
      receive_enabled:
        type: boolean
        description: >-
          receive_enabled enables or disables all cross-chain token transfers to
          this

          chain.
    description: >-
      Params defines the set of IBC transfer parameters.

      NOTE: To prevent a single token from being transferred, set the

      TransfersEnabled parameter to true and then set the bank module's
      SendEnabled

      parameter for the denomination to false.
  ibc.core.client.v1.Height:
    type: object
    properties:
      revision_number:
        type: string
        format: uint64
        title: the revision that the client is currently on
      revision_height:
        type: string
        format: uint64
        title: the height within the given revision
    description: |-
      Normally the RevisionHeight is incremented at each height while keeping
      RevisionNumber the same. However some consensus algorithms may choose to
      reset the height in certain conditions e.g. hard forks, state-machine
      breaking changes In these cases, the RevisionNumber is incremented so that
      height continues to be monitonically increasing even as the RevisionHeight
      gets reset
    title: >-
      Height is a monotonically increasing data type

      that can be compared against another Height for the purposes of updating
      and

      freezing clients
  ibc.core.channel.v1.Channel:
    type: object
    properties:
      state:
        title: current state of the channel end
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        default: STATE_UNINITIALIZED_UNSPECIFIED
        description: |-
          State defines if a channel is in one of the following states:
          CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
           - STATE_INIT: A channel has just started the opening handshake.
           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
           - STATE_OPEN: A channel has completed the handshake. Open channels are
          ready to send and receive packets.
           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
          packets.
      ordering:
        title: whether the channel is ordered or unordered
        type: string
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
      counterparty:
        title: counterparty channel end
        type: object
        properties:
          port_id:
            type: string
            description: >-
              port on the counterparty chain which owns the other end of the
              channel.
          channel_id:
            type: string
            title: channel end on the counterparty chain
      connection_hops:
        type: array
        items:
          type: string
        title: |-
          list of connection identifiers, in order, along which packets sent on
          this channel will travel
      version:
        type: string
        title: opaque channel version, which is agreed upon during the handshake
    description: |-
      Channel defines pipeline for exactly-once packet delivery between specific
      modules on separate blockchains, which has at least one end capable of
      sending packets and one end capable of receiving packets.
  ibc.core.channel.v1.Counterparty:
    type: object
    properties:
      port_id:
        type: string
        description: >-
          port on the counterparty chain which owns the other end of the
          channel.
      channel_id:
        type: string
        title: channel end on the counterparty chain
    title: Counterparty defines a channel end counterparty
  ibc.core.channel.v1.MsgAcknowledgement:
    type: object
    properties:
      packet:
        type: object
        properties:
          sequence:
            type: string
            format: uint64
            description: >-
              number corresponds to the order of sends and receives, where a
              Packet

              with an earlier sequence number must be sent and received before a
              Packet

              with a later sequence number.
          source_port:
            type: string
            description: identifies the port on the sending chain.
          source_channel:
            type: string
            description: identifies the channel end on the sending chain.
          destination_port:
            type: string
            description: identifies the port on the receiving chain.
          destination_channel:
            type: string
            description: identifies the channel end on the receiving chain.
          data:
            type: string
            format: byte
            title: actual opaque bytes transferred directly to the application module
          timeout_height:
            title: block height after which the packet times out
            type: object
            properties:
              revision_number:
                type: string
                format: uint64
                title: the revision that the client is currently on
              revision_height:
                type: string
                format: uint64
                title: the height within the given revision
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
          timeout_timestamp:
            type: string
            format: uint64
            title: block timestamp (in nanoseconds) after which the packet times out
        title: >-
          Packet defines a type that carries data across different chains
          through IBC
      acknowledgement:
        type: string
        format: byte
      proof_acked:
        type: string
        format: byte
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
    title: MsgAcknowledgement receives incoming IBC acknowledgement
  ibc.core.channel.v1.MsgAcknowledgementResponse:
    type: object
    properties:
      result:
        type: string
        enum:
          - RESPONSE_RESULT_TYPE_UNSPECIFIED
          - RESPONSE_RESULT_TYPE_NOOP
          - RESPONSE_RESULT_TYPE_SUCCESS
        default: RESPONSE_RESULT_TYPE_UNSPECIFIED
        description: |-
          - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
           - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
           - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
        title: >-
          ResponseResultType defines the possible outcomes of the execution of a
          message
    description: MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
  ibc.core.channel.v1.MsgChannelCloseConfirm:
    type: object
    properties:
      port_id:
        type: string
      channel_id:
        type: string
      proof_init:
        type: string
        format: byte
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
    description: |-
      MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
      to acknowledge the change of channel state to CLOSED on Chain A.
  ibc.core.channel.v1.MsgChannelCloseConfirmResponse:
    type: object
    description: >-
      MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm
      response

      type.
  ibc.core.channel.v1.MsgChannelCloseInit:
    type: object
    properties:
      port_id:
        type: string
      channel_id:
        type: string
      signer:
        type: string
    description: |-
      MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
      to close a channel with Chain B.
  ibc.core.channel.v1.MsgChannelCloseInitResponse:
    type: object
    description: >-
      MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response
      type.
  ibc.core.channel.v1.MsgChannelOpenAck:
    type: object
    properties:
      port_id:
        type: string
      channel_id:
        type: string
      counterparty_channel_id:
        type: string
      counterparty_version:
        type: string
      proof_try:
        type: string
        format: byte
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
    description: >-
      MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to
      acknowledge

      the change of channel state to TRYOPEN on Chain B.
  ibc.core.channel.v1.MsgChannelOpenAckResponse:
    type: object
    description: MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
  ibc.core.channel.v1.MsgChannelOpenConfirm:
    type: object
    properties:
      port_id:
        type: string
      channel_id:
        type: string
      proof_ack:
        type: string
        format: byte
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
    description: |-
      MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
      acknowledge the change of channel state to OPEN on Chain A.
  ibc.core.channel.v1.MsgChannelOpenConfirmResponse:
    type: object
    description: |-
      MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
      type.
  ibc.core.channel.v1.MsgChannelOpenInit:
    type: object
    properties:
      port_id:
        type: string
      channel:
        type: object
        properties:
          state:
            title: current state of the channel end
            type: string
            enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
              - STATE_CLOSED
            default: STATE_UNINITIALIZED_UNSPECIFIED
            description: |-
              State defines if a channel is in one of the following states:
              CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

               - STATE_UNINITIALIZED_UNSPECIFIED: Default State
               - STATE_INIT: A channel has just started the opening handshake.
               - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
               - STATE_OPEN: A channel has completed the handshake. Open channels are
              ready to send and receive packets.
               - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
              packets.
          ordering:
            title: whether the channel is ordered or unordered
            type: string
            enum:
              - ORDER_NONE_UNSPECIFIED
              - ORDER_UNORDERED
              - ORDER_ORDERED
            default: ORDER_NONE_UNSPECIFIED
            description: |-
              - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
               - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
              which they were sent.
               - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          counterparty:
            title: counterparty channel end
            type: object
            properties:
              port_id:
                type: string
                description: >-
                  port on the counterparty chain which owns the other end of the
                  channel.
              channel_id:
                type: string
                title: channel end on the counterparty chain
          connection_hops:
            type: array
            items:
              type: string
            title: >-
              list of connection identifiers, in order, along which packets sent
              on

              this channel will travel
          version:
            type: string
            title: opaque channel version, which is agreed upon during the handshake
        description: >-
          Channel defines pipeline for exactly-once packet delivery between
          specific

          modules on separate blockchains, which has at least one end capable of

          sending packets and one end capable of receiving packets.
      signer:
        type: string
    description: >-
      MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake.
      It

      is called by a relayer on Chain A.
  ibc.core.channel.v1.MsgChannelOpenInitResponse:
    type: object
    properties:
      channel_id:
        type: string
      version:
        type: string
    description: MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
  ibc.core.channel.v1.MsgChannelOpenTry:
    type: object
    properties:
      port_id:
        type: string
      previous_channel_id:
        type: string
        description: >-
          Deprecated: this field is unused. Crossing hello's are no longer
          supported in core IBC.
      channel:
        type: object
        properties:
          state:
            title: current state of the channel end
            type: string
            enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
              - STATE_CLOSED
            default: STATE_UNINITIALIZED_UNSPECIFIED
            description: |-
              State defines if a channel is in one of the following states:
              CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

               - STATE_UNINITIALIZED_UNSPECIFIED: Default State
               - STATE_INIT: A channel has just started the opening handshake.
               - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
               - STATE_OPEN: A channel has completed the handshake. Open channels are
              ready to send and receive packets.
               - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
              packets.
          ordering:
            title: whether the channel is ordered or unordered
            type: string
            enum:
              - ORDER_NONE_UNSPECIFIED
              - ORDER_UNORDERED
              - ORDER_ORDERED
            default: ORDER_NONE_UNSPECIFIED
            description: |-
              - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
               - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
              which they were sent.
               - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          counterparty:
            title: counterparty channel end
            type: object
            properties:
              port_id:
                type: string
                description: >-
                  port on the counterparty chain which owns the other end of the
                  channel.
              channel_id:
                type: string
                title: channel end on the counterparty chain
          connection_hops:
            type: array
            items:
              type: string
            title: >-
              list of connection identifiers, in order, along which packets sent
              on

              this channel will travel
          version:
            type: string
            title: opaque channel version, which is agreed upon during the handshake
        description: >-
          Channel defines pipeline for exactly-once packet delivery between
          specific

          modules on separate blockchains, which has at least one end capable of

          sending packets and one end capable of receiving packets.
      counterparty_version:
        type: string
      proof_init:
        type: string
        format: byte
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
    description: >-
      MsgChannelOpenInit defines a msg sent by a Relayer to try to open a
      channel

      on Chain B. The version field within the Channel field has been
      deprecated. Its

      value will be ignored by core IBC.
  ibc.core.channel.v1.MsgChannelOpenTryResponse:
    type: object
    properties:
      version:
        type: string
      channel_id:
        type: string
    description: MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
  ibc.core.channel.v1.MsgRecvPacket:
    type: object
    properties:
      packet:
        type: object
        properties:
          sequence:
            type: string
            format: uint64
            description: >-
              number corresponds to the order of sends and receives, where a
              Packet

              with an earlier sequence number must be sent and received before a
              Packet

              with a later sequence number.
          source_port:
            type: string
            description: identifies the port on the sending chain.
          source_channel:
            type: string
            description: identifies the channel end on the sending chain.
          destination_port:
            type: string
            description: identifies the port on the receiving chain.
          destination_channel:
            type: string
            description: identifies the channel end on the receiving chain.
          data:
            type: string
            format: byte
            title: actual opaque bytes transferred directly to the application module
          timeout_height:
            title: block height after which the packet times out
            type: object
            properties:
              revision_number:
                type: string
                format: uint64
                title: the revision that the client is currently on
              revision_height:
                type: string
                format: uint64
                title: the height within the given revision
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
          timeout_timestamp:
            type: string
            format: uint64
            title: block timestamp (in nanoseconds) after which the packet times out
        title: >-
          Packet defines a type that carries data across different chains
          through IBC
      proof_commitment:
        type: string
        format: byte
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
    title: MsgRecvPacket receives incoming IBC packet
  ibc.core.channel.v1.MsgRecvPacketResponse:
    type: object
    properties:
      result:
        type: string
        enum:
          - RESPONSE_RESULT_TYPE_UNSPECIFIED
          - RESPONSE_RESULT_TYPE_NOOP
          - RESPONSE_RESULT_TYPE_SUCCESS
        default: RESPONSE_RESULT_TYPE_UNSPECIFIED
        description: |-
          - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
           - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
           - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
        title: >-
          ResponseResultType defines the possible outcomes of the execution of a
          message
    description: MsgRecvPacketResponse defines the Msg/RecvPacket response type.
  ibc.core.channel.v1.MsgTimeout:
    type: object
    properties:
      packet:
        type: object
        properties:
          sequence:
            type: string
            format: uint64
            description: >-
              number corresponds to the order of sends and receives, where a
              Packet

              with an earlier sequence number must be sent and received before a
              Packet

              with a later sequence number.
          source_port:
            type: string
            description: identifies the port on the sending chain.
          source_channel:
            type: string
            description: identifies the channel end on the sending chain.
          destination_port:
            type: string
            description: identifies the port on the receiving chain.
          destination_channel:
            type: string
            description: identifies the channel end on the receiving chain.
          data:
            type: string
            format: byte
            title: actual opaque bytes transferred directly to the application module
          timeout_height:
            title: block height after which the packet times out
            type: object
            properties:
              revision_number:
                type: string
                format: uint64
                title: the revision that the client is currently on
              revision_height:
                type: string
                format: uint64
                title: the height within the given revision
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
          timeout_timestamp:
            type: string
            format: uint64
            title: block timestamp (in nanoseconds) after which the packet times out
        title: >-
          Packet defines a type that carries data across different chains
          through IBC
      proof_unreceived:
        type: string
        format: byte
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      next_sequence_recv:
        type: string
        format: uint64
      signer:
        type: string
    title: MsgTimeout receives timed-out packet
  ibc.core.channel.v1.MsgTimeoutOnClose:
    type: object
    properties:
      packet:
        type: object
        properties:
          sequence:
            type: string
            format: uint64
            description: >-
              number corresponds to the order of sends and receives, where a
              Packet

              with an earlier sequence number must be sent and received before a
              Packet

              with a later sequence number.
          source_port:
            type: string
            description: identifies the port on the sending chain.
          source_channel:
            type: string
            description: identifies the channel end on the sending chain.
          destination_port:
            type: string
            description: identifies the port on the receiving chain.
          destination_channel:
            type: string
            description: identifies the channel end on the receiving chain.
          data:
            type: string
            format: byte
            title: actual opaque bytes transferred directly to the application module
          timeout_height:
            title: block height after which the packet times out
            type: object
            properties:
              revision_number:
                type: string
                format: uint64
                title: the revision that the client is currently on
              revision_height:
                type: string
                format: uint64
                title: the height within the given revision
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
          timeout_timestamp:
            type: string
            format: uint64
            title: block timestamp (in nanoseconds) after which the packet times out
        title: >-
          Packet defines a type that carries data across different chains
          through IBC
      proof_unreceived:
        type: string
        format: byte
      proof_close:
        type: string
        format: byte
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      next_sequence_recv:
        type: string
        format: uint64
      signer:
        type: string
    description: MsgTimeoutOnClose timed-out packet upon counterparty channel closure.
  ibc.core.channel.v1.MsgTimeoutOnCloseResponse:
    type: object
    properties:
      result:
        type: string
        enum:
          - RESPONSE_RESULT_TYPE_UNSPECIFIED
          - RESPONSE_RESULT_TYPE_NOOP
          - RESPONSE_RESULT_TYPE_SUCCESS
        default: RESPONSE_RESULT_TYPE_UNSPECIFIED
        description: |-
          - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
           - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
           - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
        title: >-
          ResponseResultType defines the possible outcomes of the execution of a
          message
    description: MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
  ibc.core.channel.v1.MsgTimeoutResponse:
    type: object
    properties:
      result:
        type: string
        enum:
          - RESPONSE_RESULT_TYPE_UNSPECIFIED
          - RESPONSE_RESULT_TYPE_NOOP
          - RESPONSE_RESULT_TYPE_SUCCESS
        default: RESPONSE_RESULT_TYPE_UNSPECIFIED
        description: |-
          - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
           - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
           - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
        title: >-
          ResponseResultType defines the possible outcomes of the execution of a
          message
    description: MsgTimeoutResponse defines the Msg/Timeout response type.
  ibc.core.channel.v1.Order:
    type: string
    enum:
      - ORDER_NONE_UNSPECIFIED
      - ORDER_UNORDERED
      - ORDER_ORDERED
    default: ORDER_NONE_UNSPECIFIED
    description: |-
      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
      which they were sent.
       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
    title: Order defines if a channel is ORDERED or UNORDERED
  ibc.core.channel.v1.Packet:
    type: object
    properties:
      sequence:
        type: string
        format: uint64
        description: >-
          number corresponds to the order of sends and receives, where a Packet

          with an earlier sequence number must be sent and received before a
          Packet

          with a later sequence number.
      source_port:
        type: string
        description: identifies the port on the sending chain.
      source_channel:
        type: string
        description: identifies the channel end on the sending chain.
      destination_port:
        type: string
        description: identifies the port on the receiving chain.
      destination_channel:
        type: string
        description: identifies the channel end on the receiving chain.
      data:
        type: string
        format: byte
        title: actual opaque bytes transferred directly to the application module
      timeout_height:
        title: block height after which the packet times out
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
      timeout_timestamp:
        type: string
        format: uint64
        title: block timestamp (in nanoseconds) after which the packet times out
    title: >-
      Packet defines a type that carries data across different chains through
      IBC
  ibc.core.channel.v1.ResponseResultType:
    type: string
    enum:
      - RESPONSE_RESULT_TYPE_UNSPECIFIED
      - RESPONSE_RESULT_TYPE_NOOP
      - RESPONSE_RESULT_TYPE_SUCCESS
    default: RESPONSE_RESULT_TYPE_UNSPECIFIED
    description: |-
      - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
       - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
       - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
    title: >-
      ResponseResultType defines the possible outcomes of the execution of a
      message
  ibc.core.channel.v1.State:
    type: string
    enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
      - STATE_CLOSED
    default: STATE_UNINITIALIZED_UNSPECIFIED
    description: |-
      State defines if a channel is in one of the following states:
      CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
       - STATE_INIT: A channel has just started the opening handshake.
       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
       - STATE_OPEN: A channel has completed the handshake. Open channels are
      ready to send and receive packets.
       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
      packets.
  cosmos.upgrade.v1beta1.Plan:
    type: object
    properties:
      name:
        type: string
        description: >-
          Sets the name for the upgrade. This name will be used by the upgraded

          version of the software to apply any special "on-upgrade" commands
          during

          the first BeginBlock method after the upgrade is applied. It is also
          used

          to detect whether a software version can handle a given upgrade. If no

          upgrade handler with this name has been set in the software, it will
          be

          assumed that the software is out-of-date when the upgrade Time or
          Height is

          reached and the software will exit.
      time:
        type: string
        format: date-time
        description: >-
          Deprecated: Time based upgrades have been deprecated. Time based
          upgrade logic

          has been removed from the SDK.

          If this field is not empty, an error will be thrown.
      height:
        type: string
        format: int64
        description: The height at which the upgrade must be performed.
      info:
        type: string
        title: |-
          Any application specific upgrade info to be included on-chain
          such as a git commit that validators could automatically upgrade to
      upgraded_client_state:
        description: >-
          Deprecated: UpgradedClientState field has been deprecated. IBC upgrade
          logic has been

          moved to the IBC module in the sub module 02-client.

          If this field is not empty, an error will be thrown.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: >-
      Plan specifies information about a planned upgrade and when it should
      occur.
  ibc.core.client.v1.MsgCreateClient:
    type: object
    properties:
      client_state:
        title: light client state
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      consensus_state:
        description: |-
          consensus state associated with the client that corresponds to a given
          height.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
      signer:
        type: string
        title: signer address
    title: MsgCreateClient defines a message to create an IBC client
  ibc.core.client.v1.MsgCreateClientResponse:
    type: object
    description: MsgCreateClientResponse defines the Msg/CreateClient response type.
  ibc.core.client.v1.MsgIBCSoftwareUpgrade:
    type: object
    properties:
      plan:
        type: object
        properties:
          name:
            type: string
            description: >-
              Sets the name for the upgrade. This name will be used by the
              upgraded

              version of the software to apply any special "on-upgrade" commands
              during

              the first BeginBlock method after the upgrade is applied. It is
              also used

              to detect whether a software version can handle a given upgrade.
              If no

              upgrade handler with this name has been set in the software, it
              will be

              assumed that the software is out-of-date when the upgrade Time or
              Height is

              reached and the software will exit.
          time:
            type: string
            format: date-time
            description: >-
              Deprecated: Time based upgrades have been deprecated. Time based
              upgrade logic

              has been removed from the SDK.

              If this field is not empty, an error will be thrown.
          height:
            type: string
            format: int64
            description: The height at which the upgrade must be performed.
          info:
            type: string
            title: >-
              Any application specific upgrade info to be included on-chain

              such as a git commit that validators could automatically upgrade
              to
          upgraded_client_state:
            description: >-
              Deprecated: UpgradedClientState field has been deprecated. IBC
              upgrade logic has been

              moved to the IBC module in the sub module 02-client.

              If this field is not empty, an error will be thrown.
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com. As of May 2023, there are no widely used
                  type server

                  implementations and no plans to implement one.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
        description: >-
          Plan specifies information about a planned upgrade and when it should
          occur.
      upgraded_client_state:
        description: >-
          An UpgradedClientState must be provided to perform an IBC breaking
          upgrade.

          This will make the chain commit to the correct upgraded (self) client
          state

          before the upgrade occurs, so that connecting chains can verify that
          the

          new upgraded client is valid by verifying a proof on the previous
          version

          of the chain. This will allow IBC connections to persist smoothly
          across

          planned chain upgrades. Correspondingly, the UpgradedClientState field
          has been

          deprecated in the Cosmos SDK to allow for this logic to exist solely
          in

          the 02-client module.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
      signer:
        type: string
        title: signer address
    title: >-
      MsgIBCSoftwareUpgrade defines the message used to schedule an upgrade of
      an IBC client using a v1 governance proposal
  ibc.core.client.v1.MsgIBCSoftwareUpgradeResponse:
    type: object
    description: >-
      MsgIBCSoftwareUpgradeResponse defines the Msg/IBCSoftwareUpgrade response
      type.
  ibc.core.client.v1.MsgRecoverClient:
    type: object
    properties:
      subject_client_id:
        type: string
        title: >-
          the client identifier for the client to be updated if the proposal
          passes
      substitute_client_id:
        type: string
        title: >-
          the substitute client identifier for the client which will replace the
          subject

          client
      signer:
        type: string
        title: signer address
    description: >-
      MsgRecoverClient defines the message used to recover a frozen or expired
      client.
  ibc.core.client.v1.MsgRecoverClientResponse:
    type: object
    description: MsgRecoverClientResponse defines the Msg/RecoverClient response type.
  ibc.core.client.v1.MsgSubmitMisbehaviour:
    type: object
    properties:
      client_id:
        type: string
        title: client unique identifier
      misbehaviour:
        title: misbehaviour used for freezing the light client
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      signer:
        type: string
        title: signer address
    description: |-
      MsgSubmitMisbehaviour defines an sdk.Msg type that submits Evidence for
      light client misbehaviour.
      This message has been deprecated. Use MsgUpdateClient instead.
  ibc.core.client.v1.MsgSubmitMisbehaviourResponse:
    type: object
    description: |-
      MsgSubmitMisbehaviourResponse defines the Msg/SubmitMisbehaviour response
      type.
  ibc.core.client.v1.MsgUpdateClient:
    type: object
    properties:
      client_id:
        type: string
        title: client unique identifier
      client_message:
        title: client message to update the light client
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      signer:
        type: string
        title: signer address
    description: |-
      MsgUpdateClient defines an sdk.Msg to update a IBC client state using
      the given client message.
  ibc.core.client.v1.MsgUpdateClientResponse:
    type: object
    description: MsgUpdateClientResponse defines the Msg/UpdateClient response type.
  ibc.core.client.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: |-
          params defines the client parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          allowed_clients:
            type: array
            items:
              type: string
            description: >-
              allowed_clients defines the list of allowed client state types
              which can be created

              and interacted with. If a client type is removed from the allowed
              clients list, usage

              of this client will be disabled until it is added again to the
              list.
    description: MsgUpdateParams defines the sdk.Msg type to update the client parameters.
  ibc.core.client.v1.MsgUpdateParamsResponse:
    type: object
    description: MsgUpdateParamsResponse defines the MsgUpdateParams response type.
  ibc.core.client.v1.MsgUpgradeClient:
    type: object
    properties:
      client_id:
        type: string
        title: client unique identifier
      client_state:
        title: upgraded client state
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      consensus_state:
        title: >-
          upgraded consensus state, only contains enough information to serve as
          a

          basis of trust in update logic
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      proof_upgrade_client:
        type: string
        format: byte
        title: proof that old chain committed to new client
      proof_upgrade_consensus_state:
        type: string
        format: byte
        title: proof that old chain committed to new consensus state
      signer:
        type: string
        title: signer address
    title: >-
      MsgUpgradeClient defines an sdk.Msg to upgrade an IBC client to a new
      client

      state
  ibc.core.client.v1.MsgUpgradeClientResponse:
    type: object
    description: MsgUpgradeClientResponse defines the Msg/UpgradeClient response type.
  ibc.core.client.v1.Params:
    type: object
    properties:
      allowed_clients:
        type: array
        items:
          type: string
        description: >-
          allowed_clients defines the list of allowed client state types which
          can be created

          and interacted with. If a client type is removed from the allowed
          clients list, usage

          of this client will be disabled until it is added again to the list.
    description: Params defines the set of IBC light client parameters.
  ibc.core.commitment.v1.MerklePrefix:
    type: object
    properties:
      key_prefix:
        type: string
        format: byte
    title: |-
      MerklePrefix is merkle path prefixed to the key.
      The constructed key from the Path and the key will be append(Path.KeyPath,
      append(Path.KeyPrefix, key...))
  ibc.core.connection.v1.Counterparty:
    type: object
    properties:
      client_id:
        type: string
        description: >-
          identifies the client on the counterparty chain associated with a
          given

          connection.
      connection_id:
        type: string
        description: >-
          identifies the connection end on the counterparty chain associated
          with a

          given connection.
      prefix:
        description: commitment merkle prefix of the counterparty chain.
        type: object
        properties:
          key_prefix:
            type: string
            format: byte
        title: >-
          MerklePrefix is merkle path prefixed to the key.

          The constructed key from the Path and the key will be
          append(Path.KeyPath,

          append(Path.KeyPrefix, key...))
    description: >-
      Counterparty defines the counterparty chain associated with a connection
      end.
  ibc.core.connection.v1.MsgConnectionOpenAck:
    type: object
    properties:
      connection_id:
        type: string
      counterparty_connection_id:
        type: string
      version:
        type: object
        properties:
          identifier:
            type: string
            title: unique version identifier
          features:
            type: array
            items:
              type: string
            title: list of features compatible with the specified identifier
        description: >-
          Version defines the versioning scheme used to negotiate the IBC
          verison in

          the connection handshake.
      client_state:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      proof_try:
        type: string
        format: byte
        title: |-
          proof of the initialization the connection on Chain B: `UNITIALIZED ->
          TRYOPEN`
      proof_client:
        type: string
        format: byte
        title: proof of client state included in message
      proof_consensus:
        type: string
        format: byte
        title: proof of client consensus state
      consensus_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
      host_consensus_state_proof:
        type: string
        format: byte
        title: >-
          optional proof data for host state machines that are unable to
          introspect their own consensus state
    description: |-
      MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to
      acknowledge the change of connection state to TRYOPEN on Chain B.
  ibc.core.connection.v1.MsgConnectionOpenAckResponse:
    type: object
    description: >-
      MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck response
      type.
  ibc.core.connection.v1.MsgConnectionOpenConfirm:
    type: object
    properties:
      connection_id:
        type: string
      proof_ack:
        type: string
        format: byte
        title: >-
          proof for the change of the connection state on Chain A: `INIT ->
          OPEN`
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
    description: |-
      MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain B to
      acknowledge the change of connection state to OPEN on Chain A.
  ibc.core.connection.v1.MsgConnectionOpenConfirmResponse:
    type: object
    description: |-
      MsgConnectionOpenConfirmResponse defines the Msg/ConnectionOpenConfirm
      response type.
  ibc.core.connection.v1.MsgConnectionOpenInit:
    type: object
    properties:
      client_id:
        type: string
      counterparty:
        type: object
        properties:
          client_id:
            type: string
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
          connection_id:
            type: string
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            type: object
            properties:
              key_prefix:
                type: string
                format: byte
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
        description: >-
          Counterparty defines the counterparty chain associated with a
          connection end.
      version:
        type: object
        properties:
          identifier:
            type: string
            title: unique version identifier
          features:
            type: array
            items:
              type: string
            title: list of features compatible with the specified identifier
        description: >-
          Version defines the versioning scheme used to negotiate the IBC
          verison in

          the connection handshake.
      delay_period:
        type: string
        format: uint64
      signer:
        type: string
    description: |-
      MsgConnectionOpenInit defines the msg sent by an account on Chain A to
      initialize a connection with Chain B.
  ibc.core.connection.v1.MsgConnectionOpenInitResponse:
    type: object
    description: |-
      MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit response
      type.
  ibc.core.connection.v1.MsgConnectionOpenTry:
    type: object
    properties:
      client_id:
        type: string
      previous_connection_id:
        type: string
        description: >-
          Deprecated: this field is unused. Crossing hellos are no longer
          supported in core IBC.
      client_state:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      counterparty:
        type: object
        properties:
          client_id:
            type: string
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
          connection_id:
            type: string
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            type: object
            properties:
              key_prefix:
                type: string
                format: byte
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
        description: >-
          Counterparty defines the counterparty chain associated with a
          connection end.
      delay_period:
        type: string
        format: uint64
      counterparty_versions:
        type: array
        items:
          type: object
          properties:
            identifier:
              type: string
              title: unique version identifier
            features:
              type: array
              items:
                type: string
              title: list of features compatible with the specified identifier
          description: >-
            Version defines the versioning scheme used to negotiate the IBC
            verison in

            the connection handshake.
      proof_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      proof_init:
        type: string
        format: byte
        title: |-
          proof of the initialization the connection on Chain A: `UNITIALIZED ->
          INIT`
      proof_client:
        type: string
        format: byte
        title: proof of client state included in message
      proof_consensus:
        type: string
        format: byte
        title: proof of client consensus state
      consensus_height:
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      signer:
        type: string
      host_consensus_state_proof:
        type: string
        format: byte
        title: >-
          optional proof data for host state machines that are unable to
          introspect their own consensus state
    description: |-
      MsgConnectionOpenTry defines a msg sent by a Relayer to try to open a
      connection on Chain B.
  ibc.core.connection.v1.MsgConnectionOpenTryResponse:
    type: object
    description: >-
      MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry response
      type.
  ibc.core.connection.v1.MsgUpdateParams:
    type: object
    properties:
      signer:
        type: string
        title: signer address
      params:
        description: |-
          params defines the connection parameters to update.

          NOTE: All parameters must be supplied.
        type: object
        properties:
          max_expected_time_per_block:
            type: string
            format: uint64
            description: >-
              maximum expected time per block (in nanoseconds), used to enforce
              block delay. This parameter should reflect the

              largest amount of time that the chain might reasonably take to
              produce the next block under normal operating

              conditions. A safe choice is 3-5x the expected time per block.
    description: >-
      MsgUpdateParams defines the sdk.Msg type to update the connection
      parameters.
  ibc.core.connection.v1.MsgUpdateParamsResponse:
    type: object
    description: MsgUpdateParamsResponse defines the MsgUpdateParams response type.
  ibc.core.connection.v1.Params:
    type: object
    properties:
      max_expected_time_per_block:
        type: string
        format: uint64
        description: >-
          maximum expected time per block (in nanoseconds), used to enforce
          block delay. This parameter should reflect the

          largest amount of time that the chain might reasonably take to produce
          the next block under normal operating

          conditions. A safe choice is 3-5x the expected time per block.
    description: Params defines the set of Connection parameters.
  ibc.core.connection.v1.Version:
    type: object
    properties:
      identifier:
        type: string
        title: unique version identifier
      features:
        type: array
        items:
          type: string
        title: list of features compatible with the specified identifier
    description: |-
      Version defines the versioning scheme used to negotiate the IBC verison in
      the connection handshake.
  warden.intent.MsgApproveAction:
    type: object
    properties:
      creator:
        type: string
      action_type:
        type: string
      action_id:
        type: string
        format: uint64
      intent_payload:
        description: >-
          Optional payload input for the intent. This is "any" as it depends on
          the

          type of the intent linked to the action being approved.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
  warden.intent.MsgApproveActionResponse:
    type: object
    properties:
      status:
        type: string
  warden.intent.MsgNewIntent:
    type: object
    properties:
      creator:
        type: string
      name:
        type: string
      intent:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
  warden.intent.MsgNewIntentResponse:
    type: object
    properties:
      id:
        type: string
        format: uint64
  warden.intent.MsgRevokeAction:
    type: object
    properties:
      creator:
        type: string
      action_type:
        type: string
      action_id:
        type: string
        format: uint64
  warden.intent.MsgRevokeActionResponse:
    type: object
  warden.intent.MsgUpdateParams:
    type: object
    properties:
      authority:
        type: string
        description: >-
          authority is the address that controls the module (defaults to x/gov
          unless overwritten).
      params:
        description: 'NOTE: All parameters must be supplied.'
        type: object
    description: MsgUpdateParams is the Msg/UpdateParams request type.
  warden.intent.MsgUpdateParamsResponse:
    type: object
    description: |-
      MsgUpdateParamsResponse defines the response structure for executing a
      MsgUpdateParams message.
  warden.intent.Params:
    type: object
    description: Params defines the parameters for the module.
