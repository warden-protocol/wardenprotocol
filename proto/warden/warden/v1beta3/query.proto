syntax = "proto3";
package warden.warden.v1beta3;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "warden/warden/v1beta3/key.proto";
import "warden/warden/v1beta3/keychain.proto";
import "warden/warden/v1beta3/params.proto";
import "warden/warden/v1beta3/signature.proto";
import "warden/warden/v1beta3/space.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/warden/types/v1beta3";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/params";
  }

  // Queries a list of Spaces.
  rpc Spaces(QuerySpacesRequest) returns (QuerySpacesResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/spaces";
  }

  // Queries a list of Spaces that have the specified owner.
  rpc SpacesByOwner(QuerySpacesByOwnerRequest) returns (QuerySpacesResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/spaces_by_owner";
  }

  // Queries a list of Keychains.
  rpc Keychains(QueryKeychainsRequest) returns (QueryKeychainsResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/keychains";
  }

  // Queries a Space by its id.
  rpc SpaceById(QuerySpaceByIdRequest)
      returns (QuerySpaceByIdResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/space_by_address";
  }

  // Queries a Keychain by its id.
  rpc KeychainById(QueryKeychainByIdRequest)
      returns (QueryKeychainByIdResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/keychain_by_id";
  }

  // Queries a list of KeyRequests.
  rpc KeyRequests(QueryKeyRequestsRequest) returns (QueryKeyRequestsResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/key_requests";
  }

  // Queries a KeyRequest by its id.
  rpc KeyRequestById(QueryKeyRequestByIdRequest)
      returns (QueryKeyRequestByIdResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/key_request_by_id";
  }

  // Queries a list of Keys.
  rpc AllKeys(QueryAllKeysRequest) returns (QueryKeysResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/keys";
  }

  // Queries a list of Keys by their Space ID.
  rpc KeysBySpaceId(QueryKeysBySpaceIdRequest) returns (QueryKeysResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/keys_by_space_id";
  }

  // Queries a Key by its ID.
  rpc KeyById(QueryKeyByIdRequest) returns (QueryKeyResponse) {
    option (google.api.http).get = "/warden/warden/v1beta3/key_by_id";
  }

  // Queries a list of SignRequests.
  rpc SignRequests(QuerySignRequestsRequest)
      returns (QuerySignRequestsResponse) {
    option (google.api.http).get =
        "/warden/warden/v1beta3/get_sign_requests";
  }

  // Queries a SignRequest by its id.
  rpc SignRequestById(QuerySignRequestByIdRequest)
      returns (QuerySignRequestByIdResponse) {
    option (google.api.http).get =
        "/warden/warden/v1beta3/signature_pb_request_by_id";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySpacesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QuerySpacesResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated Space spaces = 2 [ (gogoproto.nullable) = false ];
}

message QuerySpacesByOwnerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string owner = 2;
}

message QueryKeychainsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryKeychainsResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated Keychain keychains = 2 [ (gogoproto.nullable) = false ];
}

message QuerySpaceByIdRequest { uint64 id = 1; }

message QuerySpaceByIdResponse { Space space = 1; }

message QueryKeychainByIdRequest { uint64 id = 1; }

message QueryKeychainByIdResponse { Keychain keychain = 1; }

message QueryKeyRequestsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  uint64 keychain_id = 2 [ (gogoproto.nullable) = true ];
  KeyRequestStatus status = 3 [ (gogoproto.nullable) = true ];
  uint64 space_id = 4 [ (gogoproto.nullable) = true ];
}

message QueryKeyRequestsResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated KeyRequest key_requests = 2;
}

message QueryKeyRequestByIdRequest { uint64 id = 1; }

message QueryKeyRequestByIdResponse { KeyRequest key_request = 1; }

message QueryAllKeysRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  repeated AddressType derive_addresses = 2 [ (gogoproto.nullable) = true ];
}

message QueryKeysResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated QueryKeyResponse keys = 2 [ (gogoproto.nullable) = false ];
}

message QueryKeysBySpaceIdRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  uint64 space_id = 2;
  repeated AddressType derive_addresses = 3 [ (gogoproto.nullable) = true ];
}

message QueryKeyByIdRequest {
  uint64 id = 1;
  repeated AddressType derive_addresses = 2 [ (gogoproto.nullable) = true ];
}

message QueryKeyResponse {
  Key key = 1 [ (gogoproto.nullable) = false ];
  repeated AddressResponse addresses = 2 [ (gogoproto.nullable) = false ];
}

message AddressResponse {
  string address = 1;
  AddressType type = 2;
}

message QuerySignRequestsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  uint64 keychain_id = 2;
  SignRequestStatus status = 3 [ (gogoproto.nullable) = true ];
  BroadcastType broadcast_type = 4 [ (gogoproto.nullable) = true ];
}

message QuerySignRequestsResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated SignRequest sign_requests = 2;
}

message QuerySignRequestByIdRequest { uint64 id = 1; }

message QuerySignRequestByIdResponse { SignRequest sign_request = 1; }

