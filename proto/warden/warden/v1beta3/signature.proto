syntax = "proto3";
package warden.warden.v1beta3;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/warden/types/v1beta3";

// SignRequestStatus indicates the status of a signature request.
//
// The possible state transitions are:
//   * PENDING -> FULFILLED
//   * PENDING -> REJECTED
enum SignRequestStatus {
  // The request is missing the status field.
  SIGN_REQUEST_STATUS_UNSPECIFIED = 0;

  // The request is waiting to be fulfilled. This is the initial state of a
  // request.
  SIGN_REQUEST_STATUS_PENDING = 1;

  // The request was fulfilled. This is a final state for a request.
  SIGN_REQUEST_STATUS_FULFILLED = 2;

  // The request was rejected. This is a final state for a request.
  SIGN_REQUEST_STATUS_REJECTED = 3;
}

// BroadcastType specifies how the transaction should be broadcasted.
enum BroadcastType {
  // The signature should be broadcasted manually by the caller.
  BROADCAST_TYPE_DISABLED = 0;
  
  // The signature should be automatically broadcasted by an offchain relayer.
  BROADCAST_TYPE_AUTOMATIC = 1;
}


// SignRequest is the request from a user (creator) to a Keychain to sign a
// message (data_for_signing).
//
// Once that the Keychain has received the request, it will either fulfill it
// or reject it. The result of the request will be stored in the result field.
message SignRequest {
  // Unique id of the request.
  uint64 id = 1;

  // Address of the creator of the request.
  string creator = 2;

  // Key ID of the key to be used for signing.
  uint64 key_id = 3;

  // Data to be signed.
  bytes data_for_signing = 4;

  // Status of the request.
  SignRequestStatus status = 5;

  // Result of the request, depending on the status:
  //   If pending, this field is empty.
  //   If approved, this field contains the signed data.
  //   If rejected, this field contains the reason.
  oneof result {
    bytes signed_data = 6 [(amino.oneof_name) = "SignedData"];
    string reject_reason = 7 [(amino.oneof_name) = "RejectReason"];
  }

  bytes encryption_key = 8;

  // Amount of fees deducted during new sign request
  repeated cosmos.base.v1beta1.Coin deducted_keychain_fees = 9 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins"
  ];

  // Broadcast type of the sign request, indicating how the transaction should be broadcasted.
  BroadcastType broadcast_type = 10;
}

