syntax = "proto3";

package warden.async.v1beta1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "warden/async/v1beta1/params.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/async/types/v1beta1";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // Create a new Future to be executed.
  rpc AddFuture (MsgAddFuture) returns (MsgAddFutureResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option           (amino.name) = "warden/x/async/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgAddFuture {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string handler = 2;
  bytes input = 3;
}

message MsgAddFutureResponse {
  uint64 id = 1;
}
