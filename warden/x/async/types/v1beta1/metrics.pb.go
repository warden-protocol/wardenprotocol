// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: warden/async/v1beta1/metrics.proto

package v1beta1

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PluginMetrics struct {
	// Id of the plugin.
	PluginId             string                `protobuf:"bytes,1,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	TasksCount           uint64                `protobuf:"varint,2,opt,name=tasks_count,json=tasksCount,proto3" json:"tasks_count,omitempty"`
	ResultsCount         uint64                `protobuf:"varint,3,opt,name=results_count,json=resultsCount,proto3" json:"results_count,omitempty"`
	TotalResultTimeMsec  cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=total_result_time_msec,json=totalResultTimeMsec,proto3,customtype=cosmossdk.io/math.Int" json:"total_result_time_msec"`
	TotalInputSizeBytes  cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=total_input_size_bytes,json=totalInputSizeBytes,proto3,customtype=cosmossdk.io/math.Int" json:"total_input_size_bytes"`
	TotalOutputSizeBytes cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=total_output_size_bytes,json=totalOutputSizeBytes,proto3,customtype=cosmossdk.io/math.Int" json:"total_output_size_bytes"`
	// Total fees paid by users for using the plugin.
	TotalFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=total_fees,json=totalFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_fees"`
}

func (m *PluginMetrics) Reset()         { *m = PluginMetrics{} }
func (m *PluginMetrics) String() string { return proto.CompactTextString(m) }
func (*PluginMetrics) ProtoMessage()    {}
func (*PluginMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_2206726f71ebe3ae, []int{0}
}
func (m *PluginMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PluginMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PluginMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginMetrics.Merge(m, src)
}
func (m *PluginMetrics) XXX_Size() int {
	return m.Size()
}
func (m *PluginMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_PluginMetrics proto.InternalMessageInfo

func (m *PluginMetrics) GetPluginId() string {
	if m != nil {
		return m.PluginId
	}
	return ""
}

func (m *PluginMetrics) GetTasksCount() uint64 {
	if m != nil {
		return m.TasksCount
	}
	return 0
}

func (m *PluginMetrics) GetResultsCount() uint64 {
	if m != nil {
		return m.ResultsCount
	}
	return 0
}

func (m *PluginMetrics) GetTotalFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalFees
	}
	return nil
}

func init() {
	proto.RegisterType((*PluginMetrics)(nil), "warden.async.v1beta1.PluginMetrics")
}

func init() {
	proto.RegisterFile("warden/async/v1beta1/metrics.proto", fileDescriptor_2206726f71ebe3ae)
}

var fileDescriptor_2206726f71ebe3ae = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xb1, 0x6e, 0xd3, 0x40,
	0x1c, 0xc6, 0x63, 0x1a, 0x0a, 0xb9, 0xb6, 0x03, 0x21, 0x80, 0x5b, 0x24, 0x27, 0x2a, 0x4b, 0x54,
	0x14, 0x9f, 0x0a, 0x6f, 0x90, 0x4a, 0x91, 0x32, 0x54, 0x20, 0xc3, 0xc4, 0x72, 0x3d, 0x9f, 0xff,
	0xb8, 0xa7, 0xd8, 0x77, 0x51, 0xfe, 0x67, 0x20, 0x9d, 0x78, 0x04, 0x66, 0x24, 0x76, 0xc4, 0xd4,
	0x81, 0x87, 0xe8, 0x58, 0x31, 0x21, 0x86, 0x82, 0x92, 0xa1, 0xaf, 0x81, 0x7c, 0x77, 0xa1, 0xa8,
	0x1b, 0x2c, 0xb6, 0xff, 0xdf, 0x7d, 0xf7, 0xfd, 0xee, 0xa4, 0xcf, 0x64, 0xf7, 0x2d, 0x9f, 0x65,
	0xa0, 0x28, 0xc7, 0xb9, 0x12, 0xf4, 0xcd, 0x7e, 0x0a, 0x86, 0xef, 0xd3, 0x12, 0xcc, 0x4c, 0x0a,
	0x8c, 0xa7, 0x33, 0x6d, 0x74, 0xbb, 0xe3, 0x3c, 0xb1, 0xf5, 0xc4, 0xde, 0xb3, 0x73, 0x87, 0x97,
	0x52, 0x69, 0x6a, 0x9f, 0xce, 0xb8, 0x13, 0x09, 0x8d, 0xa5, 0x46, 0x9a, 0x72, 0x84, 0x3f, 0x59,
	0x42, 0x4b, 0xe5, 0xd7, 0xb7, 0xdd, 0x3a, 0xb3, 0x13, 0x75, 0x83, 0x5f, 0xea, 0xe4, 0x3a, 0xd7,
	0x4e, 0xaf, 0xbf, 0x9c, 0xba, 0xfb, 0xa9, 0x49, 0xb6, 0x9e, 0x17, 0x55, 0x2e, 0xd5, 0xa1, 0x3b,
	0x51, 0xfb, 0x21, 0x69, 0x4d, 0xad, 0xc0, 0x64, 0x16, 0x06, 0xbd, 0xa0, 0xdf, 0x4a, 0x6e, 0x3b,
	0x61, 0x9c, 0xb5, 0xbb, 0x64, 0xc3, 0x70, 0x9c, 0x20, 0x13, 0xba, 0x52, 0x26, 0xbc, 0xd1, 0x0b,
	0xfa, 0xcd, 0x84, 0x58, 0xe9, 0xa0, 0x56, 0xda, 0x8f, 0xc8, 0xd6, 0x0c, 0xb0, 0x2a, 0xcc, 0xca,
	0xb2, 0x66, 0x2d, 0x9b, 0x5e, 0x74, 0xa6, 0x23, 0x72, 0xdf, 0x68, 0xc3, 0x0b, 0xe6, 0x54, 0x66,
	0x64, 0x09, 0xac, 0x44, 0x10, 0x61, 0xb3, 0xe6, 0x0d, 0x1f, 0x9f, 0x5d, 0x74, 0x1b, 0x3f, 0x2e,
	0xba, 0xf7, 0xdc, 0x05, 0x30, 0x9b, 0xc4, 0x52, 0xd3, 0x92, 0x9b, 0xe3, 0x78, 0xac, 0xcc, 0xb7,
	0xaf, 0x03, 0xe2, 0x6f, 0x36, 0x56, 0x26, 0xb9, 0x6b, 0xa3, 0x12, 0x9b, 0xf4, 0x52, 0x96, 0x70,
	0x88, 0x20, 0xae, 0x08, 0x52, 0x4d, 0x2b, 0xc3, 0x50, 0x9e, 0x00, 0x4b, 0xe7, 0x06, 0x30, 0xbc,
	0xf9, 0xbf, 0x84, 0x71, 0x9d, 0xf4, 0x42, 0x9e, 0xc0, 0xb0, 0xce, 0x69, 0xa7, 0xe4, 0x81, 0x23,
	0xe8, 0xca, 0x5c, 0x43, 0xac, 0xff, 0x3b, 0xa2, 0x63, 0xb3, 0x9e, 0xd9, 0xa8, 0x2b, 0xc6, 0xfb,
	0x80, 0x10, 0x07, 0x79, 0x0d, 0x80, 0xe1, 0xad, 0xde, 0x5a, 0x7f, 0xe3, 0xc9, 0x76, 0xec, 0xf7,
	0xd5, 0x1d, 0x58, 0x75, 0x25, 0x3e, 0xd0, 0x52, 0x0d, 0x47, 0x35, 0xf2, 0xcb, 0xcf, 0x6e, 0x3f,
	0x97, 0xe6, 0xb8, 0x4a, 0x63, 0xa1, 0x4b, 0xdf, 0x01, 0xff, 0x1a, 0x60, 0x36, 0xa1, 0x66, 0x3e,
	0x05, 0xb4, 0x1b, 0xf0, 0xe3, 0xe5, 0xe9, 0xde, 0x66, 0x01, 0x39, 0x17, 0x73, 0x56, 0xb7, 0x08,
	0x3f, 0x5f, 0x9e, 0xee, 0x05, 0x49, 0xcb, 0x42, 0x47, 0x00, 0x38, 0x3c, 0x3a, 0x5b, 0x44, 0xc1,
	0xf9, 0x22, 0x0a, 0x7e, 0x2d, 0xa2, 0xe0, 0xc3, 0x32, 0x6a, 0x9c, 0x2f, 0xa3, 0xc6, 0xf7, 0x65,
	0xd4, 0x78, 0x35, 0xfa, 0x0b, 0xe2, 0xea, 0x3b, 0xb0, 0x95, 0x12, 0xba, 0xf0, 0xf3, 0xb5, 0x91,
	0xbe, 0xf3, 0xff, 0x80, 0x3d, 0xc0, 0xaa, 0xbd, 0xe9, 0xba, 0xb5, 0x3d, 0xfd, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x92, 0x82, 0xdb, 0xf3, 0x28, 0x03, 0x00, 0x00,
}

func (m *PluginMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalFees) > 0 {
		for iNdEx := len(m.TotalFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetrics(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.TotalOutputSizeBytes.Size()
		i -= size
		if _, err := m.TotalOutputSizeBytes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetrics(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalInputSizeBytes.Size()
		i -= size
		if _, err := m.TotalInputSizeBytes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetrics(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalResultTimeMsec.Size()
		i -= size
		if _, err := m.TotalResultTimeMsec.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetrics(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ResultsCount != 0 {
		i = encodeVarintMetrics(dAtA, i, uint64(m.ResultsCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TasksCount != 0 {
		i = encodeVarintMetrics(dAtA, i, uint64(m.TasksCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PluginId) > 0 {
		i -= len(m.PluginId)
		copy(dAtA[i:], m.PluginId)
		i = encodeVarintMetrics(dAtA, i, uint64(len(m.PluginId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetrics(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetrics(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PluginMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PluginId)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.TasksCount != 0 {
		n += 1 + sovMetrics(uint64(m.TasksCount))
	}
	if m.ResultsCount != 0 {
		n += 1 + sovMetrics(uint64(m.ResultsCount))
	}
	l = m.TotalResultTimeMsec.Size()
	n += 1 + l + sovMetrics(uint64(l))
	l = m.TotalInputSizeBytes.Size()
	n += 1 + l + sovMetrics(uint64(l))
	l = m.TotalOutputSizeBytes.Size()
	n += 1 + l + sovMetrics(uint64(l))
	if len(m.TotalFees) > 0 {
		for _, e := range m.TotalFees {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func sovMetrics(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetrics(x uint64) (n int) {
	return sovMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PluginMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TasksCount", wireType)
			}
			m.TasksCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TasksCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultsCount", wireType)
			}
			m.ResultsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalResultTimeMsec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalResultTimeMsec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInputSizeBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalInputSizeBytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOutputSizeBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalOutputSizeBytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFees = append(m.TotalFees, types.Coin{})
			if err := m.TotalFees[len(m.TotalFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetrics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetrics
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetrics
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetrics        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetrics          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetrics = fmt.Errorf("proto: unexpected end of group")
)
