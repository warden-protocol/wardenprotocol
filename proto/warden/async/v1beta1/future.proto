syntax = "proto3";

package warden.async.v1beta1;

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/async/types/v1beta1";

// Future defines a task that will be executed asynchronously.
// Validators will be able to submit the proposed result of the Future
// execution.
// Other validators will then be able to vote on the validity of the proposed
// result.
message Future {
  // Unique ID of the Future.
  uint64 id = 1;
  // Creator of the Future.
  string creator = 2;
  // Unique name of the handler to be used to execute the Future.
  string handler = 3;
  // Input data to be used by the handler to execute the Future.
  // The actual format is determined by the handler being used.
  bytes input = 4;
}

// FutureResult is the result of the execution of a Future.
// It is submitted by validators as vote extensions.
// Only one FutureResult per Future is allowed to be submitted, subsequent
// attempts to submit a FutureResult will be rejected.
message FutureResult {
  // ID of the Future this result is for.
  uint64 id = 1;
  // Output of the Future.
  // The actual format is determined by the handler being used.
  bytes output = 2;
  // Address of the validator that submitted the result.
  bytes submitter = 3;
}

// FutureVote is the vote of a validator on the validity of a Future result.
message FutureVote {
  // ID of the Future this vote is for.
  uint64 future_id = 1;
  // Address of the validator who voted.
  bytes voter = 2;
  // Vote type.
  FutureVoteType vote = 3;
}

enum FutureVoteType {
  // Unspecified vote type.
  VOTE_TYPE_UNSPECIFIED = 0;
  // Vote to approve the result of the Future.
  VOTE_TYPE_VERIFIED = 1;
  // Vote to reject the result of the Future.
  VOTE_TYPE_REJECTED = 2;
}
