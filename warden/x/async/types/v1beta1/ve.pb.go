// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: warden/async/v1beta1/ve.proto

package v1beta1

import (
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AsyncInjectedTx struct {
	// All the vote extensions gathered for this block.
	//
	// FIXME: slinky also does that, so technically we're duplicating information
	// and wasting block space.
	ExtendedVotesInfo []types.ExtendedVoteInfo `protobuf:"bytes,1,rep,name=extended_votes_info,json=extendedVotesInfo,proto3" json:"extended_votes_info"`
}

func (m *AsyncInjectedTx) Reset()         { *m = AsyncInjectedTx{} }
func (m *AsyncInjectedTx) String() string { return proto.CompactTextString(m) }
func (*AsyncInjectedTx) ProtoMessage()    {}
func (*AsyncInjectedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e24cf4461cf67a, []int{0}
}
func (m *AsyncInjectedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AsyncInjectedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AsyncInjectedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AsyncInjectedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsyncInjectedTx.Merge(m, src)
}
func (m *AsyncInjectedTx) XXX_Size() int {
	return m.Size()
}
func (m *AsyncInjectedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_AsyncInjectedTx.DiscardUnknown(m)
}

var xxx_messageInfo_AsyncInjectedTx proto.InternalMessageInfo

func (m *AsyncInjectedTx) GetExtendedVotesInfo() []types.ExtendedVoteInfo {
	if m != nil {
		return m.ExtendedVotesInfo
	}
	return nil
}

// A vote extension coming from a validator. It contains results, votes for
// some futures and handlers that are supported by the validator.
type AsyncVoteExtension struct {
	Results  []*VEResultItem `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Votes    []*VEVoteItem   `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
	Handlers []string        `protobuf:"bytes,3,rep,name=handlers,proto3" json:"handlers,omitempty"`
}

func (m *AsyncVoteExtension) Reset()         { *m = AsyncVoteExtension{} }
func (m *AsyncVoteExtension) String() string { return proto.CompactTextString(m) }
func (*AsyncVoteExtension) ProtoMessage()    {}
func (*AsyncVoteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e24cf4461cf67a, []int{1}
}
func (m *AsyncVoteExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AsyncVoteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AsyncVoteExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AsyncVoteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsyncVoteExtension.Merge(m, src)
}
func (m *AsyncVoteExtension) XXX_Size() int {
	return m.Size()
}
func (m *AsyncVoteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_AsyncVoteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_AsyncVoteExtension proto.InternalMessageInfo

func (m *AsyncVoteExtension) GetResults() []*VEResultItem {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *AsyncVoteExtension) GetVotes() []*VEVoteItem {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *AsyncVoteExtension) GetHandlers() []string {
	if m != nil {
		return m.Handlers
	}
	return nil
}

type VEResultItem struct {
	FutureId uint64 `protobuf:"varint,1,opt,name=future_id,json=futureId,proto3" json:"future_id,omitempty"`
	Output   []byte `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *VEResultItem) Reset()         { *m = VEResultItem{} }
func (m *VEResultItem) String() string { return proto.CompactTextString(m) }
func (*VEResultItem) ProtoMessage()    {}
func (*VEResultItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e24cf4461cf67a, []int{2}
}
func (m *VEResultItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VEResultItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VEResultItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VEResultItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VEResultItem.Merge(m, src)
}
func (m *VEResultItem) XXX_Size() int {
	return m.Size()
}
func (m *VEResultItem) XXX_DiscardUnknown() {
	xxx_messageInfo_VEResultItem.DiscardUnknown(m)
}

var xxx_messageInfo_VEResultItem proto.InternalMessageInfo

func (m *VEResultItem) GetFutureId() uint64 {
	if m != nil {
		return m.FutureId
	}
	return 0
}

func (m *VEResultItem) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type VEVoteItem struct {
	FutureId uint64         `protobuf:"varint,1,opt,name=future_id,json=futureId,proto3" json:"future_id,omitempty"`
	Vote     FutureVoteType `protobuf:"varint,2,opt,name=vote,proto3,enum=warden.async.v1beta1.FutureVoteType" json:"vote,omitempty"`
}

func (m *VEVoteItem) Reset()         { *m = VEVoteItem{} }
func (m *VEVoteItem) String() string { return proto.CompactTextString(m) }
func (*VEVoteItem) ProtoMessage()    {}
func (*VEVoteItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3e24cf4461cf67a, []int{3}
}
func (m *VEVoteItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VEVoteItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VEVoteItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VEVoteItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VEVoteItem.Merge(m, src)
}
func (m *VEVoteItem) XXX_Size() int {
	return m.Size()
}
func (m *VEVoteItem) XXX_DiscardUnknown() {
	xxx_messageInfo_VEVoteItem.DiscardUnknown(m)
}

var xxx_messageInfo_VEVoteItem proto.InternalMessageInfo

func (m *VEVoteItem) GetFutureId() uint64 {
	if m != nil {
		return m.FutureId
	}
	return 0
}

func (m *VEVoteItem) GetVote() FutureVoteType {
	if m != nil {
		return m.Vote
	}
	return FutureVoteType_VOTE_TYPE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*AsyncInjectedTx)(nil), "warden.async.v1beta1.AsyncInjectedTx")
	proto.RegisterType((*AsyncVoteExtension)(nil), "warden.async.v1beta1.AsyncVoteExtension")
	proto.RegisterType((*VEResultItem)(nil), "warden.async.v1beta1.VEResultItem")
	proto.RegisterType((*VEVoteItem)(nil), "warden.async.v1beta1.VEVoteItem")
}

func init() { proto.RegisterFile("warden/async/v1beta1/ve.proto", fileDescriptor_e3e24cf4461cf67a) }

var fileDescriptor_e3e24cf4461cf67a = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x8e, 0xb7, 0x65, 0xd9, 0x35, 0x2b, 0x10, 0x66, 0x85, 0xa2, 0xae, 0x08, 0xd9, 0x88, 0x43,
	0x2e, 0xd8, 0xda, 0x45, 0x42, 0x1c, 0xb8, 0xb0, 0x68, 0x2b, 0xe5, 0x1a, 0x55, 0x45, 0xe2, 0x52,
	0xf2, 0x33, 0x6d, 0x53, 0xb5, 0x76, 0x14, 0x3b, 0xa5, 0x7d, 0x0b, 0x9e, 0x82, 0x67, 0xe9, 0xb1,
	0x47, 0x4e, 0x08, 0xb5, 0x2f, 0x82, 0xec, 0xb8, 0xb4, 0x42, 0x85, 0x5b, 0x66, 0xbe, 0xbf, 0xc9,
	0x78, 0xf0, 0x8b, 0xaf, 0x49, 0x95, 0x03, 0x67, 0x89, 0x5c, 0xf2, 0x8c, 0xcd, 0x6f, 0x52, 0x50,
	0xc9, 0x0d, 0x9b, 0x03, 0x2d, 0x2b, 0xa1, 0x04, 0xb9, 0x6c, 0x60, 0x6a, 0x60, 0x6a, 0xe1, 0xce,
	0xe5, 0x48, 0x8c, 0x84, 0x21, 0x30, 0xfd, 0xd5, 0x70, 0x3b, 0x57, 0x0a, 0x78, 0x0e, 0xd5, 0xac,
	0xe0, 0x8a, 0x25, 0x69, 0x56, 0x30, 0xb5, 0x2c, 0x41, 0x5a, 0xf0, 0xfa, 0x68, 0xce, 0xb0, 0x56,
	0x75, 0x65, 0xb3, 0x82, 0x09, 0x7e, 0xf2, 0x41, 0xa3, 0x11, 0x9f, 0x40, 0xa6, 0x20, 0xef, 0x2d,
	0xc8, 0x27, 0xfc, 0x0c, 0x16, 0xc6, 0x36, 0x1f, 0xcc, 0x85, 0x02, 0x39, 0x28, 0xf8, 0x50, 0xb8,
	0xc8, 0x6f, 0x85, 0x8f, 0x6e, 0xaf, 0xe9, 0x3e, 0x90, 0xea, 0x40, 0x7a, 0x6f, 0xb9, 0x7d, 0xa1,
	0x20, 0xe2, 0x43, 0x71, 0xd7, 0x5e, 0xfd, 0x7c, 0xe9, 0xc4, 0x4f, 0xe1, 0xa0, 0x2f, 0x35, 0x10,
	0x7c, 0x47, 0x98, 0x98, 0x30, 0xdd, 0x32, 0x32, 0x59, 0x08, 0x4e, 0xde, 0xe3, 0x87, 0x15, 0xc8,
	0x7a, 0xaa, 0xa4, 0xcd, 0x08, 0xe8, 0xb1, 0x05, 0xd0, 0xfe, 0x7d, 0x6c, 0x68, 0x91, 0x82, 0x59,
	0xbc, 0x93, 0x90, 0xb7, 0xf8, 0x81, 0x19, 0xd2, 0x3d, 0x31, 0x5a, 0xff, 0x5f, 0x5a, 0x33, 0x9e,
	0x56, 0x36, 0x74, 0xd2, 0xc1, 0x67, 0xe3, 0x84, 0xe7, 0x53, 0xa8, 0xa4, 0xdb, 0xf2, 0x5b, 0xe1,
	0x79, 0xfc, 0xa7, 0x0e, 0x3e, 0xe2, 0x8b, 0xc3, 0x30, 0x72, 0x85, 0xcf, 0x9b, 0xa5, 0x0d, 0x8a,
	0xdc, 0x45, 0x3e, 0x0a, 0xdb, 0xf1, 0x59, 0xd3, 0x88, 0x72, 0xf2, 0x1c, 0x9f, 0x8a, 0x5a, 0x95,
	0xb5, 0x72, 0x4f, 0x7c, 0x14, 0x5e, 0xc4, 0xb6, 0x0a, 0x32, 0x8c, 0xf7, 0xa9, 0xff, 0xb7, 0x78,
	0x87, 0xdb, 0x7a, 0x28, 0x63, 0xf0, 0xf8, 0xf6, 0xd5, 0xf1, 0x5f, 0xe8, 0x1a, 0xb6, 0x36, 0xec,
	0x2d, 0x4b, 0x88, 0x8d, 0xe2, 0xee, 0xcb, 0x6a, 0xe3, 0xa1, 0xf5, 0xc6, 0x43, 0xbf, 0x36, 0x1e,
	0xfa, 0xb6, 0xf5, 0x9c, 0xf5, 0xd6, 0x73, 0x7e, 0x6c, 0x3d, 0xe7, 0x73, 0x77, 0x54, 0xa8, 0x71,
	0x9d, 0xd2, 0x4c, 0xcc, 0x58, 0xe3, 0xf7, 0xda, 0xbc, 0x78, 0x26, 0xa6, 0xb6, 0xfe, 0xab, 0x64,
	0x0b, 0x7b, 0x27, 0xe6, 0x82, 0x76, 0xd7, 0x92, 0x9e, 0x1a, 0xda, 0x9b, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x84, 0x50, 0x7f, 0x13, 0xb4, 0x02, 0x00, 0x00,
}

func (m *AsyncInjectedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AsyncInjectedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AsyncInjectedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedVotesInfo) > 0 {
		for iNdEx := len(m.ExtendedVotesInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendedVotesInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AsyncVoteExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AsyncVoteExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AsyncVoteExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Handlers) > 0 {
		for iNdEx := len(m.Handlers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Handlers[iNdEx])
			copy(dAtA[i:], m.Handlers[iNdEx])
			i = encodeVarintVe(dAtA, i, uint64(len(m.Handlers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VEResultItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VEResultItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VEResultItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintVe(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x12
	}
	if m.FutureId != 0 {
		i = encodeVarintVe(dAtA, i, uint64(m.FutureId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VEVoteItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VEVoteItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VEVoteItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		i = encodeVarintVe(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x10
	}
	if m.FutureId != 0 {
		i = encodeVarintVe(dAtA, i, uint64(m.FutureId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVe(dAtA []byte, offset int, v uint64) int {
	offset -= sovVe(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AsyncInjectedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedVotesInfo) > 0 {
		for _, e := range m.ExtendedVotesInfo {
			l = e.Size()
			n += 1 + l + sovVe(uint64(l))
		}
	}
	return n
}

func (m *AsyncVoteExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovVe(uint64(l))
		}
	}
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovVe(uint64(l))
		}
	}
	if len(m.Handlers) > 0 {
		for _, s := range m.Handlers {
			l = len(s)
			n += 1 + l + sovVe(uint64(l))
		}
	}
	return n
}

func (m *VEResultItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FutureId != 0 {
		n += 1 + sovVe(uint64(m.FutureId))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovVe(uint64(l))
	}
	return n
}

func (m *VEVoteItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FutureId != 0 {
		n += 1 + sovVe(uint64(m.FutureId))
	}
	if m.Vote != 0 {
		n += 1 + sovVe(uint64(m.Vote))
	}
	return n
}

func sovVe(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVe(x uint64) (n int) {
	return sovVe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AsyncInjectedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AsyncInjectedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AsyncInjectedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedVotesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedVotesInfo = append(m.ExtendedVotesInfo, types.ExtendedVoteInfo{})
			if err := m.ExtendedVotesInfo[len(m.ExtendedVotesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AsyncVoteExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AsyncVoteExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AsyncVoteExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &VEResultItem{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, &VEVoteItem{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handlers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handlers = append(m.Handlers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VEResultItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VEResultItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VEResultItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureId", wireType)
			}
			m.FutureId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FutureId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output[:0], dAtA[iNdEx:postIndex]...)
			if m.Output == nil {
				m.Output = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VEVoteItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VEVoteItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VEVoteItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureId", wireType)
			}
			m.FutureId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FutureId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= FutureVoteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVe
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVe
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVe
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVe        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVe          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVe = fmt.Errorf("proto: unexpected end of group")
)
